<type access-modifier="private" name="GroupTree" display-name="GroupTree" uuid="bcc64033-73ca-444c-bcfa-84efc86a9c4a" base-type="Tree" base-type-id="bebad81f-83c4-4dc1-8ac4-e7fe7b6ee966" ver="5" description="">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="256" ver="5"/>
	<designed target="Height" value="192" ver="5"/>
	<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0" ver="5"/>
	<designed target="FontColor" value="4278190080" ver="5"/>
	<designed target="BackgroundColor" value="4294967295" ver="5"/>
	<designed target="FrameVisible" value="true" ver="5"/>
	<designed target="ColumnCount" value="4" ver="5"/>
	<designed target="HeaderVisible" value="false" ver="5"/>
	<designed target="CurrentItem" value="" ver="5"/>
	<do access-modifier="private" name="LoadDataToTree" display-name="LoadDataToTree" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[var groupsList = JSON.parse(JSONGroupsList).data;

RemoveChildren("");
if (groupsList.length != 0) {
	for (let group of getGroupsStructure(groupsList)){
		printNode("", group);
	}
}

//------------------------------------------------------------------------------
function sortByDisplayName(list) {
    return list.sort((a, b) => a.displayName.toString().toLowerCase() > b.displayName.toString().toLowerCase() ? 1 : -1);
}

//Заполнение узла дерева
function printNode(parentNodeId, group){
	let nodeId = AddItem(parentNodeId, group.displayName);
	SetItemData(nodeId, group.displayName, 1);
	SetItemData(nodeId, group.description, 2);
	SetItemData(nodeId, group.uid, 3);
	SetItemIconPath(nodeId,"Security_Icons/Group16.png",0);
	for (let childGroup of group.children){
		printNode(nodeId, childGroup);		
	}
}

//Формирование структуры описывающую иерархию групп
function getGroupsStructure(originalList){
	var rootGroups = originalList.filter(group => !group.hasOwnProperty("parent_id"));
	rootGroups = sortByDisplayName(rootGroups);

	var groupsStructure = [];
	for (let element of rootGroups) {
		element.children = addChild(element);
		groupsStructure.push(element);
	}
	return groupsStructure;

//Рекурсивное добавление вложенных групп
	function addChild(element) {
		let children = [];
		for (let currentElement of originalList) {
			if (element.uid == currentElement.parent_id) {
				children.push(currentElement);
				currentElement.children = addChild(currentElement);
			}
		}
		return sortByDisplayName(children);
	}
}]]>
		</body>
		<param access-modifier="private" name="JSONGroupsList" display-name="" uuid="c7d677a3-30e7-4c2b-90e8-3d4842017cb8" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<object access-modifier="private" name="Initializer" display-name="Initializer" uuid="8794eda8-fb22-4c7b-9926-c40c795b71dc" base-type="Initializer" base-type-id="6db89679-9299-4993-ad1a-0d086cd1c7d2" ver="5" description="" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Initialized">
			<body kind="om">
				<![CDATA[SetColumnName("Группы",0);
SetColumnWidth(0, 250);

SetColumnName("displayName",1);
SetColumnHidden(1,true);

SetColumnName("description",2);
SetColumnHidden(2,true);

SetColumnName("uid",3);
SetColumnHidden(3,true);
]]>
			</body>
		</do-on>
	</object>
	<do access-modifier="private" name="GetCurrentGroupId" display-name="GetCurrentGroupId" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[return Variant.ToString(GetItemData(CurrentItem,3),"");]]>
		</body>
	</do>
	<designed target="Flip" value="0" ver="5"/>
</type>

