<type access-modifier="public" name="Trends_Indicator" display-name="Trends_Indicator" uuid="13588092-03b2-409e-a184-a56745e08b2a" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5" description="">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Flip" value="0" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="200" ver="5"/>
	<designed target="Height" value="100" ver="5"/>
	<designed target="RoundingRadius" value="0" ver="5"/>
	<designed target="PenColor" value="0xff808080" ver="5"/>
	<designed target="PenStyle" value="0" ver="5"/>
	<designed target="PenWidth" value="1" ver="5"/>
	<designed target="BrushColor" value="0xfff0f0f0" ver="5"/>
	<designed target="BrushStyle" value="0" ver="5"/>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="5f407dac-1498-4e3f-8534-a04d1f3d15ea" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<object access-modifier="private" name="private" display-name="private" uuid="6d31ba0b-d046-4ae0-a8c4-187e77cbce3b" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="pTheme" display-name="pTheme" uuid="2b8c8c11-8e6f-4522-b502-25042ce4a7ab" base-type="Trends_Theme" base-type-id="3fbfa4c2-c742-4bec-94dc-d1bcb7ef25b6" ver="5" base-ref="true">
			<do-trace access-modifier="private" target="BackgroundColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.BackgroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="ForegroundColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.ForegroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="DisabledFontColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.DisabledFontColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="EditorBrushColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.EditorBrushColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="EditorFontColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.EditorFontColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="BorderColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.BorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="SelectionColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.SelectionColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="DisabledBorderColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.DisabledBorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleFont" ver="5">
				<body>
					<![CDATA[here.init_Theme.TitleFont]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[here.init_Theme.Font]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="Palette" display-name="Palette" uuid="eff3af25-29bc-4556-892f-c96b4dde61dc" base-type="ColorPalette" base-type-id="6aadbfde-782a-4d60-ae52-bfb1df84949f" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="Initializer" display-name="Initializer" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (Inited)	return;
Inited = true;
//Debug.Log("Trends_Chart. Инициализация");

// переходим к текущему времени
MoveToNow();

// Приоритеты декораторов
LineDecorators.SetDefault();
i:int4 = 1;
while (i < Line.Length)
{
	j:int4 = 0;
	while (j < Line.Decor.Length)
	{
		Line[i].Decor[j].zOrder = i;
		Line[i].Decor[j].Active = false;
		j += 1;
	}
	axisXId:int4 = Chart.Axis_X.GetID();
	axisYId:int4 = Chart.Axis_Y.GetID();
	Line[i].SetAxesByIds(axisXId, axisYId);
	i += 1;
}

AutoRange.Update(AutoRange);]]>
			</body>
		</do>
		<object access-modifier="private" name="LineDecorators" display-name="Оформление графиков" uuid="c09d9b40-4543-41b0-b2a5-1060a2f391a8" base-type="LineStyles" base-type-id="ff917acc-0401-4101-b467-5752cc64518c" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="zOrderCount" display-name="zOrderCount" uuid="aff61cd0-7689-4701-91d0-60561456bc07" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<object access-modifier="private" name="Inited" display-name="Inited" uuid="2e7dd1c6-562e-42d9-b5ac-b1173e13a76b" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="MoveToNow" display-name="MoveToNow" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// переместить отображаемый интервал по оси X к текущему времени
now: uint8 = DateTime.UtcNow();
private.UpdateOperativeTimeInterval(now, true);]]>
			</body>
		</do>
		<do access-modifier="private" name="UpdateOperativeTimeInterval" display-name="UpdateOperativeTimeInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[t2: uint8 = lastTime;

if (t2 > ViewInterval.End || shiftToLastTime)
{
	// обновляем текущий интервал
	t1: uint8 = t2 - ViewInterval.currentValue;
	//Debug.Log("UpdateOperativeTimeInterval: " + DateTime.ToString(t1) + " .. " + DateTime.ToString(t2));
	SetTimeInterval(t1, t2);
}

]]>
			</body>
			<param access-modifier="private" name="lastTime" display-name="" uuid="e0d4d087-b6dc-4cd7-8ba5-58e145ecb5f1" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
			<param access-modifier="private" name="shiftToLastTime" display-name="" uuid="431a6c69-b78b-44c4-b494-a7b4ef2d49e5" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
		<do access-modifier="private" name="SetTimeInterval" display-name="SetTimeInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<param access-modifier="private" name="t1" display-name="" uuid="4ba1666c-5926-4aa6-baab-98dfae784826" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
			<param access-modifier="private" name="t2" display-name="" uuid="802f40c1-149e-4ab8-8473-c80433b704a9" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
			<body kind="om">
				<![CDATA[if (t2 > t1)
{
	//Debug.Log("SetTimeInterval: " + DateTime.ToString(t1) + " - " + DateTime.ToString(t2));
	
	ViewInterval.Begin = t1;
	ViewInterval.End = t2;
	
	Chart.UpdateAxisXInterval(t1, t2);
}]]>
			</body>
		</do>
		<do access-modifier="private" name="RemoveItem" display-name="RemoveItem" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("RemoveItem. Index="+Str.ToString(index));

i:int4 = 1;
while (i < Line.Length)
{
	if (index==unit.Const.ALL || index==i)
	{
		Line[i].Used = false;
		Line[i].Visible = false;
		Line[i].ApItem.Path = "**";
		Line[i].zOrder = 0;
		Line[i].DataSource_1.Clear();
		Line[i].DataSource_1.CancelReadAsync();
		Line[i].DataSource_1.ApItemValueQuery.Active = false;
	}
	i += 1;
}
]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="94d45b02-0a1a-4cfe-979f-9077d76fcc6a" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<init target="pTheme" ver="5" ref="init_Theme"/>
	</object>
	<param access-modifier="private" name="init_Theme" display-name="Тема оформления" uuid="bd5ac37c-cd27-415d-8559-9ed91ba3a91f" base-type="Trends_Theme" base-type-id="3fbfa4c2-c742-4bec-94dc-d1bcb7ef25b6" base-const="true" base-ref="true" ver="5"/>
	<param access-modifier="private" name="initApSource" display-name="initApSource" uuid="b54ef005-1256-455a-83e4-8dc834545359" base-type="ApSource" base-type-id="966603da-f05e-4b4d-8ef0-919efbf8ab2c" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="Chart" display-name="Chart" uuid="fa7a7048-87a3-4b3d-8991-35b160034452" base-type="Chart" base-type-id="447c3e77-56f5-497c-950c-067da367ad6a" ver="5" cardinal="1">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="Enabled" value="false" ver="5"/>
		<designed target="Tooltip" value="" ver="5"/>
		<designed target="Width" value="800" ver="5"/>
		<designed target="Height" value="550" ver="5"/>
		<designed target="CursorPointSize" value="4" ver="5"/>
		<designed target="CursorLineWidth" value="1" ver="5"/>
		<designed target="BrushColor" value="4294967295" ver="5"/>
		<designed target="CursorColor" value="4288716964" ver="5"/>
		<designed target="CursorLineBrushStyle" value="2" ver="5"/>
		<designed target="ShowTimeLine" value="false" ver="5"/>
		<designed target="ShowLegend" value="false" ver="5"/>
		<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
		<designed target="ZoomX" value="0" ver="5"/>
		<designed target="ZoomY" value="0" ver="5"/>
		<designed target="AutoUpdate" value="true" ver="5"/>
		<object access-modifier="private" name="Axis_X" display-name="Axis_X" uuid="e01760b2-f27a-421b-ae31-1df0490e0eb7" base-type="Axis" base-type-id="790efceb-e3a3-4c3f-b766-9557ba52a4d3" ver="5">
			<designed target="Color" value="0xff323232" ver="5"/>
			<designed target="Type" value="1" ver="5"/>
			<designed target="Align" value="1" ver="5"/>
			<designed target="DataType" value="1" ver="5"/>
			<designed target="Ticks" value="7" ver="5"/>
			<designed target="Scale" value="0" ver="5"/>
			<designed target="ScaleLog" value="false" ver="5"/>
			<designed target="Unit" value="" ver="5"/>
			<designed target="UnitPos" value="1" ver="5"/>
			<designed target="Format" value="%.4g" ver="5"/>
			<designed target="FormatT" value="hh:mm:ss" ver="5"/>
			<designed target="Min" value="132702881234590000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
			<designed target="Max" value="116444736010300000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
			<designed target="AxisName" value="" ver="5"/>
			<designed target="AxisNamePos" value="2" ver="5"/>
			<designed target="Visible" value="true" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="Zoom" value="0" ver="5"/>
			<designed target="ShowUnit" value="false" ver="5"/>
			<designed target="AutoWidth" value="false" ver="5"/>
			<designed target="AxisWidth" value="1" ver="5"/>
			<do-trace access-modifier="private" target="Color" ver="5">
				<body>
					<![CDATA[private.pTheme.EditorFontColor]]>
				</body>
			</do-trace>
			<designed target="ShowBoundaryValues" value="false" ver="5"/>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[here.private.pTheme.AxisFont]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="AutoWidth" ver="5">
				<body>
					<![CDATA[ShowAxisX]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="Axis_Y" display-name="Axis_Y" uuid="a58352e4-1ee8-4162-baa2-293dbfc0268a" base-type="Axis" base-type-id="790efceb-e3a3-4c3f-b766-9557ba52a4d3" ver="5" cardinal="1">
			<designed target="Color" value="0xff323232" ver="5"/>
			<designed target="Type" value="2" ver="5"/>
			<designed target="Align" value="1" ver="5"/>
			<designed target="DataType" value="0" ver="5"/>
			<designed target="Ticks" value="10" ver="5"/>
			<designed target="Scale" value="0" ver="5"/>
			<designed target="ScaleLog" value="false" ver="5"/>
			<designed target="Unit" value="" ver="5"/>
			<designed target="UnitPos" value="1" ver="5"/>
			<designed target="Format" value="%.5g" ver="5"/>
			<designed target="FormatT" value="hh:mm:ss" ver="5"/>
			<designed target="Min" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
			<designed target="Max" value="100" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
			<designed target="AxisName" value="" ver="5"/>
			<designed target="AxisNamePos" value="2" ver="5"/>
			<designed target="Visible" value="true" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="Zoom" value="0" ver="5"/>
			<designed target="ShowUnit" value="true" ver="5"/>
			<designed target="AutoWidth" value="false" ver="5"/>
			<designed target="AxisWidth" value="1" ver="5"/>
			<do-trace access-modifier="private" target="Color" ver="5">
				<body>
					<![CDATA[private.pTheme.EditorFontColor]]>
				</body>
			</do-trace>
			<designed target="ShowBoundaryValues" value="false" ver="5"/>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[here.private.pTheme.AxisFont]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="Format" ver="5">
				<body>
					<![CDATA[here.private.pTheme.AxisFormat]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="AutoWidth" ver="5">
				<body>
					<![CDATA[ShowAxisY]]>
				</body>
			</do-trace>
		</object>
		<designed target="AlignLegend" value="0" ver="5"/>
		<designed target="Extrapolation" value="true" ver="5"/>
		<designed target="CursorMode" value="0" ver="5"/>
		<designed target="ActiveControllineColor" value="4294901760" ver="5"/>
		<designed target="ActiveControllineWidth" value="3" ver="5"/>
		<designed target="MovePointLabels" value="true" ver="5"/>
		<designed target="EnableScaleAxisX" value="true" ver="5"/>
		<designed target="ShowWinOptions" value="false" ver="5"/>
		<designed target="Padding" value="1,0,0,0" ver="5"/>
		<designed target="ZValue" value="0" ver="5"/>
		<designed target="ControlLineAxisLabelsLocation" value="2" ver="5"/>
		<do-trace access-modifier="private" target="BrushColor" ver="5">
			<body>
				<![CDATA[private.pTheme.ChartFieldColor]]>
			</body>
		</do-trace>
		<designed target="RightExtrapolationLimit" value="116444736000000000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
		<designed target="MinTimeline" value="116444736000000000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
		<designed target="MaxTimeline" value="116444736000000000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
		<do access-modifier="private" name="UpdateAxisXInterval" display-name="UpdateAxisXInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// изменяем границы интервала оси только если это необходимо
lb: uint8 = Variant.ToUint8(Axis_X.Min, 0);
rb: uint8 = Variant.ToUint8(Axis_X.Max, 0);
if (lb != begin || rb != end)
{
	//Debug.Log("Chart[" + String.ToString(Index) + "].AxisX.SetInterval(" + DateTime.ToString(begin) + ", " + DateTime.ToString(end) + ")");
	Axis_X.SetInterval(begin, end);
}]]>
			</body>
			<param access-modifier="private" name="begin" display-name="" uuid="4d78ed28-c815-4622-84c9-f79659de3acd" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
			<param access-modifier="private" name="end" display-name="" uuid="9024aada-24ae-4351-8886-a45187f45c42" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		</do>
		<do-trace access-modifier="private" target="Font" ver="5">
			<body>
				<![CDATA[private.pTheme.Font]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="CursorColor" ver="5">
			<body>
				<![CDATA[private.pTheme.ForegroundColor]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="LinearLayout_1" display-name="LinearLayout_1" uuid="86f314b7-68f2-4540-a1ff-6674c652acde" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="5" description="" cardinal="1">
		<designed target="Orientation" value="1" ver="5"/>
		<designed target="Gap" value="0" ver="5"/>
	</object>
	<object access-modifier="private" name="params" display-name="params" uuid="7a1e43b1-eeb0-4070-8d8c-f631c0590098" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<do access-modifier="private" name="GetIndexByPath" display-name="GetIndexByPath" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[for (i: int4 = 1; i<Line.Length; i += 1)
{
	if (Line[i].Used && Line[i].ApItem.Path==tag)
		return i;
}
return -1;]]>
			</body>
			<param access-modifier="private" name="tag" display-name="" uuid="efb9d109-6111-4046-87c9-057c06d75f7b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="TagIsUse" display-name="TagIsUse" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="om">
				<![CDATA[index: int4 = GetIndexByPath(tag);
return index > 0;]]>
			</body>
			<param access-modifier="private" name="tag" display-name="" uuid="e021210f-17c8-43be-b356-18ff0efae19f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="GetItemFree" display-name="GetItemFree" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[i:int4 = 1;
while (i <= Line.Length)
{
	if (!Line[i].Used)
		return i;
	i += 1;
}
return 0;]]>
			</body>
		</do>
		<do access-modifier="private" name="GetUsedColors" display-name="GetUsedColors" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var colors = [];
for (var i = 0; i < Line.Length; i++)
{
	if (Line[i].Used)	
		colors.push(Line[i].Color);
}

return JSON.stringify(colors);]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="Lines" display-name="Lines" uuid="fe849dd8-10d1-44a1-8817-feb18f4b8401" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<do access-modifier="private" name="SetColor" display-name="SetColor" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[Line[index].Color = color;

i:int4 = 0;
while (i < Line.Decor.Length)
{
	if (Line[index].Decor[i].Active && private.LineDecorators.Style[i].LineColor == unit.Const.slUNDEFINED)
		Line[index].Decor[i].Color = color;

	i += 1;
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="46f0da09-338a-4b58-90ef-b8e2a3e99c0f" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="color" display-name="" uuid="07173136-fe9c-42b6-97ec-812e8b69be28" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
		<do access-modifier="private" name="SetCanonicalType" display-name="SetCanonicalType" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("ItemCDT[" + String.ToString(index) + "]=" + String.ToString(canonicalType));

if (canonicalType == unit.Const.cdt.STRING)
{
	Line[index].LineWidth = 0;
	Line[index].PointVisible =  true;
	Line[index].LineBrushStyle = unit.Const.slSOLID_LINE;
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="9c750735-fd81-452d-958e-48a50a274422" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			<param access-modifier="private" name="canonicalType" display-name="" uuid="1bdb1217-7616-47b9-b8dd-85cd56f74c1d" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5"/>
		</do>
		<do access-modifier="private" name="BeginReadRT" display-name="BeginReadRT" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<param access-modifier="private" name="index" display-name="" uuid="950754fa-4368-49c2-9d33-e679bd928a19" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			<body kind="om">
				<![CDATA[
// останавливаем и удаляем данные
Line[index].DataSource_1.CancelReadAsync();
Line[index].DataSource_1.Clear();

Line[index].DataSource_1.EnableRT(true);
Line[index].DataSource_1.ApItemValueQuery.Mode = unit.Const.vqmOPERATIVE;
Line[index].DataSource_1.ApItemValueQuery.OperativeInterval = ViewInterval * 60;  
Line[index].DataSource_1.ApItemValueQuery.Reload();	
Line[index].DataSource_1.BeginReadAsync();
]]>
			</body>
		</do>
		<do access-modifier="private" name="DecorApply" display-name="DecorApply" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("DecorApply["+String.ToString(index)+"]");
i:int4 = 0;
j:int4 = 0;
while (i < private.LineDecorators.Style.Length)
{
	if (private.LineDecorators.Style[i].Title != "" )
	{
		Line[index].Decor[j].Title = private.LineDecorators.Style[i].Title;
		// Условие декорирования 
		Line[index].Decor[j].MinValue = private.LineDecorators.Style[i].ConditionMin;
		Line[index].Decor[j].MaxValue = private.LineDecorators.Style[i].ConditionMax;
		Line[index].Decor[j].ColumnNumber = private.LineDecorators.Style[i].ConditionColumn;
		Line[index].Decor[j].Active = private.LineDecorators.Style[i].Active;
		Line[index].Decor[j].zOrder = j;
		// цвет
		if (private.LineDecorators.Style[i].LineColor != unit.Const.slUNDEFINED)
			Line[index].Decor[j].Color = private.LineDecorators.Style[i].LineColor;
		else
			Line[index].Decor[j].Color = Line[index].Color;
		// стиль
		lineStyle: uint4 = unit.Const.slSOLID_LINE;
		if (private.LineDecorators.Style[i].LineStyle != unit.Const.slUNDEFINED)
			lineStyle = private.LineDecorators.Style[i].LineStyle;
		Line[index].Decor[j].LineBrushStyle = (lineStyle !=unit.Const.slWITHOUT_LINE) ? lineStyle : unit.Const.slSOLID_LINE;
		// толщина
		lineWidth :float = 1;	
		if (private.LineDecorators.Style[i].LineWidth != unit.Const.slUNDEFINED)
			lineWidth = private.LineDecorators.Style[i].LineWidth;
		Line[index].Decor[j].LineWidth = (lineStyle !=unit.Const.slWITHOUT_LINE) ? lineWidth : 0;
		Line[index].Decor[j].PointSize = Line[index].PointSize;
		j += 1;
	}
	i += 1;
}
while (j < Line.Decor.Length)
{
	Line[index].Decor[j].Active = false;
	j += 1;
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="7a54b456-95fc-45bf-baf1-435116618f69" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
	</object>
	<object access-modifier="private" name="Line" display-name="Line" uuid="b1041b7b-c401-4e85-a8c2-434e6feae6fa" base-type="Line" base-type-id="3337f550-4fea-4eff-8ef4-2e7b87f33711" ver="5" description="" cardinal="11">
		<designed target="Color" value="4278190335" ver="5"/>
		<designed target="Title" value="" ver="5"/>
		<designed target="Unit" value="" ver="5"/>
		<designed target="LineWidth" value="1" ver="5"/>
		<designed target="PointSize" value="1" ver="5"/>
		<designed target="LineBrushStyle" value="1" ver="5"/>
		<designed target="BrushOpacity" value="1" ver="5"/>
		<designed target="PointSymbolCode" value="0" ver="5"/>
		<designed target="PointVisible" value="false" ver="5"/>
		<designed target="PointSymbolFont" value="" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="zOrder" value="100" ver="5"/>
		<designed target="drawingType" value="0" ver="5"/>
		<designed target="ColumnNumberTime" value="2" ver="5"/>
		<designed target="ColumnNumberValue" value="0" ver="5"/>
		<designed target="StringTagsYValue" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
		<designed target="SortByServerTimeColumn" value="false" ver="5"/>
		<designed target="ShowActiveControllineLabels" value="false" ver="5"/>
		<designed target="Tag" value="" ver="5"/>
		<object access-modifier="private" name="DataSource_1" display-name="DataSource_1" uuid="d3395770-eab6-4a46-b893-f31d6fe4dc7f" base-type="DataSource" base-type-id="22b9b931-37d6-455b-b200-df50e9527bc8" ver="5" description="" cardinal="1">
			<designed target="LengthReserved" value="4194304" ver="5"/>
			<designed target="LoadColumns" value="true" ver="5"/>
			<designed target="Sort" value="true" ver="5"/>
			<designed target="SortColumnNumber" value="2" ver="5"/>
			<object access-modifier="private" name="ApItemValueQuery" display-name="ApItemValueQuery" uuid="965dec44-0e18-4158-8afd-9dd1405a3901" base-type="ApItemValueQuery" base-type-id="66ce99c8-b124-42cf-b541-4299b9f17462" ver="5" description="" cardinal="1">
				<designed target="Mode" value="2" ver="5"/>
				<designed target="HistoricalRangeStart" value="0" ver="5"/>
				<designed target="HistoricalRangeEnd" value="0" ver="5"/>
				<designed target="Active" value="true" ver="5"/>
				<designed target="OperativeInterval" value="300" ver="5"/>
				<designed target="OperativeBufferSize" value="0" ver="5"/>
				<designed target="PreloadHistoricalData" value="true" ver="5"/>
				<init target="Item" ver="5" ref="ApItem"/>
			</object>
		</object>
		<object access-modifier="private" name="ApItem" display-name="ApItem" uuid="1df4ef2f-d6bd-4dd9-8520-a823f6611881" base-type="ApItem" base-type-id="9bc9fdb8-ccbc-45af-b711-95945c17a630" ver="5" description="" cardinal="1">
			<init target="Path" ver="5" value="**"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnAdviseStateChanged">
				<body kind="om">
					<![CDATA[index: int8 = parent.Index;
if (Used)
{
	//Debug.Log(Params.Lines[index].Tag + " AdviseState=" + String.ToString(adviseState)+", CanonicalType="+String.ToString(CanonicalType));
	if (adviseState == unit.Const.stADVISED_OK)
	{
		Lines.SetCanonicalType(index, CanonicalType);
		Lines.BeginReadRT(index);
	}
}]]>
				</body>
			</do-on>
			<init target="Source" ver="5" ref="initApSource"/>
		</object>
		<init target="DataSource" ver="5" ref="DataSource_1"/>
		<init target="AxisX" ver="5" ref="Chart.Axis_X"/>
		<init target="AxisY" ver="5" ref="Chart.Axis_Y"/>
		<init target="Visible" ver="5" value="false"/>
		<object access-modifier="private" name="Decor" display-name="Decor" uuid="c5b5991c-7c6a-4249-9282-372f4073759e" base-type="Decorator" base-type-id="19ba127f-e7de-450c-a26c-2c82fabcb98c" ver="5" cardinal="10">
			<designed target="Color" value="0xff0000ff" ver="5"/>
			<designed target="Title" value="" ver="5"/>
			<designed target="LineWidth" value="1" ver="5"/>
			<designed target="PointSize" value="1" ver="5"/>
			<designed target="LineBrushStyle" value="2" ver="5"/>
			<designed target="Active" value="false" ver="5"/>
			<designed target="MinValue" value="216" ver="5"/>
			<designed target="MaxValue" value="216" ver="5"/>
			<designed target="ColumnNumber" value="0" ver="5"/>
			<designed target="zOrder" value="0" ver="5"/>
		</object>
		<designed target="Ratio" value="1" ver="5"/>
		<designed target="Offset" value="0" ver="5"/>
		<object access-modifier="private" name="Used" display-name="Used" uuid="c6472d91-07ee-49f6-b3bc-f1a5488384cf" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<init target="Used" ver="5" value="false"/>
	</object>
	<object access-modifier="private" name="Timer_of_ReadData" display-name="Timer_of_ReadData" uuid="77ebda0d-4cfb-4a8f-bcbd-b0348222a085" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="5">
		<designed target="Period" value="1000" ver="5"/>
		<designed target="Active" value="true" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
			<body kind="om">
				<![CDATA[
now: uint8 = DateTime.UtcNow();
private.UpdateOperativeTimeInterval(now, false);
]]>
			</body>
		</do-on>
		<init target="Period" ver="5" ref="DataUpdatePeriod"/>
	</object>
	<object access-modifier="private" name="AutoRange" display-name="Автоматическое определение диапазона значений для всех сигналов" uuid="b449232d-3d6d-4499-8c49-2ac81faea0fb" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (oldValue == value)
	return;
oldValue = value;
	
//Debug.Log("AutoRange.ValueChanged = " + String.ToString(value));
Update(value);]]>
			</body>
		</do-on>
		<object access-modifier="private" name="oldValue" display-name="oldValue" uuid="a8aec0bf-87f6-48bd-b579-e936c010ec78" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
		<init target="oldValue" ver="5" value="true"/>
		<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// запоминаем режим автоподстройки
AutoRange = autoRange;
//Debug.Log("UpdateYRanges.AutoRange="+String.ToString(autoRange));

// устанавливаем режим автоподстройки у оси
Chart.Axis_Y.Scale = autoRange ? unit.Const.scAUTO : unit.Const.scFIXED;
		
// если автоподстройка отключена, то задаем интервал по оси	
if (!autoRange)
	Chart.Axis_Y.SetInterval(LowRange, HighRange);
]]>
			</body>
			<param access-modifier="private" name="autoRange" display-name="" uuid="cd192444-0ca6-403d-8308-4754566e5742" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
	</object>
	<init target="AutoRange" ver="5" value="true"/>
	<object access-modifier="private" name="LowRange" display-name="Нижний предел значений" uuid="df7c78fc-725c-4a8e-8a5e-9e5311c5170d" base-type="notifying_double" base-type-id="3f905fb7-7738-4619-b402-5a91f136d4bd" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (oldValue != value)
{
	oldValue = value;
	if (private.Inited)
	{
		AutoRange.Update(AutoRange);
	}
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="oldValue" display-name="oldValue" uuid="6aabffe5-e5f5-402a-adb0-cf1c513ae4ed" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
	</object>
	<init target="LowRange" ver="5" value="0"/>
	<object access-modifier="private" name="HighRange" display-name="Верхний предел значений" uuid="270d23e0-7857-484f-a44d-dac2d2f00208" base-type="notifying_double" base-type-id="3f905fb7-7738-4619-b402-5a91f136d4bd" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (oldValue != value)
{
	oldValue = value;
	if (private.Inited)
	{
		AutoRange.Update(AutoRange);
	}
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="oldValue" display-name="oldValue" uuid="3947bf3c-c269-475a-ace6-3872b6dd040a" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
	</object>
	<init target="HighRange" ver="5" value="100"/>
	<do access-modifier="private" name="AddItem" display-name="AddItem" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
		<param access-modifier="private" name="path" display-name="" uuid="a41ebdd7-0a11-4c43-a57b-ed5be6757020" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="om">
			<![CDATA[//Debug.Log("AddItem(" + path + ", " + eUnit + ", " + description + ")");
private.Initializer();  // инициализатор выполняется только один раз 

// Проверяем не повторяется ли сигнал
if (params.TagIsUse(path))
	return 0;

i: int4 = params.GetItemFree();
if (i > 0)
{
	// Получаем цвет графика, отличающийся от остальных
	usedColors: string = params.GetUsedColors();
	color: uint4 = private.Palette.GetNext(usedColors);  

	Line[i].Used = true;
	Line[i].ApItem.Path = path;	
	Line[i].LineWidth = 1;
	Line[i].LineBrushStyle = unit.Const.slSOLID_LINE;
	markerIndex: int4 = unit.Const.mrk.GetNext();
	Line[i].PointSymbolCode = unit.Const.mrk.MARKER_CODE[markerIndex];
	Line[i].PointVisible = ShowDataPoints;
	Line[i].PointSize = 15;

	Line[i].Visible = true;
	private.zOrderCount += 1;
	Line[i].DataSource_1.ApItemValueQuery.Active = true; 
	Lines.SetColor(i, color);
	private.LineDecorators.SetDefault();
	Lines.DecorApply(i);
}

return i;
]]>
		</body>
	</do>
	<object access-modifier="private" name="ShowDataPoints" display-name="Видимость точек на графиках" uuid="108b131d-3e97-4fb7-9af9-f42e1876de2e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[i: int4 = 1;
while (i < Line.Length)
{
	if (Line[i].Used)
		Line[i].PointVisible = value || (Line[i].ApItem.CanonicalType==unit.Const.cdt.STRING);
	i += 1;
}]]>
			</body>
		</do-on>
	</object>
	<init target="ShowDataPoints" ver="5" value="false"/>
	<object access-modifier="private" name="ViewInterval" display-name="Видимый интервал времени, мин" uuid="84594a62-9181-4e94-87cb-986eefc6ae5d" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[newValue: uint8 =  value * unit.Const.dtONE_MINUTE; // перевод из минут
if (originalValue == newValue)
	return;

// запоминаем значение, чтобы иметь возможность его восстановить
originalValue = newValue;

// обновляем интервал
Update(originalValue);]]>
			</body>
		</do-on>
		<object access-modifier="private" name="originalValue" display-name="originalValue" uuid="30a9e4b1-4e33-40ef-940a-8af92bc94c13" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		<object access-modifier="private" name="currentValue" display-name="currentValue" uuid="f162ce94-5cdc-4b0f-b19f-2a6fd10251e5" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		<do access-modifier="private" name="Restore" display-name="Restore" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[Update(originalValue);]]>
			</body>
		</do>
		<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// выходим, если текущее значение не изменилось
if (currentValue == value)
	return;

//Debug.Log("Update view time interval from " + String.ToString(currentValue) + " to "  +String.ToString(value));
// запоминаем новое текущее значение
currentValue = value;]]>
			</body>
			<param access-modifier="private" name="value" display-name="" uuid="79ee997c-0fa1-4a7a-8990-6cc140382120" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		</do>
		<object access-modifier="private" name="Begin" display-name="Начало видимого интервала времени" uuid="19ae763c-4c13-40ae-ac87-eadc98ad49b1" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="End" display-name="Конец видимого интервала времени" uuid="bfc1f6f0-1bdc-4307-8adb-e5fb34348712" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="5" description="" cardinal="1"/>
	</object>
	<init target="ViewInterval" ver="5" value="10"/>
	<param access-modifier="private" name="DataUpdatePeriod" display-name="Период обновления данных, мс" uuid="f81a83dd-929b-498f-833f-9f6aa36484c2" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	<init target="DataUpdatePeriod" ver="5" value="1000"/>
	<do access-modifier="private" name="RemoveItem" display-name="RemoveItem" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="tag" display-name="" uuid="08eed6e2-7c1a-47ed-bbee-28e943cccfe0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

index: int4  = params.GetIndexByPath(tag);
if (index > 0 && index <= unit.Const.MAX_LINES)
{
	private.RemoveItem(index);
}
else
{
	Debug.Log("Trends.RemoveItem: Указанный тэг не найден!");
}]]>
		</body>
	</do>
	<do access-modifier="private" name="Clear" display-name="Clear" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

private.RemoveItem(unit.Const.ALL);

]]>
		</body>
	</do>
	<do access-modifier="private" name="ConfigureGraphic" display-name="ConfigureGraphic" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="tag" display-name="" uuid="49226a22-7070-479a-82b3-8756f7e3283b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="sJsonConfiguration" display-name="" uuid="5dd1a6c2-074a-40cd-936e-908090460406" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="javascript">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 
//log("ConfigureGraphic:"+sJsonConfiguration);

var result = false;
var index = params.GetIndexByPath(tag);

if (index >= 0)		
{
	var Config = JSON.parse(sJsonConfiguration);

	if (Config.thickness != null)
	{
		Line[index].LineWidth = Config.thickness;
		Line[index].PointSize = Line[index].LineWidth <= 2 ? 15 : Line[index].LineWidth * 5 + 5;
	}
	if (Config.brushStyle != null)
	{
		if (Config.brushStyle>=0 && Config.brushStyle<=5)
			Line[index].LineBrushStyle = Config.brushStyle;
		else
			log("Trends.ConfigureGraphic: Недопустимое значение в параметре brushStyle.");
	}
	if (Config.color != null)
	{
		Line[index].Color = Config.color;
	}
	if (Config.pointSymbol != null)
	{
		if (Config.pointSymbol>=0 && Config.pointSymbol<=7)
		{
			Line[index].PointSymbolCode = unit.Const.mrk.MARKER_CODE[Config.pointSymbol];
		}
		else
			log("Trends.ConfigureGraphic: Недопустимое значение в параметре pointSymbol.");
	}
	if (Config.typeStringYValue != null)
	{
		Line[index].StringTagsYValue = Config.typeStringYValue;
	}
	if (Config.interpolation != null)
	{
		Line[index].drawingType = (Config.interpolation)?(0):(1);
	}
	if (Config.LineDecorators != null)
	{
		let error = private.LineDecorators.FromJSON(JSON.stringify(Config.LineDecorators));
		if (error != "")	
			log("Trends.ConfigureGraphic.LineDecorators: " + error);
		else
			Lines.DecorApply(index);
	}
	if (Config.visible != null)
	{
		Line[index].Visible = Config.visible;
	}
		
	result = true;
}
return result;
]]>
		</body>
	</do>
	<object access-modifier="private" name="ShowAxisX" display-name="Показывать ось времени" uuid="b1cc869c-0303-471c-8046-f92603f97421" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="ShowAxisY" display-name="Показывать ось значений" uuid="b731074a-31b6-41e3-9278-6f6577fbf091" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<init target="ShowAxisX" ver="5" value="false"/>
	<init target="ShowAxisY" ver="5" value="false"/>
	<object access-modifier="private" name="DragNDrop" display-name="DragNDrop" uuid="836172df-bcc1-4afd-8600-43d784f31b66" base-type="DragNDrop" base-type-id="c4ddb32f-3653-44c8-be57-3a595e10c2fb" ver="5">
		<designed target="DragEnabled" value="false" ver="5"/>
		<designed target="DropEnabled" value="true" ver="5"/>
		<designed target="Image" value="" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnDrop">
			<body kind="javascript">
				<![CDATA[var json = data.GetText();
//log("DragNDrop: " + json);
var itemsData = JSON.parse(json).data;

var i = 0;
while (i < itemsData.length)
{
	var tag = itemsData[i].tag;
	if (tag != undefined)
		AddItem(tag);

	i += 1;
}]]>
			</body>
		</do-on>
	</object>
</type>

