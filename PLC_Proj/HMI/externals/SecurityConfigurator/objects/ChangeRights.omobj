<type access-modifier="private" name="ChangeRights" display-name="ChangeRights" uuid="24f489ad-7aec-41a5-b0f7-8ed917e6f052" base-type="Form" base-type-id="ffaf5544-6200-45f4-87ec-9dd24558a9d5" ver="5">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="750" ver="5"/>
	<designed target="Height" value="400" ver="5"/>
	<designed target="PenColor" value="4278190080" ver="5"/>
	<designed target="PenStyle" value="0" ver="5"/>
	<designed target="PenWidth" value="1" ver="5"/>
	<designed target="BrushColor" value="0xfff0f0f0" ver="5"/>
	<designed target="BrushStyle" value="1" ver="5"/>
	<designed target="WindowX" value="0" ver="5"/>
	<designed target="WindowY" value="0" ver="5"/>
	<designed target="WindowWidth" value="750" ver="5"/>
	<designed target="WindowHeight" value="400" ver="5"/>
	<designed target="WindowCaption" value="Выбор прав" ver="5"/>
	<designed target="ShowWindowCaption" value="true" ver="5"/>
	<designed target="ShowWindowMinimize" value="false" ver="5"/>
	<designed target="ShowWindowMaximize" value="false" ver="5"/>
	<designed target="ShowWindowClose" value="true" ver="5"/>
	<designed target="AlwaysOnTop" value="false" ver="5"/>
	<designed target="WindowSizeMode" value="0" ver="5"/>
	<designed target="WindowBorderStyle" value="1" ver="5"/>
	<designed target="WindowState" value="0" ver="5"/>
	<designed target="WindowScalingMode" value="0" ver="5"/>
	<designed target="MonitorNumber" value="0" ver="5"/>
	<designed target="WindowPosition" value="3" ver="5"/>
	<designed target="WindowCloseMode" value="1" ver="5"/>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="6247417e-6370-4683-beca-c12168efea9f" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<object access-modifier="private" name="private" display-name="private" uuid="ece2b66b-f802-4197-9bb2-790f80fd0d12" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="pTheme" display-name="pTheme" uuid="7e347fa0-bd6b-4e09-b11a-5435d71cbce6" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="5" description=""/>
		<object access-modifier="private" name="TokensDefinition" display-name="TokensDefinition" uuid="c6186df4-264e-4ba2-94ba-edcd198d09d9" base-type="TokensDefinition" base-type-id="2d057de8-3722-4426-b142-42fa7ada0520" ver="5"/>
		<do access-modifier="private" name="IsDeleteMode" display-name="IsDeleteMode" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="om">
				<![CDATA[return CurrentRights != "" && DeleteMode;]]>
			</body>
		</do>
		<do access-modifier="private" name="IsRoleEditMode" display-name="IsRoleEditMode" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="om">
				<![CDATA[return CurrentApp != "";]]>
			</body>
		</do>
		<do access-modifier="private" name="GetCurrentRights" display-name="GetCurrentRights" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Функция получения набора токенов из списка прав пользователя/группы
var rightsContent = JSON.parse(CurrentRights);
var tokenData = {};
let currentAppName;

//создаем поля с имнами приложений
for (let right of rightsContent)
{
	currentAppName = right.appName;
	if (!tokenData.hasOwnProperty(currentAppName))
		tokenData[currentAppName] = [];
}

//добавялем права к приложениям
for (let right of rightsContent)
{
	currentAppName = right.appName;
	if (tokenData.hasOwnProperty(currentAppName))
	{
		tokenData[currentAppName].push(
			{
				"type": right.tokenType,
				"name": right.tokenName,
				"description": right.tokenDescription
			}
		);
	}
}

//вернуть преобразованный список
return JSON.stringify(tokenData)
]]>
			</body>
		</do>
		<do access-modifier="private" name="PreparingRightsSelected" display-name="PreparingRightsSelected" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[//формирование массива выбранных прав
const getItemDataFromTree = ViewTree.GetItemData;
const getDefaultStringValue = private.TokensDefinition.GetDefaultValue;

let rigthsData = [];
let currentRight = {};

//получить массив отмеченных узлов
try
{
	var nodesList = JSON.parse(ViewTree.GetCheckedNodes());
}
catch (error)
{
	ErrorHandling(`Ошибка при получении отмеченных узлов дерева\n${error.message}`);
	return;
}

for (let itemId of nodesList)
{
	currentRight = {};
	currentRight.AppName = getItemDataFromTree(itemId, 1);
	currentRight.TokenName = getItemDataFromTree(itemId, 3);
	//сформировать значения права
	if (!IsDeleteMode())
	{
		let type = getItemDataFromTree(itemId, 2);
		if (type == "bool")
		{
			currentRight.Type = "1";
			currentRight.TokenValueAllow = "TRUE";
			currentRight.TokenValueDeny = "FALSE";
		}
		else if (type == "string")
		{
			currentRight.Type = "0";
			currentRight.TokenValueAllow = getDefaultStringValue(currentRight.AppName, type, currentRight.TokenName);
			currentRight.TokenValueDeny = "";
		}
	}
	rigthsData.push(currentRight);
}

pResult.Value = JSON.stringify(rigthsData);]]>
			</body>
		</do>
		<object access-modifier="private" name="LoadAppQueue" display-name="LoadAppQueue" uuid="95edd16d-79fd-4501-a4a4-cc55c85a3b32" base-type="ActionsQueue" base-type-id="7cd7ab97-3392-4032-badc-0d7bdd897063" ver="5" description="" cardinal="1">
			<object access-modifier="private" name="DoLoad" display-name="DoLoad" uuid="9a449918-1993-4dc7-bebb-b60ca594ff7a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="javascript">
						<![CDATA[if (Manager.AppList != "")
{
	let appList = JSON.parse(Manager.AppList).data;
	let appIndex = GetCurrentIndex();
	Application.Load(appList[appIndex].applicationName);
}]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="OnFinished" display-name="OnFinished" uuid="3fa75597-edbf-4988-8b0a-1c9f2509f386" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="javascript">
						<![CDATA[//если список текущих прав пуст - Выводим список всех прав

if (CurrentRights == "")
{
	ViewTree.LoadData(SummaryAppRightsData);
	return;
}

let currentRightsDict = JSON.parse(here.private.GetCurrentRights());
let availableRightsDict = JSON.parse(SummaryAppRightsData);

//выполним фильтрацию всех доступных прав
for (let [app, rights] of Object.entries(availableRightsDict))
{
	let currentRightsList = currentRightsDict[app];
	if (currentRightsList != undefined)
	{
		//оставим только не назначенные права
		let differentRightList = rights.filter(aRight => !currentRightsList.some(cRight => aRight.type == cRight.type && aRight.name == cRight.name));
		availableRightsDict[app] = differentRightList;
	}
}

//вывод в дерево
ViewTree.LoadData(JSON.stringify(availableRightsDict));]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="OnInterupted" display-name="OnInterupted" uuid="f8bd3bd8-4355-4420-bc25-51a3b625a160" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[//если была команда на закрытие
if (SendedCloseRequest)
	Close();]]>
					</body>
				</do-on>
			</object>
			<init target="pFinished" ver="5" ref="OnFinished"/>
			<init target="pStoped" ver="5" ref="OnInterupted"/>
			<init target="pExecuteAction" ver="5" ref="DoLoad"/>
		</object>
		<object access-modifier="private" name="Manager" display-name="Manager" uuid="80931db0-12c6-4758-847f-f1b2f31c9e88" base-type="SecurityManager" base-type-id="179958e0-f45a-40f3-9668-98e4ea2987da" ver="5">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="RequestAppListComplete">
				<body kind="javascript">
					<![CDATA[AppList = JSONAppList;
let appCount = JSON.parse(JSONAppList).data.length;
LoadAppQueue.Init(appCount);]]>
				</body>
			</do-on>
			<init target="SecurityContext" ver="5">
				<object access-modifier="private" uuid="5cf3a30c-ad72-4a61-8bf4-eacad5eb40be" base-type="SecurityContext" base-type-id="d9cb0fff-b70a-4e2d-833d-3f73cf74e0dd" ver="5"/>
			</init>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="RequestAppListFailed">
				<body kind="om">
					<![CDATA[ErrorHandling(GetErrorDescriptionByCode(FailReason));]]>
				</body>
			</do-on>
			<object access-modifier="private" name="AppList" display-name="AppList" uuid="c1c97c56-024a-4e5c-a299-cb351e3bac27" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</object>
		<object access-modifier="private" name="Application" display-name="Application" uuid="e803fafb-2416-4584-a805-71a6deb03b25" base-type="SecurityManagerApplication" base-type-id="cfc3985c-54fc-4fe4-b001-cade048d6ee0" ver="5">
			<designed target="ApplicationName" value="" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="LoadComplete">
				<body kind="javascript">
					<![CDATA[var appId = ApplicationID;
var summaryAppRightsData;

//парсинг структуры прав прочитанных приложений
try
{
	summaryAppRightsData = JSON.parse(SummaryAppRightsData);
}
catch (error)
{
	summaryAppRightsData = {};
}

//парсинг списка прав текущего приложения
try
{
	var currentAppRightsList = JSON.parse(Application.GetTokensList()).data;
}
catch (error)
{
	ErrorHandling(`Не удалость получить список прав приоложения ${ApplicationName}`);
	return;
}

//формируем объект приложения с правами в виде структуры
if (currentAppRightsList.length > 0 && summaryAppRightsData[appId] == undefined)
{
	let currentAppTokens = [];
	for (let token of currentAppRightsList)
	{
		currentAppTokens.push({
			"type": token.tokenType,
			"name": token.tokenName,
			"description": token.tokenDescription
		});
	}
	summaryAppRightsData[appId] = currentAppTokens;
}

//сохраняем права приложения в структуру
SummaryAppRightsData = JSON.stringify(summaryAppRightsData);

//возвращаемся в очередь
LoadAppQueue.IsCompleted();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="LoadFailed">
				<body kind="om">
					<![CDATA[ErrorHandling(GetErrorDescriptionByCode(FailReasonCode));]]>
				</body>
			</do-on>
			<init target="SecurityManager" ver="5" ref="Manager"/>
		</object>
		<object access-modifier="private" name="SendedCloseRequest" display-name="SendedCloseRequest" uuid="4f182ddb-5c29-4602-8613-d9a7c8bff73b" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="SummaryAppRightsData" display-name="SummaryAppRightsData" uuid="d288dc9d-5750-44c3-8fce-a86bba77593b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<init target="pTheme" ver="5" ref="Init_Theme"/>
		<do access-modifier="private" name="ErrorHandling" display-name="ErrorHandling" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//останавливаем очередь
LoadAppQueue.Stop();

//уведомляем пользователя об ошибке
ShowError.message = message;
ShowError.Invoke();]]>
			</body>
			<param access-modifier="private" name="message" display-name="" uuid="f5f70bb3-04e7-4094-b735-65b3fea446b9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<object access-modifier="private" name="ShowError" display-name="ShowError" uuid="9dcebd0d-1c49-48d6-823f-e63011336506" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="62297221-c738-488f-9d41-d683d41e412f" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="5">
					<init target="Message" ver="5" ref="message"/>
					<init target="Buttons" ver="5" value="0"/>
					<init target="Icon" ver="5" value="3"/>
					<designed target="WindowCaption" value="Ошибка" ver="5"/>
					<init target="pTheme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
			<object access-modifier="private" name="title" display-name="title" uuid="26a77fb2-8f1f-4e61-9fd3-e9eabd8ddf91" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="message" display-name="message" uuid="02079b22-948c-4da9-8ebf-1573910c2953" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</object>
		<do access-modifier="private" name="SendingCLoseRequest" display-name="SendingCLoseRequest" ver="5" form-action="close" type=""/>
	</object>
	<object access-modifier="private" name="ViewTree" display-name="ViewTree" uuid="f9a7fa19-fa61-4691-83ac-3c0011b6016f" base-type="Tree" base-type-id="bebad81f-83c4-4dc1-8ac4-e7fe7b6ee966" ver="5">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="ZValue" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="Opacity" value="1" ver="5"/>
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="Tooltip" value="" ver="5"/>
		<designed target="Width" value="750" ver="5"/>
		<designed target="Height" value="355" ver="5"/>
		<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0" ver="5"/>
		<designed target="FontColor" value="0xff000000" ver="5"/>
		<designed target="BackgroundColor" value="0xffffffff" ver="5"/>
		<designed target="FrameVisible" value="true" ver="5"/>
		<designed target="ColumnCount" value="5" ver="5"/>
		<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//инициализация столбцов дерева
if (bInit)
	return;

SetColumnName("Право", 0);
SetColumnWidth(0,250);

SetColumnName("AppName", 1);
SetColumnHidden(1, true); 

SetColumnName("Type", 2);
SetColumnHidden(2, true); 

SetColumnName("Name", 3);
SetColumnHidden(3, true); 

SetColumnName("Описание", 4);
SetColumnHidden(4, false);

bInit = true;]]>
			</body>
		</do>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ItemClicked">
			<body kind="om">
				<![CDATA[state: uint1 = GetItemCheckState(itemId,0);
if (state == States.CHECKED)
	SetItemCheckState(itemId, States.UNCHECKED, 0);
else if (state == States.UNCHECKED || state == States.PARTIALLY)
	SetItemCheckState(itemId, States.CHECKED, 0);]]>
			</body>
		</do-on>
		<designed target="HeaderVisible" value="true" ver="5"/>
		<designed target="CurrentItem" value="" ver="5"/>
		<object access-modifier="private" name="States" display-name="States" uuid="6d36957d-720a-4174-b762-8285ae196a42" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5" description="" cardinal="1">
			<object access-modifier="private" name="UNCHECKED" display-name="UNCHECKED" uuid="769d2853-d641-422b-bcb3-8835369452fa" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="PARTIALLY" display-name="PARTIALLY" uuid="4511d4e9-024f-4f0b-a939-abcad52edea9" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="CHECKED" display-name="CHECKED" uuid="a2f4f1dc-1b53-40f7-816f-d9f63e915e0c" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5" description="" cardinal="1"/>
			<init target="UNCHECKED" ver="5" value="0"/>
			<init target="PARTIALLY" ver="5" value="1"/>
			<init target="CHECKED" ver="5" value="2"/>
		</object>
		<do access-modifier="private" name="LoadData" display-name="LoadData" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[//заполнение дерева данными прав приложений с предварительной сортировкой по имени приложения и имени права
Init();
const columns = {"TITLE": 0, "APPNAME": 1, "TYPE": 2, "NAME": 3, "DESCRIPTION": 4};

//получение пути иконки по типу права
const getIconPathByToken = private.TokensDefinition.GetIconPath;

try 
{
	var appsTokenList = JSON.parse(tokenListJSON);
}
catch (error)
{
	private.ErrorHandling(`Не удалось загрузить данные в дерево\n ${error.message}`);
	return;
}

let appNodeId, rightNodeId;

//получить массив имен приложений
let appList = Object.keys(appsTokenList).sort((a, b) => a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1);

for (let appName of appList)
{
	let rightsList = appsTokenList[appName].sort((a, b) => a.name.toString().toLowerCase() > b.name.toString().toLowerCase() ? 1 : -1);
	if (rightsList != undefined && rightsList.length > 0)
	{
		//формирование узла приложения
		appNodeId = AddItem("", appName);
		SetItemData(appNodeId, "", columns.APPNAME);
		SetItemData(appNodeId, "Application", columns.TYPE);
		SetItemAutoTristate(appNodeId, true, columns.TITLE);
		SetItemCheckState(appNodeId, States.UNCHECKED, columns.TITLE);
		
		for (let rigth of rightsList)
		{
			//формирование узла права
			rightNodeId = AddItem(appNodeId, rigth.name);
			SetItemData(rightNodeId, appName, columns.APPNAME);
			SetItemData(rightNodeId, rigth.type, columns.TYPE);
			SetItemData(rightNodeId, rigth.name, columns.NAME);
			SetItemText(rightNodeId, rigth.description, columns.DESCRIPTION);			
			SetItemIconPath(rightNodeId, getIconPathByToken(appName, rigth.type, rigth.name), columns.TITLE);
			SetItemCheckState(rightNodeId, States.UNCHECKED, columns.TITLE);
		}
	}	
}

//развернуть все узлы
//ExpandAll();]]>
			</body>
			<param access-modifier="private" name="tokenListJSON" display-name="" uuid="77096c85-ef78-40a6-a690-6a066d408a63" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<designed target="Flip" value="0" ver="5"/>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="ItemCheckStateChanged">
			<body kind="javascript">
				<![CDATA[//подсчет отмеченных узлов
try
{
	var checkedNodesCount = JSON.parse(GetCheckedNodes()).length;
}
catch (error)
{
	private.ErrorHandling(`Ошибка при получении выделенных узлов\n ${error.message}`);
	return;
}

//управление кнопкой
ButtonsPanel.btnApply.Enabled = (checkedNodesCount > 0);]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="BackgroundColor" ver="5">
			<body>
				<![CDATA[private.pTheme.EditorBrushColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="FontColor" ver="5">
			<body>
				<![CDATA[private.pTheme.EditorFontColor]]>
			</body>
		</do-trace>
		<object access-modifier="private" name="LayoutWeight" display-name="LayoutWeight" uuid="6f24adfb-0a2f-4440-8f21-436b8d2bb104" base-type="LayoutWeight" base-type-id="8f3d975c-9645-4288-9406-a8dda0527008" ver="5" description="" cardinal="1">
			<designed target="Weight" value="1000" ver="5"/>
		</object>
		<object access-modifier="private" name="bInit" display-name="bInit" uuid="5a8c43c6-456a-4052-890e-4ec300879911" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="GetCheckedNodes" display-name="GetCheckedNodes" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//функция рекурсивного обхода дерева на поиск выделенных узлов, игнорируем узлы приложения
var checkedNodes = [];
nextNode("");
return JSON.stringify(checkedNodes);

function nextNode(itemId)
{
	let childCount = ChildCount(itemId);
	if (childCount > 0)
		for (let i = 0; i < childCount; i++)
			nextNode(GetItemId(itemId, i));
	else
		if (GetItemCheckState(itemId, 0) == States.CHECKED)
			checkedNodes.push(itemId);	
}]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="CurrentApp" display-name="Текущее приложение" uuid="f981bd6e-92a8-4129-b0c8-e7b6ea17f67e" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5"/>
	<object access-modifier="private" name="CurrentRights" display-name="Назначенные права" uuid="10bdf6e2-b67c-4488-a17e-7b0045d31b66" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5"/>
	<object access-modifier="private" name="DeleteMode" display-name="Режим удаления прав" uuid="572bc38c-2a4d-4850-921f-5e3efb06eee1" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description=""/>
	<object access-modifier="private" name="pApplyChanges" display-name="Применить изменения" uuid="1a48ca86-3bfc-4474-92af-7a30562b3428" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pResult" display-name="Набор выбранных прав" uuid="b959f9bb-dd47-4d60-9b12-9a86dd93a3eb" base-type="EditDialogResult" base-type-id="ce8af278-7358-4aa7-897d-e37d5d49460e" base-const="true" base-ref="true" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="WindowSizeChanged">
		<body kind="om">
			<![CDATA[Width = WindowWidth;
Height = WindowHeight;
ButtonsPanel.UpdateLayout();]]>
		</body>
	</do-on>
	<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="CloseRequested">
		<body kind="om">
			<![CDATA[private.SendedCloseRequest = true;

//условия при которых программа закрывается
if (private.IsDeleteMode() || private.LoadAppQueue.IsEnd() || private.LoadAppQueue.IsStoped())
	Close();
else if (!private.LoadAppQueue.IsEnd()) 
	private.LoadAppQueue.Stop();]]>
		</body>
	</do-on>
	<designed target="WindowIconPath" value="Security_Icons/RightEdit16.png" ver="5"/>
	<designed target="Flip" value="0" ver="5"/>
	<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="KeyPress">
		<body kind="om">
			<![CDATA[if (event.KeyCode == 82) // Enter
	ButtonsPanel.btnApply.Click();
else if (event.KeyCode == 75) // Escape
	private.SendingCLoseRequest();]]>
		</body>
	</do-on>
	<do-trace access-modifier="private" target="BrushColor" ver="5">
		<body>
			<![CDATA[private.pTheme.BackgroundColor]]>
		</body>
	</do-trace>
	<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="WindowActivationChanged">
		<body kind="om">
			<![CDATA[Focus = true;]]>
		</body>
	</do-on>
	<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="AboutToOpen">
		<body kind="om">
			<![CDATA[ViewTree.Init();

if (private.IsDeleteMode())
{
	//вывод текущих прав
	ViewTree.LoadData(private.GetCurrentRights());
	ButtonsPanel.btnApply.Text = "Удалить";
} 
else
{
	if (private.IsRoleEditMode())
		//выполнить загрузку одного приложения
		private.Application.Load(CurrentApp);
	else
		//выполнить загрузку всех приложений
		private.Manager.RequestAppList();
		
	ButtonsPanel.btnApply.Text = "Добавить";
}]]>
		</body>
	</do-on>
	<param access-modifier="private" name="Init_Theme" display-name="Тема оформления" uuid="a4846b48-6a21-44bf-a133-1daf443a042a" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="ButtonsPanel" display-name="ButtonsPanel" uuid="b876bd3e-0399-4d69-912c-7888c5e2867e" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5" description="" cardinal="1">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="355" ver="5"/>
		<designed target="ZValue" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Flip" value="0" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="Opacity" value="1" ver="5"/>
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="Tooltip" value="" ver="5"/>
		<designed target="Width" value="750" ver="5"/>
		<designed target="Height" value="45" ver="5"/>
		<designed target="RoundingRadius" value="0" ver="5"/>
		<designed target="PenColor" value="4278190080" ver="5"/>
		<designed target="PenStyle" value="0" ver="5"/>
		<designed target="PenWidth" value="1" ver="5"/>
		<designed target="BrushColor" value="4278190080" ver="5"/>
		<designed target="BrushStyle" value="0" ver="5"/>
		<object access-modifier="private" name="btnApply" display-name="btnApply" uuid="f39a002d-9331-4384-b27b-2169b0c766d2" base-type="Button" base-type-id="61e46e4a-827f-4dd2-ac8a-b68bcaddf442" ver="5">
			<designed target="X" value="590" ver="5"/>
			<designed target="Y" value="10" ver="5"/>
			<designed target="Rotation" value="0" ver="5"/>
			<designed target="Scale" value="1" ver="5"/>
			<designed target="Visible" value="true" ver="5"/>
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="Tooltip" value="" ver="5"/>
			<designed target="Width" value="70" ver="5"/>
			<designed target="Height" value="25" ver="5"/>
			<designed target="Text" value="Применить" ver="5"/>
			<designed target="TextAlignment" value="132" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="FontColor" value="0xff000000" ver="5"/>
			<designed target="OnClickFontColor" value="0xff000000" ver="5"/>
			<designed target="OnHoverFontColor" value="0xff000000" ver="5"/>
			<designed target="BrushColor" value="0xfff0f0f0" ver="5"/>
			<designed target="BrushStyle" value="1" ver="5"/>
			<designed target="OnClickBrushColor" value="0xffa0a0a0" ver="5"/>
			<designed target="OnClickBrushStyle" value="1" ver="5"/>
			<designed target="OnHoverBrushColor" value="0xffffffff" ver="5"/>
			<designed target="OnHoverBrushStyle" value="1" ver="5"/>
			<designed target="PenColor" value="0xff000000" ver="5"/>
			<designed target="PenStyle" value="1" ver="5"/>
			<designed target="PenWidth" value="1" ver="5"/>
			<designed target="OnClickPenColor" value="4278190080" ver="5"/>
			<designed target="OnClickPenStyle" value="1" ver="5"/>
			<designed target="OnClickPenWidth" value="1" ver="5"/>
			<designed target="OnHoverPenColor" value="4278190080" ver="5"/>
			<designed target="OnHoverPenStyle" value="1" ver="5"/>
			<designed target="OnHoverPenWidth" value="1" ver="5"/>
			<designed target="Checkable" value="false" ver="5"/>
			<designed target="DisabledFontColor" value="0xff808080" ver="5"/>
			<designed target="DisabledBrushColor" value="0xfff0f0f0" ver="5"/>
			<designed target="DisabledBrushStyle" value="1" ver="5"/>
			<designed target="DisabledPenColor" value="4288716960" ver="5"/>
			<designed target="DisabledPenStyle" value="1" ver="5"/>
			<designed target="DisabledPenWidth" value="1" ver="5"/>
			<designed target="ZValue" value="0" ver="5"/>
			<designed target="Opacity" value="1" ver="5"/>
			<designed target="Checked" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseRelease">
				<body kind="om">
					<![CDATA[private.PreparingRightsSelected();
pApplyChanges.Invoke();
Close();]]>
				</body>
			</do-on>
			<init target="Enabled" ver="5" value="false"/>
			<designed target="Flip" value="0" ver="5"/>
		</object>
		<object access-modifier="private" name="btnCancel" display-name="btnCancel" uuid="1f135b84-00d6-402a-a1dc-740a94ce15f0" base-type="Button" base-type-id="61e46e4a-827f-4dd2-ac8a-b68bcaddf442" ver="5">
			<designed target="X" value="670" ver="5"/>
			<designed target="Y" value="10" ver="5"/>
			<designed target="Rotation" value="0" ver="5"/>
			<designed target="Scale" value="1" ver="5"/>
			<designed target="Visible" value="true" ver="5"/>
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="Tooltip" value="" ver="5"/>
			<designed target="Width" value="70" ver="5"/>
			<designed target="Height" value="25" ver="5"/>
			<designed target="Text" value="Отмена" ver="5"/>
			<designed target="TextAlignment" value="132" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="FontColor" value="4278190080" ver="5"/>
			<designed target="OnClickFontColor" value="4278190080" ver="5"/>
			<designed target="OnHoverFontColor" value="4278190080" ver="5"/>
			<designed target="BrushColor" value="4293980400" ver="5"/>
			<designed target="BrushStyle" value="1" ver="5"/>
			<designed target="OnClickBrushColor" value="4288716960" ver="5"/>
			<designed target="OnClickBrushStyle" value="1" ver="5"/>
			<designed target="OnHoverBrushColor" value="4294967295" ver="5"/>
			<designed target="OnHoverBrushStyle" value="1" ver="5"/>
			<designed target="PenColor" value="4278190080" ver="5"/>
			<designed target="PenStyle" value="1" ver="5"/>
			<designed target="PenWidth" value="1" ver="5"/>
			<designed target="OnClickPenColor" value="4278190080" ver="5"/>
			<designed target="OnClickPenStyle" value="1" ver="5"/>
			<designed target="OnClickPenWidth" value="1" ver="5"/>
			<designed target="OnHoverPenColor" value="4278190080" ver="5"/>
			<designed target="OnHoverPenStyle" value="1" ver="5"/>
			<designed target="OnHoverPenWidth" value="1" ver="5"/>
			<designed target="ZValue" value="0" ver="5"/>
			<designed target="Opacity" value="1" ver="5"/>
			<designed target="Checkable" value="false" ver="5"/>
			<designed target="DisabledFontColor" value="4278190080" ver="5"/>
			<designed target="DisabledBrushColor" value="4288716960" ver="5"/>
			<designed target="DisabledBrushStyle" value="1" ver="5"/>
			<designed target="DisabledPenColor" value="4288716960" ver="5"/>
			<designed target="DisabledPenStyle" value="1" ver="5"/>
			<designed target="DisabledPenWidth" value="1" ver="5"/>
			<designed target="Checked" value="false" ver="5"/>
			<designed target="Flip" value="0" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseRelease">
				<body kind="om">
					<![CDATA[private.SendingCLoseRequest();]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="SizeLimits" display-name="SizeLimits" uuid="83dda7b4-e9f0-412c-8dff-18359eefad36" base-type="LayoutSizeLimits" base-type-id="10342c1f-560b-4160-9de5-7e2c08026f47" ver="5" description="" cardinal="1">
			<designed target="MinWidth" value="0" ver="5"/>
			<designed target="MinHeight" value="45" ver="5"/>
			<designed target="MaxWidth" value="16777215" ver="5"/>
			<designed target="MaxHeight" value="45" ver="5"/>
		</object>
		<do access-modifier="private" name="UpdateLayout" display-name="UpdateLayout" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[btnCancel.X = Width - btnCancel.Width - 10;
btnApply.X = Width - btnCancel.Width - btnApply.Width - 20;]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="Linear" display-name="Linear" uuid="6bc04ca2-6b17-418d-8538-24b4f56d674a" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="5" description="" cardinal="1">
		<designed target="Orientation" value="2" ver="5"/>
		<designed target="Gap" value="0" ver="5"/>
	</object>
</type>

