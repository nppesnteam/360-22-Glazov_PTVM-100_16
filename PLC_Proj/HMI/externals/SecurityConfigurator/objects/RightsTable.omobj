<type access-modifier="private" name="RightsTable" display-name="RightsTable" uuid="e141c390-8852-4e53-874f-a5fe9c888efa" base-type="Table" base-type-id="c65ff4dc-f22b-47d3-9333-72c4e4e5f662" ver="5">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Width" value="610" ver="5"/>
	<designed target="Height" value="350" ver="5"/>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="b4a509c1-8f1a-41c9-9eb4-4b0b092f0281" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<do access-modifier="private" name="ShowRights" display-name="ShowRights" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[//функция заполнения таблицы правами пользователя/группы
const getTypeTitle = private.TokensDefinition.GetTypeTitle;
const determineRightsValue = private.TokensDefinition.GetDisplayValue;

//столбцы модели
const columns = {
	"type": 				0,
	"tokenName": 		1,
	"allowValue":		2,
	"denyValue": 		3,
	"value": 				4,
	"effAllowValue":	5,
	"effDenyValue":	6,
	"effValue": 			7,
	"description": 	8,
	"appId": 				9,
	"typeTitle": 		10
}

try
{
	//чтение данных
	var rightsDataContent = JSON.parse(RightsJson);
	
	//извлекаем массивы прав
	var rightsData = rightsDataContent.Rights;
	var effectiveRightsData = rightsDataContent.EffectiveRights;
	
	//проверка существования массивов прав
	if (rightsData == undefined || effectiveRightsData == undefined)
		throw new Error("RightsList is undefined");
	
	//проверка наличия прав
	if (rightsData.length == 0 && effectiveRightsData.length == 0)
		throw new Error("RightsList is empty");
}
catch (error)
{
	//в случае исключения, только инициализируем таблицу
	//log(error);
	private.Init();
	private.Model.Clear();
	return;
}

//сортировка по имени без учета регистра
effectiveRightsData = effectiveRightsData.sort((a, b) => a.tokenName.toString().toLowerCase() > b.tokenName.toString().toLowerCase() ? 1 : -1);

//формируем объекты вида: приложение - права - данные прав
effectiveRightsData = getRightsEntity(effectiveRightsData);
rightsData = getRightsEntity(rightsData);

//подготовка массива строк
var modelContent = [];
let rowData = new Array(Object.keys(columns).length);
for (let [appId, tokens] of Object.entries(effectiveRightsData))
{
	//формируем строку приложения
	rowData = rowData.map((element) => null);
	rowData[columns.type] = " ";
	rowData[columns.tokenName] = appId;
	rowData[columns.typeTitle] = " ";
	modelContent.push(rowData);
	
	for (let [tokenName, tokenData] of Object.entries(tokens))
	{
		let type = tokenData.type;
		let typeTitle = getTypeTitle(appId, type, tokenName);
		let effValue = determineRightsValue(appId, type, tokenName, tokenData.allowValue, tokenData.denyValue);
		
		//подготовка значений
		let value, rightAllowValue, rightDenyValue;
		if (rightsData.hasOwnProperty(appId))
		{
			if (rightsData[appId].hasOwnProperty(tokenName))
			{
				let ownRightData = rightsData[appId][tokenName];
				rightAllowValue = ownRightData.allowValue;
				rightDenyValue = ownRightData.denyValue;
				value = determineRightsValue(appId, type, tokenName, rightAllowValue, rightDenyValue);	
			}
			else
			{
				rightAllowValue = null;
				rightDenyValue = null;
				value = null;
			}
		}		
		
		//формируем строку права
		rowData = rowData.map((element) => null);
		rowData[columns.type] = type;
		rowData[columns.tokenName] = tokenName;
		rowData[columns.allowValue] = rightAllowValue;
		rowData[columns.denyValue] = rightDenyValue;
		rowData[columns.value] = value;
		rowData[columns.effAllowValue] = tokenData.allowValue;
		rowData[columns.effDenyValue] = tokenData.denyValue;
		rowData[columns.effValue] = effValue;
		rowData[columns.description] = tokenData.description;
		rowData[columns.appId] = appId;
		rowData[columns.typeTitle] = typeTitle;
		modelContent.push(rowData);
	}
}

//запись строк в модель
private.Init();
let rowCount = modelContent.length;
let rigthsModel = private.Model;
rigthsModel.Clear();
rigthsModel.InsertRows(0, rowCount);
for (let row = 0; row < rowCount; row++)
{
	let rowData = modelContent[row];
	rigthsModel.SetRowDataAsJson(row, JSON.stringify(rowData));
}

//смещение к редактируемой строке - не успевает отрабатывать после вставки строк, поэтому вызывается команда
private.ScrollToRow.Invoke();

//-----------------------------------------------
//функция формирования структуры, в которой права сгруппированы по приложениям 
function getRightsEntity(rightArrayData)
{
  	let rightsEntity = {};
	let app, token;
	
	//получение списка приложений
	let appList = [];
	for (let element of rightArrayData)
	{
		let appName = element.appName;
		if (!appList.includes(appName))
			appList.push(appName);
	}
	appList = appList.sort((a, b) => a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1);
	
	//создание полей с именами приложений
	for (let appName of appList)
		rightsEntity[appName] = {};
	
	//Формирование объектов
	for (let right of rightArrayData)
	{
		app = right.appName;
		token = right.tokenName;
		if (rightsEntity.hasOwnProperty(app))
		{
			rightsEntity[app][token] = {
				"type":right.tokenType,
				"description":right.tokenDescription,
				"allowValue":right.tokenValueAllow,
				"denyValue":right.tokenValueDeny
        };
		}
	}
	return rightsEntity;
}]]>
		</body>
		<param access-modifier="private" name="RightsJson" display-name="" uuid="9bdcaf20-29b5-44ed-9ac1-6f6423ea2364" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<object access-modifier="private" name="Column" display-name="Column" uuid="b9d7bb7d-daa8-442b-bd5b-5c618bf7c686" base-type="TableColumn" base-type-id="109c05c5-8dcf-4a8f-aedd-5bb547cca2d4" ver="5" cardinal="6">
		<designed target="Title" value="" ver="5"/>
		<designed target="Description" value="" ver="5"/>
		<designed target="Id" value="" ver="5"/>
		<designed target="BackgroundColor" value="0xfff0f0f0" ver="5"/>
		<designed target="ForegroundColor" value="0xff000000" ver="5"/>
		<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
		<designed target="TitleBackgroundColor" value="0xfff0f0f0" ver="5"/>
		<designed target="TitleForegroundColor" value="0xff000000" ver="5"/>
		<designed target="TitleFont" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
		<designed target="Width" value="20" ver="5"/>
		<designed target="WidthResizeMode" value="0" ver="5"/>
		<designed target="Emptiable" value="true" ver="5"/>
		<designed target="Hidden" value="false" ver="5"/>
		<designed target="NumberFormat" value="%d" ver="5"/>
		<designed target="TimeFormat" value="dd.MM.yyyy hh:mm:ss.zzz" ver="5"/>
		<designed target="TextAlignment" value="129" ver="5"/>
		<designed target="JsonFilter" value="" ver="5"/>
		<designed target="SortingEnabled" value="false" ver="5"/>
		<designed target="SortOrder" value="0" ver="5"/>
		<designed target="SortPriority" value="0" ver="5"/>
		<designed target="WordWrap" value="true" ver="5"/>
		<designed target="TitleTextAlignment" value="132" ver="5"/>
		<designed target="SortMode" value="0" ver="5"/>
		<designed target="ColumnOwnId" value="" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseDoubleClick">
			<body kind="om">
				<![CDATA[if (Column[Index].Id == "RightsValue" && EditingAllowed)
{
	rightType: string = Variant.ToString(TableModel.GetCellData(row, 0),"");
	rightName: string = Variant.ToString(TableModel.GetCellData(row, 1),"");
	rightValueAllow: string = Variant.ToString(TableModel.GetCellData(row, 2),"null");	
	rightValueDenny: string = Variant.ToString(TableModel.GetCellData(row, 3),"null");	
	rightEffValue: string = Variant.ToString(TableModel.GetCellData(row, 7),"");
	appID: string = Variant.ToString(TableModel.GetCellData(row,9),"");
	private.pChangedRightsResult.ResetParamsValues();
	
	if (rightValueAllow != "null")
	{
		if (rightType == "bool")
		{
			//переход из ДА в НЕТ
			if (rightValueAllow == "TRUE" && rightValueDenny == "FALSE")
				private.pChangedRightsResult.SetParamsValue(appID, rightType, rightName, "FALSE", "TRUE");
			//переход из НЕТ (или Не определено) в ДА
			else if (rightValueAllow == "FALSE" && rightValueDenny == "TRUE" || rightValueAllow == "FALSE" && rightValueDenny == "FALSE")
				private.pChangedRightsResult.SetParamsValue(appID, rightType, rightName, "TRUE", "FALSE");		
			pRightValueChanged.Invoke();
		}
		else if (rightType == "string")
		{
			private.pChangedRightsResult.SetParamsValue(appID, rightType, rightName, rightValueAllow, rightValueDenny);
			
			if (private.TokensDefinition.IsPasswordComplexity(appID, rightType, rightName))
				private.ShowDialogPassComlexity.Invoke();
			else if (private.TokensDefinition.IsPasswordAge(appID, rightType, rightName))
				private.ShowDialogPassAgeChange.Invoke();
			else if (private.TokensDefinition.IsSecurityIntegerRight(appID, rightType, rightName))
				private.ShowDialogChangeIntegerRights.Invoke();
			else
				private.ShowDialogChangeStringRights.Invoke();
				
		}
	}
}]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="WidthChanged">
			<body kind="om">
				<![CDATA[pViewSettingsChanged.Invoke();]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="BackgroundColor" ver="5">
			<body>
				<![CDATA[private.pTheme.EditorBrushColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="ForegroundColor" ver="5">
			<body>
				<![CDATA[private.pTheme.EditorFontColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="Font" ver="5">
			<body>
				<![CDATA[private.pTheme.Font]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="TitleBackgroundColor" ver="5">
			<body>
				<![CDATA[private.pTheme.BackgroundColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="TitleForegroundColor" ver="5">
			<body>
				<![CDATA[private.pTheme.ForegroundColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="TitleFont" ver="5">
			<body>
				<![CDATA[private.pTheme.TitleFont]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="Decorator" display-name="Decorator" uuid="332febcc-9639-45ed-94b8-69fc719a905a" base-type="TableDecorator" base-type-id="2ff6a2d7-9573-4060-bfea-29c63d61b079" ver="5">
		<designed target="JsonDecorator" value="" ver="5"/>
	</object>
	<object access-modifier="private" name="selectionColor" display-name="selectionColor" uuid="9e5b1f31-b1f1-4e43-aace-692263ef0bc4" base-type="notifying_uint8" base-type-id="2e6d6c20-2489-49e1-9d5f-fe68a21b43df" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="private" display-name="private" uuid="72e4d70a-2fae-4c39-ae5e-0980d08b40fa" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="Model" display-name="Model" uuid="227349e5-c341-4eb4-97f7-136c9ec436af" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5" description="" cardinal="1">
			<designed target="Frozen" value="false" ver="5"/>
			<designed target="MaxRowCount" value="10000" ver="5"/>
			<designed target="OptOfProcessingEvents" value="0" ver="5"/>
		</object>
		<object access-modifier="private" name="TokensDefinition" display-name="TokensDefinition" uuid="f41dbe9f-ebc6-4a24-9a08-86857abfe4d0" base-type="TokensDefinition" base-type-id="2d057de8-3722-4426-b142-42fa7ada0520" ver="5"/>
		<object access-modifier="private" name="ShowDialogPassComlexity" display-name="ShowDialogPassComlexity" uuid="901bae26-f9c5-4006-8362-29863303f05b" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="8a1c820a-f4ca-4ab1-ae65-1d6390d17546" base-type="ChangePassComplexity" base-type-id="4abb6432-13a9-4d96-8709-c7744af44bd3" ver="5">
					<init target="init_ChangedRightsResult" ver="5" ref="here.private.pChangedRightsResult"/>
					<init target="pApplyChanges" ver="5" ref="here.pRightValueChanged"/>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
		</object>
		<object access-modifier="private" name="ShowDialogPassAgeChange" display-name="ShowDialogPassAgeChange" uuid="93505c6c-3a82-41ed-a30f-05e6b3b6d84e" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="c556d86f-fa5c-4364-8965-edd178e3fbbd" base-type="ChangePasswordAge" base-type-id="65934d41-35eb-4c14-9618-876bc4adc903" ver="5">
					<init target="pApplyChanges" ver="5" ref="here.pRightValueChanged"/>
					<init target="init_ChangedRightsResult" ver="5" ref="here.private.pChangedRightsResult"/>
					<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboardOptions"/>
					<init target="pTokensDefinition" ver="5" ref="TokensDefinition"/>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
		</object>
		<object access-modifier="private" name="ShowDialogChangeStringRights" display-name="ShowDialogChangeStringRights" uuid="e3395dac-f239-4dce-826b-def84209d0eb" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="19c8e99c-5ffa-42db-8558-508aba0e9a06" base-type="ChangeStringRight" base-type-id="d37d50b1-4ff5-48a2-b5aa-83abfe7acf77" ver="5">
					<init target="pApplyChanges" ver="5" ref="here.pRightValueChanged"/>
					<init target="init_ChangedRightsResult" ver="5" ref="here.private.pChangedRightsResult"/>
					<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboardOptions"/>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
		</object>
		<object access-modifier="private" name="ShowDialogChangeIntegerRights" display-name="ShowDialogChangeIntegerRights" uuid="14ca85e2-9560-42d9-bfc9-a407233d4143" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="f39c4790-6855-476f-a5af-3d414f72bc8f" base-type="ChangeIntegerRight" base-type-id="5e0ef489-c9d3-4f48-8e87-1d1daf3f5bee" ver="5">
					<init target="pApplyChanges" ver="5" ref="here.pRightValueChanged"/>
					<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboardOptions"/>
					<init target="pTokensDefinition" ver="5" ref="TokensDefinition"/>
					<init target="init_ChangedRightsResult" ver="5" ref="here.private.pChangedRightsResult"/>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
		</object>
		<object access-modifier="private" name="selectedRow" display-name="selectedRow" uuid="ba458805-1e08-4620-ba06-2fa239854661" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<object access-modifier="private" name="pTheme" display-name="pTheme" uuid="952692a9-33bb-4d03-8e8b-004d2a8ac84b" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="5" description=""/>
		<init target="pTheme" ver="5" ref="init_Theme"/>
		<object access-modifier="private" name="pChangedRightsResult" display-name="pChangedRightsResult" uuid="36fa3745-e54d-4bca-9543-1c221d8017f3" base-type="ChangeRightResult" base-type-id="3efb0823-a348-4b39-a762-64290867ccb6" base-const="true" base-ref="true" ver="5" description=""/>
		<init target="pChangedRightsResult" ver="5" ref="init_ChangedRightsResult"/>
		<object access-modifier="private" name="pScreenKeyboardOptions" display-name="pScreenKeyboardOptions" uuid="c82e6f8b-dfa5-4119-8a98-9457faf007c3" base-type="ScreenKeyboardOptions" base-type-id="0589bc8e-fbb2-4f0e-b5d2-f0d825538ef1" base-const="true" base-ref="true" ver="5" description=""/>
		<init target="pScreenKeyboardOptions" ver="5" ref="init_ScreenKeyboard"/>
		<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (TableModel.GetColumnCount() > 0)
	return;

//настройка столбцов
Column[0].Title = "Тип";
Column[0].Id = "TokenTypeTitle";
Column[0].Hidden = false;
Column[0].Width = 75;
Column[0].WordWrap = true;
	
Column[1].Title = "Право";
Column[1].Id = "NameRight";
Column[1].Hidden = false;
Column[1].Width = 100;
Column[1].WordWrap = false;
	
Column[2].Title = "Значение";
Column[2].Id = "RightsValue";
Column[2].Hidden = false;
Column[2].Width = 100;
Column[2].WordWrap = true;
	
Column[3].Title = "Эффективное значение";
Column[3].Id = "EffRightValue";
Column[3].Hidden = !ShowEffectiveRigthsColumn;
Column[3].Width = 130;
Column[3].WordWrap = true;
	
Column[4].Title = "";
Column[4].Id = "AppID";
Column[4].Hidden = true;
Column[4].Width = 20;
Column[4].WordWrap = false;
	
Column[5].Title = " Описание";
Column[5].Id = "Description";
Column[5].Hidden = false;
Column[5].Width = 200;
Column[5].WordWrap = false;

//настройка модели
Model.Reset();
Model.AddColumn("TypeRight","","","","string",false,true);						//0
Model.AddColumn("NameRight","","","","string",false,true);						//1
Model.AddColumn("RightsAllowValue","","","","string",false,true);			//2
Model.AddColumn("RightsDenyValue","","","","string",false,true);				//3
Model.AddColumn("RightsValue","","","","string",false,true);					//4	- вычисленное значение права ( только для отображения)
Model.AddColumn("EffRightsAllowValue","","","","string",false,true);		//5
Model.AddColumn("EffRightsDenyValue","","","","string",false,true);			//6
Model.AddColumn("EffRightValue","","","","string",false,true);					//7	- вычисленное значение эффективного права ( только для отображения)
Model.AddColumn("Description","","","","string",false,true);					//8
Model.AddColumn("AppID","","","","string",false,true);								//9
Model.AddColumn("TokenTypeTitle","","","","string",false,true);				//10	- текст типа токена ( только для отображения)
Model.Clear();

//применить декоратор
Decorator.JsonDecorator = GetJsonDecorator(selectionColor);]]>
			</body>
		</do>
		<do access-modifier="private" name="GetJsonDecorator" display-name="GetJsonDecorator" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var decorator = {};
decorator.StyleDictionary = [
	{
		'style_name': "selected_style",
		'style': {'background_color': `#${selectionColor.toString(16)}`}
	},
	{
		'style_name': "appStyle",
		'style': {'color': '#ff000000', 'background_color': '#ffdcf2f8', 'font': {'font_weight':'bold'}}
	},
	{
		'style_name': "trueStyle",
		'style': {'color': '#ff000000', 'background_color': '#fface3ac'}
	},
	{
		'style_name': "falseStyle",
		'style': {'color': '#ff000000', 'background_color': '#ffffa39b'}
	},
	{
		'style_name': "boolStyle",
		'style': {'color': '#ff000000', 'background_color': '#ffddddff'}
	},
	{
		'style_name': "stringStyle",
		'style': {'color': '#ff000000', 'background_color': '#fff3d3b4'}
	},
	{
		'style_name': "boolArrayStyle",
		'style': {'color': '#ff000000', 'background_color': '#ffddddff'}
	},
	{
		'style_name': "Int32ArrayStyle",
		'style': {'color': '#ff000000', 'background_color': '#ff97d2fd'}
	},
	{
		'style_name': "Int32Style",
		'style': {'color': '#ff000000', 'background_color': '#ff97d2fd'}
	}
];

decorator.Formatting = [
	{
		'formatting_rule_name': "tokenType_format",
		'formatting_column': "TokenTypeTitle",
		'conditions': [
			{'condition': {'data:TokenTypeTitle': 'bool'}, 'text': 'логическое'},
			{'condition': {'data:TokenTypeTitle': 'string'}, 'text': 'строковое'},
			{'condition': {'data:TokenTypeTitle': 'boolArray'}, 'text': 'битовая \nмаска'},
			{'condition': {'data:TokenTypeTitle': 'int32Array'}, 'text': 'диапазон \nчисел'},
			{'condition': {'data:TokenTypeTitle': 'int32'}, 'text': 'числовое'}
		]
	},
	{
		'formatting_rule_name': "rightValue_format",
		'formatting_column': "RightsValue",
		'conditions' : [
			{'condition': {'and': [{'data:TokenTypeTitle': 'bool'},{'data:RightsValue': 'TRUE'}]},'text':'Да'},
			{'condition': {'and': [{'data:TokenTypeTitle': 'bool'},{'data:RightsValue': 'FALSE'}]},'text':'Нет'}
		]
	},
	{
		'formatting_rule_name': "effectiveRightValue_format",
		'formatting_column': "EffRightValue",
		'conditions' : [
			{'condition': {'and':[{'data:TokenTypeTitle': 'bool'},{'data:EffRightValue': 'TRUE'}]},'text':'Да'},
			{'condition': {'and':[{'data:TokenTypeTitle': 'bool'},{'data:EffRightValue': 'FALSE'}]},'text':'Нет'}
		]
	}
];

decorator.Decorating = [
	{
		'decoration_rule_name': "appDecorating",
		'decoration_rule': {'data:TokenTypeTitle': ' '},
		'rowstyle':  "appStyle"
	},	
	{
		'decoration_rule_name': "string_decorating",
		'decoration_rule': {'data:TokenTypeTitle': 'string'},
		'columnstyle': {'TokenTypeTitle': "stringStyle"}
	},
	{
		'decoration_rule_name': "bool_decorating",
		'decoration_rule': {'data:TokenTypeTitle': 'bool'},
		'columnstyle': {'TokenTypeTitle': "boolStyle"}
	},
	{
		'decoration_rule_name': "boolArray_decorating",
		'decoration_rule': {'data:TokenTypeTitle': 'boolArray'},
		'columnstyle': {'TokenTypeTitle': "boolArrayStyle"}
	},
	{
		'decoration_rule_name': "Int32Array_decorating",
		'decoration_rule': {'data:TokenTypeTitle': 'Int32Array'},
		'columnstyle': {'TokenTypeTitle': "Int32ArrayStyle"}
	},
	{
		'decoration_rule_name': "Int32_decorating",
		'decoration_rule': {'data:TokenTypeTitle': 'Int32'},
		'columnstyle': {'TokenTypeTitle': "Int32Style"}
	},
	{
		'decoration_rule_name': "valueTrueDecorating",
		'decoration_rule': {'and': [{'data:TokenTypeTitle': 'bool'}, {'data:RightsValue': 'TRUE'}]},
		'columnstyle': {'RightsValue': "trueStyle"}
	},
	{
		'decoration_rule_name': "valueFalseDecorating",
		'decoration_rule': {'and': [{'data:TokenTypeTitle': 'bool'}, {'data:RightsValue': 'FALSE'}]},
		'columnstyle': {'RightsValue': "falseStyle"}
	},
	{
		'decoration_rule_name': "effectiveValueTrueDecorating",
		'decoration_rule': {'and': [{'data:TokenTypeTitle': 'bool'}, {'data:EffRightValue': 'TRUE'}]},
		'columnstyle': {'EffRightValue': "trueStyle"}
	},
	{
		'decoration_rule_name': "effectiveValueFalseDecorating",
		'decoration_rule': {'and': [{'data:TokenTypeTitle': 'bool'}, {'data:EffRightValue': 'FALSE'}]},
		'columnstyle': {'EffRightValue': "falseStyle"}
	}
];

return JSON.stringify(decorator, null, 2);
]]>
			</body>
			<param access-modifier="private" name="selectionColor" display-name="" uuid="b0e14afa-59fe-4bb7-86e7-c1aa9dd56385" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		</do>
		<object access-modifier="private" name="ScrollToRow" display-name="ScrollToRow" uuid="477fba09-bf41-4398-8eb8-265d1f8404da" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[row: int4 = private.selectedRow;
if (row >= 0 && row < GetRowCount())
	ScrollTo(row, 2, 3);
else
	ScrollToTop();]]>
				</body>
			</do-on>
		</object>
	</object>
	<object access-modifier="private" name="ShowEffectiveRigthsColumn" display-name='Отображать столбец "Эффективное значение"' uuid="3a3cea1f-3431-4e38-9e2e-98fbc358fe1d" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="EditingAllowed" display-name="Разрешить редактирование" uuid="ad1cf1bc-293f-4396-950a-e1021693bbb0" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<object access-modifier="private" name="pRightValueChanged" display-name="Применить изменения" uuid="deb0424e-f54a-4354-b6fb-8adb7f2c56a5" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pViewSettingsChanged" display-name="Применить настройки" uuid="ed6300ed-5223-4d25-9d91-11198548d42b" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
	<do access-modifier="private" name="RemoveAllRows" display-name="RemoveAllRows" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[private.Model.Clear();]]>
		</body>
	</do>
	<do access-modifier="private" name="GetViewSettings" display-name="GetViewSettings" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[var settings = 
	{
		"Columns" : {}
	};

for (var i = 0; i < Column.Length; i++)
{		
	var column = Column[i];
	var columnInfo = {
		"Index": column.Index,
		"Width": column.Width,
		"Hidden": column.Hidden
	};
	if (column.SortingEnabled != false)
	{
		columnInfo.SortOrder = column.SortOrder;
		columnInfo.SortPriority = column.SortPriority;
	}
	settings.Columns[column.Id] = columnInfo;
}

return JSON.stringify(settings);]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateView" display-name="UpdateView" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="settings" display-name="" uuid="77158c7a-4051-44be-8c25-9900b46d9ef9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="javascript">
			<![CDATA[var rightsTable = JSON.parse(settings);
if (rightsTable.Columns != undefined)
{
	private.Init();
	for (var i = 0; i < Column.Length; i++)
	{
		var column = Column[i];
		var columnInfo = rightsTable.Columns[column.Id];
		if (columnInfo != undefined)
		{
			column.Width = columnInfo.Width;
			column.Hidden = columnInfo.Hidden;
			column.SortingEnabled = columnInfo.SortOrder != undefined;
			if (column.SortingEnabled)
			{
				column.SortOrder = columnInfo.SortOrder;
				column.SortPriority = columnInfo.SortPriority;
			}
		}
		if (column.Id == "EffRightValue")
			column.Hidden = !ShowEffectiveRigthsColumn;
	}
}]]>
		</body>
	</do>
	<param access-modifier="private" name="init_ChangedRightsResult" display-name="Результат" uuid="ca98cc91-1b7b-47a1-87d0-c2c8cb8cc4d0" base-type="ChangeRightResult" base-type-id="3efb0823-a348-4b39-a762-64290867ccb6" base-const="true" base-ref="true" ver="5" description=""/>
	<param access-modifier="private" name="init_Theme" display-name="Тема оформления" uuid="161afbc0-f739-42ad-93d2-ef7b96ecc118" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="5" description=""/>
	<param access-modifier="private" name="init_ScreenKeyboard" display-name="Вызов экранной клавиатуры" uuid="33c9b0cf-e020-49fe-ae1a-a8c5d9e93828" base-type="ScreenKeyboardOptions" base-type-id="0589bc8e-fbb2-4f0e-b5d2-f0d825538ef1" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="LinearLayout" display-name="LinearLayout" uuid="8256e69c-2b8f-4ec2-96e8-2d059f814e9d" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="5">
		<designed target="Orientation" value="1" ver="5"/>
		<designed target="Gap" value="0" ver="5"/>
	</object>
	<designed target="BackgroundColor" value="4294967295" ver="5"/>
	<designed target="FrameColor" value="4278190080" ver="5"/>
	<designed target="GridColor" value="4292401368" ver="5"/>
	<designed target="HeaderHeight" value="21" ver="5"/>
	<designed target="HeaderVisible" value="true" ver="5"/>
	<designed target="RowHeight" value="25" ver="5"/>
	<designed target="RowOrder" value="0" ver="5"/>
	<designed target="SelectionBehavior" value="0" ver="5"/>
	<designed target="SelectionMode" value="3" ver="5"/>
	<designed target="SelectionOverlayEnabled" value="false" ver="5"/>
	<designed target="LatestRowTracking" value="false" ver="5"/>
	<designed target="DelayedSortingEnabled" value="false" ver="5"/>
	<designed target="HorizontalScrollMode" value="0" ver="5"/>
	<designed target="VerticalScrollMode" value="0" ver="5"/>
	<designed target="HorizontalScrollBarPolicy" value="0" ver="5"/>
	<designed target="VerticalScrollBarPolicy" value="0" ver="5"/>
	<designed target="RowHeightResizeMode" value="3" ver="5"/>
	<init target="TableModel" ver="5" ref="private.Model"/>
	<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="CurrentChanged">
		<body kind="om">
			<![CDATA[if (row >= 0 && row < GetRowCount())
	private.selectedRow = row;]]>
		</body>
	</do-on>
	<do-trace access-modifier="private" target="selectionColor" ver="5">
		<body>
			<![CDATA[private.pTheme.SelectionColor]]>
		</body>
	</do-trace>
	<do-trace access-modifier="private" target="BackgroundColor" ver="5">
		<body>
			<![CDATA[here.private.pTheme.EditorBrushColor]]>
		</body>
	</do-trace>
	<do-trace access-modifier="private" target="FrameColor" ver="5">
		<body>
			<![CDATA[here.private.pTheme.BorderColor]]>
		</body>
	</do-trace>
	<do-trace access-modifier="private" target="GridColor" ver="5">
		<body>
			<![CDATA[here.private.pTheme.DisabledBorderColor]]>
		</body>
	</do-trace>
</type>

