<type access-modifier="public" name="Templates" display-name="Текстовые шаблоны" uuid="020ae0f1-0abb-4c52-9c0e-0152917830ed" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5" description="">
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="31c69d2a-a69d-4023-981b-79a84cc2e1df" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<do access-modifier="private" name="Set" display-name="SetTemplate" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[Data.Initialize();

// ищем уже добавленный шаблон
index: int4 = Data.FindByName(name);
if (index == -1)
{
	// добавляем новый шаблон
	Data.AddRow();
	index = Data.GetRowCount() - 1;
	Data.SetCellData(index, 0, name);
}

// задаем значение шаблона
Data.SetCellData(index, 1, value);]]>
		</body>
		<param access-modifier="private" name="name" display-name="" uuid="e6d2c141-60d2-4e2d-b0d6-89db021e608f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="value" display-name="" uuid="2f712a94-7911-46ca-9bf6-7cee21752276" base-type="variant" base-type-id="7d3322c1-a2cf-4732-a957-abd69e3e4b7a" ver="5"/>
	</do>
	<do access-modifier="private" name="Clear" display-name="Clear" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[Data.Clear();]]>
		</body>
	</do>
	<do access-modifier="private" name="Expand" display-name="ExpandString" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[// получаем словарь шаблонов со значениями
var templates = JSON.parse(GetTemplateList());
const templatesMap = new Map(templates.map(t => [t.name, t.value]));

// выражение поиска шаблонов в тексте
const regexp = /\${([^}]+)}/g;

// формируем строку с раскрытыми шаблонами
return text.replaceAll(regexp, (match, name) => {
	let value = templatesMap.get(name);
	if (value != undefined)
		return value;
	else return	match;
});]]>
		</body>
		<param access-modifier="private" name="text" display-name="" uuid="4d5c703c-5108-42bd-9c00-f436257aea3e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<object access-modifier="private" name="Data" display-name="Data" uuid="a7f6ada4-a464-4975-9528-0cca46a70b7b" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5" description="" cardinal="1">
		<designed target="Frozen" value="false" ver="5"/>
		<designed target="MaxRowCount" value="10000" ver="5"/>
		<designed target="OptOfProcessingEvents" value="0" ver="5"/>
		<object access-modifier="private" name="initialized" display-name="initialized" uuid="66c1e263-4a0c-4609-873e-a74d03d31e13" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<init target="initialized" ver="5" value="false"/>
		<do access-modifier="private" name="Initialize" display-name="Initialize" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (!initialized)
{	
	initialized = true;

	Data.AddColumn("name", "", "", "", "string", true, true);
	Data.AddColumn("value", "", "", "", "variant", true, true);
}]]>
			</body>
		</do>
		<do access-modifier="private" name="FindByName" display-name="FindByName" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[for (i: int4; i < Data.GetRowCount(); i += 1)
{
	if (Variant.ToString(Data.GetCellData(i, 0), "") == name)
		return i;
}
return -1;]]>
			</body>
			<param access-modifier="private" name="name" display-name="" uuid="c39567cd-e8a9-4508-999d-b4ae3d38d342" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="DataChanged">
			<body kind="om">
				<![CDATA[if (left == 1)
{
	//Debug.Log("Templates data changed: " + Variant.ToString(GetCellData(top, left), ""));
	pValueChanged.Invoke();
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="pAdditionData" display-name="pAdditionData" uuid="1182de8b-9178-474e-9717-1a4dd2d7a07a" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5" description="" cardinal="1" base-ref="true">
		<designed target="Frozen" value="false" ver="5"/>
		<designed target="MaxRowCount" value="10000" ver="5"/>
		<designed target="OptOfProcessingEvents" value="0" ver="5"/>
	</object>
	<do access-modifier="private" name="ToJSON" display-name="GetAll" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[Data.Initialize();

var result = [];
let rows = JSON.parse(Data.GetDataAsJson());
for (let i = 0; i < rows.length; i++)
{
	let data = rows[i].data;
	result.push({ 'name': data[0], 'value': data[1]	});
}

//log(JSON.stringify(result));
return JSON.stringify(result);]]>
		</body>
	</do>
	<do access-modifier="private" name="FromJSON" display-name="FromJSON" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[Data.Initialize();
Data.Clear();

//log(json);
var templates = JSON.parse(json);
if (templates.length > 0)
{
	var tableData = [];	
	for(let i = 0; i < templates.length; i++)
	{
		let template = templates[i];
		tableData.push({ 'row': i, 'data': [ template.name, template.value ]});
	}
	
	//log(JSON.stringify(tableData));
	Data.InsertRows(0, tableData.length);	
	Data.SetDataAsJson(JSON.stringify(tableData), true);
}]]>
		</body>
		<param access-modifier="private" name="json" display-name="" uuid="99a23f85-8bf7-4eff-aa78-bc1ab9e8cb8a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="GetTemplateList" display-name="GetTemplateList" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[Data.Initialize();

var result = [];

// ссылка на дополнительные данные может не иметь значение
try
{
	AddToResult(pAdditionData.GetDataAsJson());
}
catch(err)
{
}

AddToResult(Data.GetDataAsJson());

//log(JSON.stringify(result));
return JSON.stringify(result);

function AddToResult(json)
{
	let rows = JSON.parse(json);
	for (let i = 0; i < rows.length; i++)
	{
		let data = rows[i].data;
		result.push({ 'name': data[0], 'value': data[1]	});
	}
}]]>
		</body>
	</do>
	<object access-modifier="private" name="pValueChanged" display-name="pValueChanged" uuid="18cdf7a1-bbfc-4b76-b737-0c497d0db713" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
</type>

