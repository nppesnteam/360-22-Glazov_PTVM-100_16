<type access-modifier="private" name="Alarms_Config" display-name="Alarms_Config" uuid="cac958c3-d08c-4b7b-8345-d70ccc130514" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5" description="">
	<object access-modifier="private" name="ConfigurationFolder" display-name="Путь к папке с конфигурацией" uuid="a9eb3dd6-b5ce-431d-af6f-5b73c14b0acf" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="3">
		<object access-modifier="private" name="Path" display-name="Path" uuid="407ffee1-33cb-4a51-88bd-b129d2981ad6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<do-on access-modifier="private" name="Handler_ValueChanged" display-name="Handler_ValueChanged" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (loadedFolder != Value)
	Load(Value);]]>
			</body>
		</do-on>
		<object access-modifier="private" name="soundFolder" display-name="soundFolder" uuid="a4266afe-0327-4075-8738-cfd2b89808be" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<object access-modifier="private" name="soundFolderPath" display-name="soundFolderPath" uuid="6876fc2f-80cc-4ff8-8276-750734d58690" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<object access-modifier="private" name="loadedFolder" display-name="loadedFolder" uuid="465dfe4a-80bc-4d8a-98dc-9b0d67f62cdb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<init target="loadedFolder" ver="5" value="."/>
	</object>
	<init target="ConfigurationFolder" ver="5" value=""/>
	<object access-modifier="private" name="ToolBar" display-name="ToolBar" uuid="3e5ab218-418b-4e58-ad9d-5044f628340c" base-type="" base-type-id="" ver="5" description="" cardinal="1">
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "toolbox.json");
if (File.Exists(filePath))
{
	//log("Загрузка конфигурации панели инструментов из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var settings = JSON.parse(json);
		//ver-undef
		if (settings.Version==undefined)
		{
			settings.Content = [];
			settings.Content.push({Id:"btnLogin", Visible:IsVisible(settings.btnLogin)});
			settings.Content.push({Id:"btnOperHistMode", Visible:IsVisible(settings.btnOperMode)});//settings.btnOperMode always equals settings.btnHistMode
			settings.Content.push({Id:"btnSettings", Visible:IsVisible(settings.btnSettings)});
			settings.Content.push({Id:"btnOpen", Visible:IsVisible(settings.btnOpen)});
			settings.Content.push({Id:"btnSave", Visible:IsVisible(settings.btnSave)});
			settings.Content.push({Id:"btnExport", Visible:IsVisible(settings.btnExport)});
			settings.Content.push({Id:"btnPrint", Visible:IsVisible(settings.btnPrint)});
			settings.Content.push({Id:"btnFiltr", Visible:IsVisible(settings.btnFiltr)});
			settings.Content.push({Id:"btnSort", Visible:IsVisible(settings.btnSort)});
			settings.Content.push({Id:"btnAckSel", Visible:IsVisible(settings.btnAckSel)});
			settings.Content.push({Id:"btnAckAll", Visible:IsVisible(settings.btnAckAll)});
			settings.Content.push({Id:"btnClearAll", Visible:IsVisible(settings.btnClearAll)});
			settings.Content.push({Id:"btnSnapshot", Visible:IsVisible(settings.btnSnapshot)});
			settings.Content.push({Id:"btnSndClear", Visible:IsVisible(settings.btnSndClear)});
			settings.Content.push({Id:"btnSndNext", Visible:IsVisible(settings.btnSndNext)});
			settings.Content.push({Id:"btnSndMute", Visible:IsVisible(settings.btnSndMute)});
			settings.Content.push({Id:"RecHistory", Visible:IsVisible(settings.RecHistory)});
			settings.Content.push({Id:"menuitemPresetInterval", Visible:IsVisible(settings.menuitemPresetInterval)});
			settings.Content.push({Id:"menuitemRequestFilter", Visible:IsVisible(settings.menuitemRequestFilter)});
			settings.Content.push({Id:"menuitemChronology", Visible:IsVisible(settings.menuitemChronology)});
		}
		//ver 1
		var def = JSON.parse(GetDefaults());
		for (let i = 0; i < def.length; i++)
			if (settings.Content.find(element => element.Id == def[i].Id) == undefined)
				settings.Content.push({Id:def[i].Id, Visible:false});
		Data = JSON.stringify(settings.Content);
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		Data = GetDefaults();
		return false;
	}
}
else
	Data = GetDefaults();

ApplyData();

function IsVisible(btn)
{
	return btn != undefined && btn.Hidden == false;
}

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "toolbox.json");
//log("Сохранение конфигурации панели инструментов в файл "  + filePath);
try
{
	var settings = {};
	settings.Version = 1;
	settings.Content = JSON.parse(Data);
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
		<object access-modifier="private" name="btnOperMode_HideFlag" display-name="btnOperMode_HideFlag" uuid="7c679058-ce29-4d55-bb51-60d5eed3356f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnHistMode_HideFlag" display-name="btnHistMode_HideFlag" uuid="19854bdc-e269-47df-9ac0-b283785f07dc" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSettings_HideFlag" display-name="btnSettings_HideFlag" uuid="240139b4-02fc-4c32-89c7-168b0abdcdd9" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSave_HideFlag" display-name="btnSave_HideFlag" uuid="90532ad9-894b-441c-90dd-1c9dbe4f0e60" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnOpen_HideFlag" display-name="btnOpen_HideFlag" uuid="c611d85d-8a72-4d9e-99bc-3887f3b465cc" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnExport_HideFlag" display-name="btnExport_HideFlag" uuid="4304cc4d-346d-4fcf-b170-c9b94119d122" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnPrint_HideFlag" display-name="btnPrint_HideFlag" uuid="73c14a9c-8f68-473e-ae36-37b3fa200c83" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnFiltr_HideFlag" display-name="btnFiltr_HideFlag" uuid="04a95ef3-51ee-4910-8778-cb18860a2ae3" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="HistoryPanel_HideFlag" display-name="HistoryPanel_HideFlag" uuid="c2c8546f-2d83-4551-bbbe-69a8ca17a212" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnFiltrList_HideFlag" display-name="btnFiltrList_HideFlag" uuid="6d7055bb-8372-4179-a311-ab950b540df3" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnAckSel_HideFlag" display-name="btnAckSel_HideFlag" uuid="ed1394c7-c000-4448-8a41-2ad8c124413f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnAckAll_HideFlag" display-name="btnAckAll_HideFlag" uuid="b04dc23b-4329-4f61-8303-18327bd04c6e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnClearAll_HideFlag" display-name="btnClearAll_HideFlag" uuid="43c716a7-897e-4948-b2cb-258ec5789c5c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSuppress_HideFlag" display-name="btnSuppress_HideFlag" uuid="98aca404-b794-4dde-b57a-09248072e5d1" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSnapshot_HideFlag" display-name="btnSnapshot_HideFlag" uuid="2a753bd9-8d8f-4afb-bf4d-4dd39726f6ed" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSndClear_HideFlag" display-name="btnSndClear_HideFlag" uuid="218e7a54-4581-47ef-b3a6-696ef7477972" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSndNext_HideFlag" display-name="btnSndNext_HideFlag" uuid="9d2f24f7-bfed-4341-b883-d44c0a05d2e5" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSndMute_HideFlag" display-name="btnSndMute_HideFlag" uuid="362f27da-a488-45fc-b198-dceefc39019f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnSort_HideFlag" display-name="btnSort_HideFlag" uuid="cafdd6ec-498b-44e5-940c-30a3cbb7a2b1" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="btnLogin_HideFlag" display-name="btnLogin_HideFlag" uuid="d0139425-8da3-411e-8bfc-e89fc93edee5" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="HistoryMenu_PresetInterval_HideFlag" display-name="HistoryMenu_PresetInterval_HideFlag" uuid="9fb7a266-467a-4e15-976a-aeaddc5046a8" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="HistoryMenu_RequestFilter_HideFlag" display-name="HistoryMenu_RequestFilter_HideFlag" uuid="26d8eec6-e275-4e75-a07c-cee2a030ea2f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="HistoryMenu_Chronology_HideFlag" display-name="HistoryMenu_Chronology_HideFlag" uuid="f052f295-b802-4532-a8a8-ae00e69554db" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="GetDefaults" display-name="GetDefaults" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var Content = [];
Content.push({Id:"btnLogin", Visible:true});
Content.push({Id:"btnOperHistMode", Visible:true});
Content.push({Id:"btnSettings", Visible:true});
Content.push({Id:"btnOpen", Visible:true});
Content.push({Id:"btnSave", Visible:true});
Content.push({Id:"btnExport", Visible:true});
Content.push({Id:"btnPrint", Visible:true});
Content.push({Id:"btnFiltr", Visible:true});
Content.push({Id:"btnSort", Visible:true});
Content.push({Id:"btnAckSel", Visible:true});
Content.push({Id:"btnAckAll", Visible:true});
Content.push({Id:"btnClearAll", Visible:true});
Content.push({Id:"btnSuppress", Visible:false});
Content.push({Id:"btnSnapshot", Visible:true});
Content.push({Id:"btnSndClear", Visible:true});
Content.push({Id:"btnSndNext", Visible:true});
Content.push({Id:"btnSndMute", Visible:true});
Content.push({Id:"RecHistory", Visible:true});
Content.push({Id:"menuitemPresetInterval", Visible:true});
Content.push({Id:"menuitemRequestFilter", Visible:true});
Content.push({Id:"menuitemChronology", Visible:true});
return JSON.stringify(Content);]]>
			</body>
		</do>
		<do access-modifier="private" name="GetToolbarDesign" display-name="GetToolbarDesign" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Adding design for dinamic settings
var items = JSON.parse(GetDefaults());
for (let i = 0; i < items.length; i++)
{
//здесь добавляем картинки и русские названия по идентификаторам
	if (items[i].Id=="btnLogin")
	{
		items[i].Caption = "Сменить пользователя";
		items[i].Images = ["Login24.png"];
	}
	if (items[i].Id=="btnOperHistMode")
	{
		items[i].Caption = "Оперативный/Исторический режим";
		items[i].Images = ["Operative24.png","Historical24.png"];
	}
	if (items[i].Id=="btnSettings")
	{
		items[i].Caption = "Параметры...";
		items[i].Images = ["Options24.png"];
	}
	if (items[i].Id=="btnOpen")
	{
		items[i].Caption = "Открыть...";
		items[i].Images = ["OpenFile24.png"];
	}
	if (items[i].Id=="btnSave")
	{
		items[i].Caption = "Сохранить...";
		items[i].Images = ["SaveFile24.png"];
	}
	if (items[i].Id=="btnExport")
	{
		items[i].Caption = "Экспорт...";
		items[i].Images = ["ExportToFile24.png"];
	}
	if (items[i].Id=="btnPrint")
	{
		items[i].Caption = "Печать...";
		items[i].Images = ["Print24.png"];
	}
	if (items[i].Id=="btnFiltr")
	{
		items[i].Caption = "Фильтр отображения...";
		items[i].Images = ["Filter24.png"];
	}
	if (items[i].Id=="btnSort")
	{
		items[i].Caption = "Сортировка...";
		items[i].Images = ["Sort24.png"];
	}
	if (items[i].Id=="btnAckSel")
	{
		items[i].Caption = "Квитировать";
		items[i].Images = ["Acknowledge24.png"];
	}
	if (items[i].Id=="btnAckAll")
	{
		items[i].Caption = "Квитировать все";
		items[i].Images = ["AcknowledgeAll24.png"];
	}
	if (items[i].Id=="btnClearAll")
	{
		items[i].Caption = "Очистить список";
		items[i].Images = ["Clear24.png"];
	}
	if (items[i].Id=="btnSuppress")
	{
		items[i].Caption = "Подавления и блокировки";
		items[i].Images = ["Supression24.png"];
	}
	if (items[i].Id=="btnSnapshot")
	{
		items[i].Caption = "Включить/Отключить режим снимка";
		items[i].Images = ["Pause24.png","Play24.png"];
	}
	if (items[i].Id=="btnSndClear")
	{
		items[i].Caption = "Очистить очередь звуков";
		items[i].Images = ["SoundStop24.png"];
	}
	if (items[i].Id=="btnSndNext")
	{
		items[i].Caption = "Пропустить звук";
		items[i].Images = ["SoundForward24.png"];
	}
	if (items[i].Id=="btnSndMute")
	{
		items[i].Caption = "Включить/Отключить проигрывание звуков";
		items[i].Images = ["SoundPlay24.png","SoundMute24.png"];
	}
	if (items[i].Id=="RecHistory")
	{
		items[i].Caption = "Элементы управления запросом истории";
		items[i].Images = ["Request24.png"];
	}
	if (items[i].Id=="menuitemPresetInterval")
	{
		items[i].Caption = "Предустановленные интервалы";
		items[i].Images = [];
	}
	if (items[i].Id=="menuitemRequestFilter")
	{
		items[i].Caption = "Фильтр запроса";
		items[i].Images = [];
	}
	if (items[i].Id=="menuitemChronology")
	{
		items[i].Caption = "Выбор хронологии";
		items[i].Images = [];
	}
}
return JSON.stringify(items);]]>
			</body>
		</do>
		<do access-modifier="private" name="ApplyData" display-name="ApplyData" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[var items = JSON.parse(Data);
for (let i = 0; i < items.length; i++)
{
	if (items[i].Id=="btnLogin") btnLogin_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnOperHistMode") btnOperMode_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSettings") btnSettings_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnOpen") btnOpen_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSave") btnSave_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnExport") btnExport_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnPrint") btnPrint_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnFiltr") btnFiltr_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSort") btnSort_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnAckSel") btnAckSel_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnAckAll") btnAckAll_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnClearAll") btnClearAll_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSuppress") btnSuppress_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSnapshot") btnSnapshot_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSndClear") btnSndClear_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSndNext") btnSndNext_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="btnSndMute") btnSndMute_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="RecHistory") HistoryPanel_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="menuitemPresetInterval") HistoryMenu_PresetInterval_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="menuitemRequestFilter") HistoryMenu_RequestFilter_HideFlag.Value = !items[i].Visible;
	if (items[i].Id=="menuitemChronology") HistoryMenu_Chronology_HideFlag.Value = !items[i].Visible;
}]]>
			</body>
		</do>
		<object access-modifier="private" name="Data" display-name="Data" uuid="8de10bca-0970-45f3-8919-07cdf2b7717d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
	</object>
	<object access-modifier="private" name="TableView" display-name="TableView" uuid="29b1b8c6-95dd-4d3f-a425-ed7bdd9516ea" base-type="" base-type-id="" ver="5" description="" cardinal="1">
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var result = true;
var widths = [];

function SetDefaultView()
{
	// Ширина столбцов по умолчанию и их видимость
	for (let i = 0; i < Columns.Length; i++)
	{
		Columns[i].Width = GetDefaultColumnWidth(Columns[i].Id);
		Columns[i].WidthResizeMode = 0;
		Columns[i].Hidden = ! GetDefaultColumnVisible(Columns[i].Id);
		Columns[i].Font = "Tahoma,8,-1,5,50,0,0,0,0,0,Обычный";
		Columns[i].TitleFont = "Tahoma,8,-1,5,50,0,0,0,0,0,Обычный";
	}
	// высота строк и заголовков по умолчанию
	RowHeight.Value = 23;
	HeaderHeight.Value = 23;
}

var tableviewPath = File.CombinePath(ConfigurationFolder.Path, "tableview.json");
if (File.Exists(tableviewPath))
{
	//log("Загрузка настроек вида таблицы из файла "  + tableviewPath);
	try
	{
		var json = File.ReadTextFile(tableviewPath);
		var tableview = JSON.parse(json);
		if (tableview.Version == undefined)
		{
			//в разных ветках номера меняются поэтому конвертируем циклом
			var convert = {"Column_1":"time", "Column_2":"active_time","Column_3":"deactive_time","Column_4":"message","Column_5":"source",
				"Column_6":"severity","Column_7":"ack","Column_8":"ack_time","Column_9":"actor_id","Column_10":"ack_comment","Column_14":"active",
				"Column_17":"ack_required","Column_19":"quality","Column_20":"value","Column_21":"kind","Column_22":"prev_active_time","Column_23":"group"};
			var newCols = {};
			var temp = [];
			for (let i = 0; i < tableview.Columns.length; i++)
			{
				var key = Object.keys(tableview.Columns[i])[0];
				var id = convert[key];
				newCols[id] = tableview.Columns[i][key];
				temp.push({'Id':id, 'Index':newCols[id].Index});
			}
			//правка индексов
			temp = temp.sort((a, b) => a.Index - b.Index);
			for (let i = 0; i < temp.length; i++)
				newCols[temp[i].Id].Index = i;
			//спец столбцы
			if (newCols["prev_active_time"] != undefined)
			{
				tableview.Config = [
					{"Id":"kind", "Title":"Тип события", "SortMode":0, "VisibleInTable":true, "ModelType":"int4", "ItsCustom":true},
					{"Id":"prev_active_time", "Title":"Время предшествующей активации", "SortMode":0, "VisibleInTable":true, "ModelType":"timestamp", "ItsCustom":true}
					];
			}
			tableview.Columns = newCols;
		}

		Columns.SetColumnsCfg(JSON.stringify(tableview.Config));

		//if (tableview.Version==2)...
		for (let i = 0; i < Columns.Length; i++)
		if (Columns[i].guiFlag)
		{
			var key = Columns[i].Id;
			if (tableview.Columns[key] == undefined) continue;
			Columns[i].Title = tableview.Columns[key].Title;
			Columns[i].Width = tableview.Columns[key].Width;
			Columns[i].Hidden = tableview.Columns[key].Hidden;
			Columns[i].WidthResizeMode = tableview.Columns[key].WidthResizeMode;
			Columns[i].Font = tableview.Columns[key].Font;
			Columns[i].TitleFont = tableview.Columns[key].TitleFont;
			Columns[i].CustomTimeFormat = tableview.Columns[key].CustomTimeFormat;
			// Формируем порядок столбцов
			var columnIndex = tableview.Columns[key].Index;
			if (columnIndex != null)
				Columns[i].ColIndex = columnIndex;
		}
		RowHeight.Value = tableview.RowHeight;
		HeaderHeight.Value = tableview.TitleHeight;
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + tableviewPath + ": " + error);
		Columns.SetColumnsCfg("");
		SetDefaultView();
		result = false;
	}
}
else
{
	Columns.SetColumnsCfg("");
	SetDefaultView();
}
VersionColumns.Inc();
VersionWidth.Inc();
VersionVisible.Inc();

//SORTING
var sortingPath = File.CombinePath(ConfigurationFolder.Path, "sorting.json");
if (File.Exists(sortingPath))
{
	//log("Загрузка параметров сортировки из файла "  + sortingPath);
	try
	{
		var json = File.ReadTextFile(sortingPath);
		var sorting = JSON.parse(json);
		if (sorting.Version == undefined)
		{
			var newCols = {};
			//в разных ветках номера меняются поэтому используем цикл
			for (let i = 0; i < sorting.Columns.length; i++)
			{
				if (sorting.Columns[i]["Colum_1"] != undefined) newCols["time"] = sorting.Columns[i]["Colum_1"];
				if (sorting.Columns[i]["Colum_2"] != undefined) newCols["active_time"] = sorting.Columns[i]["Colum_2"];
				if (sorting.Columns[i]["Colum_3"] != undefined) newCols["deactive_time"] = sorting.Columns[i]["Colum_3"];
				if (sorting.Columns[i]["Colum_4"] != undefined) newCols["message"] = sorting.Columns[i]["Colum_4"];
				if (sorting.Columns[i]["Colum_5"] != undefined) newCols["source"] = sorting.Columns[i]["Colum_5"];
				if (sorting.Columns[i]["Colum_6"] != undefined) newCols["severity"] = sorting.Columns[i]["Colum_6"];
				if (sorting.Columns[i]["Colum_7"] != undefined) newCols["ack"] = sorting.Columns[i]["Colum_7"];
				if (sorting.Columns[i]["Colum_8"] != undefined) newCols["ack_time"] = sorting.Columns[i]["Colum_8"];
				if (sorting.Columns[i]["Colum_9"] != undefined) newCols["actor_id"] = sorting.Columns[i]["Colum_9"];
				if (sorting.Columns[i]["Colum_10"] != undefined) newCols["ack_comment"] = sorting.Columns[i]["Colum_10"];
				if (sorting.Columns[i]["Colum_14"] != undefined) newCols["active"] = sorting.Columns[i]["Colum_14"];
				if (sorting.Columns[i]["Colum_17"] != undefined) newCols["ack_required"] = sorting.Columns[i]["Colum_17"];
				if (sorting.Columns[i]["Colum_19"] != undefined) newCols["quality"] = sorting.Columns[i]["Colum_19"];
				if (sorting.Columns[i]["Colum_20"] != undefined) newCols["value"] = sorting.Columns[i]["Colum_20"];
				if (sorting.Columns[i]["Colum_21"] != undefined) newCols["kind"] = sorting.Columns[i]["Colum_21"];
				if (sorting.Columns[i]["Colum_22"] != undefined) newCols["prev_active_time"] = sorting.Columns[i]["Colum_22"];
				if (sorting.Columns[i]["Colum_23"] != undefined) newCols["group"] = sorting.Columns[i]["Colum_23"];
			}
			sorting.Columns = newCols;
		}

		//if (sorting.Version==2)...
		for (let i = 0; i < Columns.Length; i++)
		if (Columns[i].guiFlag)
		{
			var key = Columns[i].Id;
			if (sorting.Columns[key] == undefined) continue;
			Columns[i].SortingEnabled = sorting.Columns[key].SortingEnabled;
			Columns[i].SortPriority = sorting.Columns[key].SortPriority;
			Columns[i].SortOrder = sorting.Columns[key].SortOrder;
		}
		
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + sortingPath + ": " + error);
		SetDefaultSorting();
		result = false;
	}
}
else
{
	SetDefaultSorting();
}
VersionSort.Inc();

return result;]]>
			</body>
		</do>
		<object access-modifier="private" name="Columns" display-name="Columns" uuid="83d3f1e1-38e3-447a-8dde-dd3497b0c3ce" base-type="" base-type-id="" ver="2" cardinal="31">
			<object access-modifier="private" name="modelType" display-name="modelType" uuid="748ff1ec-7d17-4154-a06f-3c503d3ebce9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="userFlag" display-name="userFlag" uuid="fafc49b3-dca2-48f4-a6b3-ee58c0a6ac92" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
			<do access-modifier="private" name="SetColumnsCfg" display-name="SetColumnsCfg" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[userDataJson = userJson;

var columns = [];
function AddCol(id,title,sortmode,vtable,mtype,custom)
{
	var col = {};
	col.Id = id;
	col.Title = title;//def
	col.SortMode = sortmode;
	col.VisibleInTable = vtable;
	col.ModelType = mtype;
	col.ItsCustom = custom;
	columns.push(col);
}

//visible columns 15
AddCol(Static.Time.Id,"Время генерации",0,true,"timestamp", false);//Colum_1
AddCol(Static.ActiveTime.Id,"Время срабатывания",0,true,"timestamp", false);//Colum_2
AddCol(Static.DeactiveTime.Id,"Время деактивации",0,true,"timestamp", false);//Colum_3
AddCol(Static.Message.Id,"Сообщение",0,true,"string", false);//Colum_4
AddCol(Static.Source.Id,"Источник события",0,true,"string", false);//Colum_5
AddCol(Static.Severity.Id,"Важность",0,true,"int4", false);//Colum_6
AddCol(Static.Ack.Id,"Квитировано",1,true,"bool", false);//Colum_7
AddCol(Static.AckTime.Id,"Время квитирования",0,true,"timestamp", false);//Colum_8
AddCol(Static.Actor.Id,"Пользователь",0,true,"string", false);//Colum_9
AddCol(Static.Comment.Id,"Комментарий",0,true,"string", false);//Colum_10
AddCol(Static.Active.Id,"Активность",1,true,"bool", false);//Colum_14
AddCol(Static.AckRequired.Id,"Квитировать",1,true,"bool", false);//Colum_17
AddCol(Static.Quality.Id,"Качество сигнала",0,true,"int4", false);//Colum_19
AddCol(Static.Value.Id,"Значение сигнала",0,true,"variant", false);//Colum_20
AddCol(Static.Group.Id,"Группа важности",1,true,"string", false);//Colum_23

//user columns
if (userDataJson=="") userDataJson="[]";
var extObj = JSON.parse(userDataJson);
for (let i = 0; i < extObj.length; i++)
	columns.push(extObj[i]);

//system columns 6
AddCol(Static.Condition.Id,"Условие",0,false,"string", false);//Colum_11_not_show
AddCol(Static.Subcondition.Id,"Подусловие",0,false,"string", false);//Colum_12_not_show
//AddCol(Static.Column_Quality.Id,"Качество",0,false,"int4", false);//Colum_13_not_show //пока столбец обязателен среди видимых, в системных он не нужен
AddCol(Static.Cookie.Id,"Куки",0,false,"variant", false);//Colum_15_not_show
AddCol("sound","Звуки",0,false,"string", false);//Colum_16_not_show
AddCol(Static.ObjectId.Id,"Идентификатор объекта на сервере",0,false,"variant", false);//Colum_18_not_show
AddCol(Static.SystemSource.Id,"Источник события",0,false,"string", false);//Colum_source_not_show

var customAttributes = [];
// ColumnSpec
if (TableView.modelForSpec.ColumnSpecAsJson == "")
{//TableModel.GetColumnSpecAsJson возвращает пустую спеку до выполнения Query.Reload, поэтому пока провайдер не научили выдавать стардартные атрибуты - будем их выуживать
	TableView.modelForSpec.Query.Reload();
	TableView.modelForSpec.ColumnSpecAsJson = TableView.modelForSpec.GetColumnSpecAsJson();
}
var spec = JSON.parse(TableView.modelForSpec.ColumnSpecAsJson);
var queryStandardIds = Array.from(spec.columns, (x) => x.name);

for (let i = 0; i < Columns.Length; i++)
	if (i < columns.length)
	{
		Columns[i].Id = columns[i].Id;
		Columns[i].Title = columns[i].Title;
		Columns[i].Description = columns[i].Title;
		Columns[i].SortMode = columns[i].SortMode;
		Columns[i].modelType = columns[i].ModelType;//модельный тип берём из конфигурации
		Columns[i].userFlag = columns[i].ItsCustom;
		Columns[i].guiFlag = columns[i].VisibleInTable;
		if (Columns[i].userFlag && !queryStandardIds.includes(columns[i].Id))
			customAttributes.push({'id':columns[i].Id,'column':columns[i].Id,'description':columns[i].Title,'type':columns[i].ModelType});
		if (columns[i].VisibleInTable == false)
			Columns[i].Hidden = true;
		Columns[i].ColIndex = i;

		//cache system
		if (columns[i].Id == Static.Condition.Id) Static.Condition.pos = i;
		if (columns[i].Id == Static.Subcondition.Id && columns[i].VisibleInTable == false) Static.Subcondition.pos = i;
		if (columns[i].Id == Static.Cookie.Id) Static.Cookie.pos = i;
		if (columns[i].Id == Static.ObjectId.Id) Static.ObjectId.pos = i;
		if (columns[i].Id == Static.SystemSource.Id && columns[i].VisibleInTable == false) Static.SystemSource.pos = i;

		//cache visible
		if (columns[i].Id == Static.Time.Id) Static.Time.pos = i;
		if (columns[i].Id == Static.ActiveTime.Id) Static.ActiveTime.pos = i;
		if (columns[i].Id == Static.DeactiveTime.Id) Static.DeactiveTime.pos = i;
		if (columns[i].Id == Static.Message.Id) Static.Message.pos = i;
		if (columns[i].Id == Static.Source.Id && columns[i].VisibleInTable == true) Static.Source.pos = i;
		if (columns[i].Id == Static.Severity.Id) Static.Severity.pos = i;
		if (columns[i].Id == Static.Ack.Id) Static.Ack.pos = i;
		if (columns[i].Id == Static.AckTime.Id) Static.AckTime.pos = i;
		if (columns[i].Id == Static.Actor.Id) Static.Actor.pos = i;
		if (columns[i].Id == Static.Comment.Id) Static.Comment.pos = i;
		if (columns[i].Id == Static.Active.Id) Static.Active.pos = i;
		if (columns[i].Id == Static.AckRequired.Id) Static.AckRequired.pos = i;
		if (columns[i].Id == Static.Quality.Id) Static.Quality.pos = i;
		if (columns[i].Id == Static.Value.Id) Static.Value.pos = i;
		if (columns[i].Id == Static.Group.Id) Static.Group.pos = i;
	}
	else
	{
		Columns[i].Id = "";
		Columns[i].Title = "";
		Columns[i].Description = "";
		Columns[i].Hidden = true;
		Columns[i].modelType = "";
		Columns[i].userFlag = false;
		Columns[i].guiFlag = false;
		Columns[i].ColIndex = i;
	}
//настраиваем атрибуты в провайдерах
CustomAttributes = JSON.stringify(customAttributes);]]>
				</body>
				<param access-modifier="private" name="userJson" display-name="" uuid="82c10b5c-3669-416d-bc17-4ffc8fb383ab" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</do>
			<object access-modifier="private" name="guiFlag" display-name="guiFlag" uuid="04249a31-b79d-4359-87be-b07feaabd83c" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="Id" display-name="Id" uuid="31fdd02e-4424-4e86-8734-258bdab5fca7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="Title" display-name="Title" uuid="cbcf93a6-c87d-40ab-abe8-aa90a35ede3c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="Description" display-name="Description" uuid="cb13c9c3-3e49-4926-bbaf-01ecb35fb934" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="ColIndex" display-name="ColIndex" uuid="45fd22bf-cc4d-454b-9a94-2a1e27b8b3dd" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
			<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
				<body kind="om">
					<![CDATA[return ColIndex;]]>
				</body>
			</do>
			<object access-modifier="private" name="Width" display-name="Width" uuid="5079abe5-820f-44e1-ba85-6343e77d37bf" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="WidthResizeMode" display-name="WidthResizeMode" uuid="595f0ff6-a0b7-424b-b93f-4910680056ec" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="Hidden" display-name="Hidden" uuid="eae7d785-3841-40df-8406-f07a3f5e74dc" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="Font" display-name="Font" uuid="2a92f344-a731-45c1-9041-772d81a158bb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="TitleFont" display-name="TitleFont" uuid="d4736745-1d6c-4e44-a7cf-4ab3592e14ce" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="SortingEnabled" display-name="SortingEnabled" uuid="becece96-bccd-43ba-9d57-27f6909327c3" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="SortOrder" display-name="SortOrder" uuid="a02092b0-97f7-4579-9f27-6070a9620729" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="SortPriority" display-name="SortPriority" uuid="3cf40cf0-98ea-44d2-be95-03ffff12d1ea" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="SortMode" display-name="SortMode" uuid="9e0244c6-1c22-4657-b0e9-b6b04f9d0cc9" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="CustomTimeFormat" display-name="CustomTimeFormat" uuid="626ae14f-91d9-4c96-ba15-385a52a40981" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		</object>
		<object access-modifier="private" name="modelForSpec" display-name="modelForSpec" uuid="290b6b75-5018-423b-a7f4-ed48a785d909" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5" description="" cardinal="1">
			<designed target="Frozen" value="false" ver="5"/>
			<designed target="MaxRowCount" value="10000" ver="5"/>
			<designed target="OptOfProcessingEvents" value="0" ver="5"/>
			<object access-modifier="private" name="Query" display-name="Query" uuid="3d6e5545-e980-496c-9a7a-a4ed68a3707d" base-type="ApAlarmQuery" base-type-id="f66d4d41-8e9d-4eee-8b83-702143b5768d" ver="5" description="" cardinal="1">
				<designed target="Mode" value="3" ver="5"/>
				<designed target="HistoricalRangeStart" value="0" ver="5"/>
				<designed target="HistoricalRangeEnd" value="0" ver="5"/>
				<designed target="Filter" value="" ver="5"/>
				<designed target="HistoricalFilter" value="" ver="5"/>
				<designed target="Active" value="true" ver="5"/>
				<designed target="RemoveAckedInactive" value="false" ver="5"/>
				<designed target="RefreshAtStart" value="false" ver="5"/>
				<designed target="HistoryPreloadInterval" value="0" ver="5"/>
				<designed target="HistoryExpandInterval" value="0" ver="5"/>
				<designed target="HistoricalEventsChronology" value="0" ver="5"/>
				<designed target="MergeMode" value="0" ver="5"/>
				<designed target="OperativeBufferSize" value="0" ver="5"/>
				<designed target="DataProcessing" value="" ver="5"/>
				<designed target="CustomAttributes" value="" ver="5"/>
			</object>
			<object access-modifier="private" name="ColumnSpecAsJson" display-name="ColumnSpecAsJson" uuid="18cc4190-4b0d-4dfe-83ba-f24fa8143bb6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		</object>
		<object access-modifier="private" name="Static" display-name="Static" uuid="b5999231-675c-406d-a7f0-e6d1fb1ee129" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5" description="" cardinal="1">
			<object access-modifier="private" name="Condition" display-name="Condition" uuid="d28e2a11-fba9-4eda-bee7-6654cec80f08" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="8a15bafd-524d-45ca-8343-464f00849dd8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="Id" display-name="Id" uuid="58e27f22-4c3e-4776-b33c-91127b9b3677" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="condition_name"/>
			</object>
			<object access-modifier="private" name="Subcondition" display-name="Subcondition" uuid="85b5c1a3-6d12-4678-83f4-23ee0896061b" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="f149aec5-3dc2-4ee0-9033-92f5d888aae9" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="baa4a5a2-cce9-4d96-aa6f-b0586154367e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="subcondition_name"/>
			</object>
			<object access-modifier="private" name="Cookie" display-name="Cookie" uuid="74a7696e-7616-4199-a035-55275c7cb6f1" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="af6d7b75-6a80-4e82-96fa-13cc6ee6abfe" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="cce57d0e-831a-487a-884b-a68d5db849e7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<init target="Id" ver="5" value="cookie"/>
			</object>
			<object access-modifier="private" name="ObjectId" display-name="ObjectId" uuid="0c182fc4-39a4-4048-8959-31062ecee11a" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="b6ec9c25-8d17-4f34-91d3-3162c2dd43ca" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="36f87e3c-32db-4acc-b9f1-56ea0f0128d6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="object_id"/>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
			</object>
			<object access-modifier="private" name="SystemSource" display-name="SystemSource" uuid="1293840e-caeb-4d45-9150-6edce771954f" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="b93c580d-df97-46d7-afa7-1764f6da6005" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="Id" display-name="Id" uuid="193883c2-93da-4adc-923c-bdd281a88e0f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="source"/>
			</object>
			<object access-modifier="private" name="Time" display-name="Time" uuid="02476691-3f6b-45b9-9750-1ffc23a3fbf0" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="5a782e29-6da2-4bd4-84bc-7ccafccc3e7e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="9059511b-4b1c-4304-92d8-9b1360879c22" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="time"/>
			</object>
			<object access-modifier="private" name="ActiveTime" display-name="ActiveTime" uuid="994a0e71-ec16-4ee9-acec-c9743c34a9e1" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="be8ea34d-3b0b-43d5-9088-63b2df45a909" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="Id" display-name="Id" uuid="81537e55-b9a4-4683-a741-58ae47958bb3" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="active_time"/>
			</object>
			<object access-modifier="private" name="DeactiveTime" display-name="DeactiveTime" uuid="377c7fbe-aa42-4ffb-bb1f-95a413a6f9ca" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="14b4b693-6437-470c-96cb-90f71caa235f" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="9446a69f-5f2e-42e6-bc90-85fcaf3a7a5e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="deactive_time"/>
			</object>
			<object access-modifier="private" name="Message" display-name="Message" uuid="49d74931-954d-4d9e-bb32-69772488dd4e" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return Columns[pos].Title;]]>
					</body>
				</do>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="pos" display-name="pos" uuid="5eb23a5f-348c-46ac-a2f7-25a3b3c6078e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="aba89e86-a5f0-459b-821f-79eab607e255" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="message"/>
			</object>
			<object access-modifier="private" name="Source" display-name="Source" uuid="8001258e-705a-496f-90c0-388d2c31c69b" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="2f1d303c-48a8-4f9e-a900-ddf240955771" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return Columns[pos].Title;]]>
					</body>
				</do>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="Id" display-name="Id" uuid="fbb7566e-8d67-42b6-9a23-cead2691cf4d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5">
					<expr>
						<![CDATA[ShowRelativeTag?"area_path":"source"]]>
					</expr>
				</init>
			</object>
			<object access-modifier="private" name="Severity" display-name="Severity" uuid="9abd3761-626b-4f2f-8907-00ae92fe4abf" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="b1b41b78-f81d-4744-8f5d-adcab3ad0064" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return Columns[pos].Title;]]>
					</body>
				</do>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="Id" display-name="Id" uuid="ec739413-f4e3-4d54-88b8-ca6aee1e7ed3" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="severity"/>
			</object>
			<object access-modifier="private" name="Ack" display-name="Ack" uuid="271186cd-9df0-457a-9071-36be2551c982" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="34863b8d-ad19-4456-9ee9-754214929752" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return Columns[pos].Title;]]>
					</body>
				</do>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="Id" display-name="Id" uuid="49f62925-4fab-4592-9034-300b3623eabe" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="ack"/>
			</object>
			<object access-modifier="private" name="AckTime" display-name="AckTime" uuid="f4d55ae0-f61b-41b2-8bf6-a3de1ecacd28" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="436a6930-a78d-4ff6-be30-98d05784a499" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="465724e4-1ee2-41c3-8216-f9b41b9c3d51" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="ack_time"/>
			</object>
			<object access-modifier="private" name="Actor" display-name="Actor" uuid="577144cc-0b6c-4425-8623-3bd52297e47a" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="ca607d7f-7adf-4bbf-9911-da0992f54f12" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="e65bb1c0-fe96-4803-877e-efa0fec80656" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="actor_id"/>
			</object>
			<object access-modifier="private" name="Comment" display-name="Comment" uuid="fd767511-1224-4329-8302-60703a853ce4" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="49e36995-ae2e-49e6-bfe7-834475e92370" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="ffbd0381-27fb-4c83-aeee-d644be93f228" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="ack_comment"/>
			</object>
			<object access-modifier="private" name="Active" display-name="Active" uuid="3c87b34f-42c4-4f4b-adc5-197df0c19f27" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="df687e9a-4047-4dc4-8f19-3ba4be60d777" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="cb205dd7-12bc-46ab-bc2c-7d8752568092" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="active"/>
			</object>
			<object access-modifier="private" name="AckRequired" display-name="AckRequired" uuid="184fa611-b8a0-4441-868a-684a0ea45580" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="f8fc1d82-6418-4a9f-9823-fc75dff7c104" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[return Columns[pos].GetIndex();]]>
					</body>
				</do>
				<object access-modifier="private" name="Id" display-name="Id" uuid="29e61164-faff-44c5-86db-2e4d44092daa" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="ack_required"/>
			</object>
			<object access-modifier="private" name="Quality" display-name="Quality" uuid="7cddb012-eda5-4adc-b2ac-a7163cc3374e" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="c6163691-8024-4ec4-a569-e6c0d00501df" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="50844dbd-d83e-478b-b4f6-972ac2be879c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="quality"/>
			</object>
			<object access-modifier="private" name="Value" display-name="Value" uuid="2d6dd3fc-4488-4788-809c-98f006521ebb" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="ec5bd1eb-5a31-4001-8a52-62481c8b6eb0" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="e43f4b52-cf80-41f0-b2ae-b7f12339e83f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="value"/>
			</object>
			<object access-modifier="private" name="Group" display-name="Group" uuid="0c044c2c-272c-4d04-9c2b-c6d2a48b4109" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
				<object access-modifier="private" name="pos" display-name="pos" uuid="6c8e580c-4c00-47d4-b8a5-19051ab8277a" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Id" display-name="Id" uuid="22aff3c9-c207-437c-aa9b-322d3a47d18e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<init target="Id" ver="5" value="group"/>
			</object>
		</object>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var tableviewPath = File.CombinePath(ConfigurationFolder.Path, "tableview.json");
//log("Сохранение настроек вида таблицы в файл "  + tableviewPath);
try
{
	var tableView = {};
	tableView.Version = 2;
	tableView.Config = JSON.parse(userDataJson==""?"[]":userDataJson);
	tableView.Columns = {};
	for (let i = 0; i < Columns.Length; i++)
	if (Columns[i].guiFlag)
	{
		var column = {};
		column.Title = Columns[i].Title;
		column.Width = Columns[i].Width;
		column.Hidden = Columns[i].Hidden;
		column.WidthResizeMode = Columns[i].WidthResizeMode;
		column.Index = Columns[i].GetIndex();
		column.Font = Columns[i].Font;
		column.TitleFont = Columns[i].TitleFont;
		column.CustomTimeFormat = Columns[i].CustomTimeFormat;
		tableView.Columns[Columns[i].Id] = column;
	}
	// Записываем высоту строки и заголовка
	tableView.RowHeight = RowHeight.Value;
	tableView.TitleHeight = HeaderHeight.Value;

	File.WriteTextFile(tableviewPath, JSON.stringify(tableView, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + tableviewPath + ": " + error);
}

// Имеем отдельный файл с параметрами сортировки, хотя можно было бы сохранять эту инфрмацию в tableview.json

var sortingPath = File.CombinePath(ConfigurationFolder.Path, "sorting.json");
//log("Сохранение параметров сортировки в файл "  + sortingPath);
try
{
	var sorting = {};
	sorting.Version = 2;
	sorting.Columns = {};
	for (let i = 0; i < Columns.Length; i++)
	if (Columns[i].guiFlag)
	{
		var column = {};
		column.SortingEnabled = Columns[i].SortingEnabled;
		column.SortPriority = Columns[i].SortPriority;
		column.SortOrder = Columns[i].SortOrder;
		sorting.Columns[Columns[i].Id] = column;
	}

	File.WriteTextFile(sortingPath, JSON.stringify(sorting, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + sortingPath + ": " + error);
}]]>
			</body>
		</do>
		<do access-modifier="private" name="GetDefaultColumnWidth" display-name="GetDefaultColumnWidth" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[if (columnId == Static.Time.Id) return 145;
if (columnId == Static.ActiveTime.Id) return 145;
if (columnId == Static.DeactiveTime.Id) return 145;
if (columnId == Static.Message.Id) return 700;
if (columnId == Static.AckTime.Id) return 130;
if (columnId == Static.Group.Id) return 120;
return 100;]]>
			</body>
			<param access-modifier="private" name="columnId" display-name="" uuid="a38fbb07-ba11-40c1-96f9-c9075c13655c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="GetDefaultColumnVisible" display-name="GetDefaultColumnVisible" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="om">
				<![CDATA[//todo дублирование кода с загрузчиком конфиги из файла
if (columnId == Static.Time.Id) return true;
if (columnId == Static.Message.Id) return true;

return false;
]]>
			</body>
			<param access-modifier="private" name="columnId" display-name="" uuid="9d21f8d5-95cd-4451-8e97-eacd53adc294" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="GetSelectableColumns" display-name="GetSelectableColumns" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//выдаём столбцы в порядке отображения в диалоге
var obj = [];
obj.push(Static.Time.Id);
obj.push(Static.ActiveTime.Id);
obj.push(Static.DeactiveTime.Id);
obj.push(Static.Severity.Id);
obj.push(Static.Group.Id);
obj.push(Static.Message.Id);
obj.push(Static.Source.Id);

for (let i = 0; i < Columns.Length; i++)
	if (Columns[i].userFlag)
		obj.push(Columns[i].Id);

obj.push(Static.Ack.Id);
obj.push(Static.AckTime.Id);
obj.push(Static.Actor.Id);
obj.push(Static.Comment.Id);

return JSON.stringify(obj);]]>
			</body>
		</do>
		<object access-modifier="private" name="itsDefaultSorting" display-name="itsDefaultSorting" uuid="314d80b5-63a2-43b3-9824-3d99884c28f9" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
		<do access-modifier="private" name="CheckDefaultSorting" display-name="CheckDefaultSorting" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// Функция проверки сортировки по умолчанию
// сначала по столбцу "Время генерации" - по убыванию, затем по столбцу "Время срабатывания" - по убыванию

// сортировкка по умолчанию
var c0 = Static.Time.pos;
var c1 = Static.ActiveTime.pos;

var defSet =
	Columns[c0].SortingEnabled && Columns[c0].SortOrder == 1 && Columns[c0].SortPriority == 2 &&
	Columns[c1].SortingEnabled && Columns[c1].SortOrder == 1 && Columns[c1].SortPriority == 1;

// проверяем, что нет другой сортировки
for (let i = 0; i < Columns.Length; i++)
	if (Columns[i].SortingEnabled && i!=c0 && i!=c1 && Columns[i].guiFlag)
		defSet = false;

itsDefaultSorting = defSet;

followRow = 
//по убыванию - новые сверху - sortOrder=1
Columns[Static.Time.pos].SortingEnabled &&
Columns[Static.Time.pos].SortOrder == 1 ||
Columns[Static.ActiveTime.pos].SortingEnabled &&
Columns[Static.ActiveTime.pos].SortOrder == 1 ? "top" :
//по возрастанию - новые снизу - sortOrder=0
Columns[Static.Time.pos].SortingEnabled &&
Columns[Static.Time.pos].SortOrder == 0 ||
Columns[Static.ActiveTime.pos].SortingEnabled &&
Columns[Static.ActiveTime.pos].SortOrder == 0 ? "bottom" : "";
]]>
			</body>
		</do>
		<object access-modifier="private" name="VersionColumns" display-name="VersionColumns" uuid="0d34a1aa-f5c1-4a6d-a386-730c43bc5482" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1">
			<do access-modifier="private" name="Inc" display-name="Inc" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[VersionColumns = VersionColumns+1;]]>
				</body>
			</do>
		</object>
		<object access-modifier="private" name="VersionSort" display-name="VersionSort" uuid="32facd42-fb3f-4e3a-95f6-ce48a0ca75b4" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1">
			<do access-modifier="private" name="Inc" display-name="Inc" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[CheckDefaultSorting();
VersionSort = VersionSort+1;]]>
				</body>
			</do>
		</object>
		<do access-modifier="private" name="SetDefaultSorting" display-name="SetDefaultSorting" ver="5" type="" type-id="">
			<body kind="javascript">
				<![CDATA[var sortArray = [];
sortArray.push({'Id':'time', 'SortOrder':1, 'SortPriority':2});
sortArray.push({'Id':'active_time', 'SortOrder':1, 'SortPriority':1});
SetSorting(JSON.stringify(sortArray));]]>
			</body>
		</do>
		<do access-modifier="private" name="SetSorting" display-name="SetSorting" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[//Функция включения сортировки

//log(jsonData);
var inputObject = JSON.parse(jsonData);

var ColumnOper = [];
for (let i = 0; i < Columns.Length; i++)
	if (Columns[i].guiFlag)
		ColumnOper.push(Columns[i]);

var columns; // Массив столбцов

// Сбрасываем текущую сортировку
for (let i = 0; i < Columns.Length; i++)
	Columns[i].SortingEnabled = false;

//Применяем сортировку к активной таблице
for (let i = 0; i < inputObject.length; i++)
{
	var id = inputObject[i].Id;

	for (let j = 0; j < Columns.Length; j++)
	{
		if (Columns[j].Id == id)
		{
			Columns[j].SortPriority = inputObject[i].SortPriority;
			Columns[j].SortOrder = inputObject[i].SortOrder;
			Columns[j].SortingEnabled = true;
			break;
		}
	}
}
VersionSort.Inc();

SaveSettings();]]>
			</body>
			<param access-modifier="private" name="jsonData" display-name="" uuid="fcc75f0f-33b4-4afc-9012-24850af8e72d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="SwitchSorting" display-name="SwitchSorting" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// считываем сортировку с упорядочиванием приоритетов
var sortArray = [];
for (let i = 0; i < Columns.Length; i++)
	if (Columns[i].guiFlag)
	if (Columns[i].Id != ColumnId && Columns[i].SortingEnabled)// в любом случае требуется изымать столбец из списка приоритетов, что проще делать при считывании
	{
		var p = Columns[i].SortPriority;
		sortArray[p] = {};
		sortArray[p].Id = Columns[i].Id;
		sortArray[p].SortOrder = Columns[i].SortOrder;
		sortArray[p].SortPriority = Columns[i].SortPriority;
	}

// убираем пустые
if (sortArray.length>0)
	for (let i = sortArray.length-1; i>=0; i--)
		if (sortArray[i] == null)
			sortArray.splice(i, 1);

// добавляем новую сортировку
if (SortingEnabled==false)
{
	var sortItem = {};
	sortItem.Id = ColumnId;
	sortItem.SortOrder = 0;
	sortArray.splice(0,0,sortItem);
}
else if (SortOrder == 0)
{
	var sortItem = {};
	sortItem.Id = ColumnId;
	sortItem.SortOrder = 1;
	sortArray.splice(0,0,sortItem);
}

// переставляем приоритеты
for (let i = 0; i < sortArray.length; i++)
	sortArray[i].SortPriority = i+1;

// задаём новую сортировку
SetSorting(JSON.stringify(sortArray));]]>
			</body>
			<param access-modifier="private" name="ColumnId" display-name="" uuid="697566d0-8c43-46e5-b3e9-7a4002deaddd" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			<param access-modifier="private" name="SortingEnabled" display-name="" uuid="1748f027-f481-49b7-a108-340be54e0757" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
			<param access-modifier="private" name="SortOrder" display-name="" uuid="a8431fb5-5889-4cd1-a4b0-928f028a1df7" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="4"/>
		</do>
		<do access-modifier="private" name="GetColPos" display-name="GetColPos" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[//это чисто VUшная функция. отвечать на системные id здесь не требуется
i: int4 = 0;
while (i < Columns.Length)
{
	if (Columns[i].Id==id && Columns[i].guiFlag/*исключаем попадение в системный столбец*/) return i;
	i +=1;
}
//todo вообще, если до сюдова дошли - это ошибка
return -1;]]>
			</body>
			<param access-modifier="private" name="id" display-name="" uuid="f9b95f15-a0b5-43f7-91c6-2c0bbf7e0f83" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<object access-modifier="private" name="VersionWidth" display-name="VersionWidth" uuid="63d3f6aa-94c0-43a3-aad0-e9099634510d" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1">
			<do access-modifier="private" name="Inc" display-name="Inc" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[VersionWidth = VersionWidth+1;]]>
				</body>
			</do>
		</object>
		<object access-modifier="private" name="VersionVisible" display-name="VersionVisible" uuid="09d846e7-34a3-42d1-ac2c-2d54bd3f2867" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1">
			<do access-modifier="private" name="Inc" display-name="Inc" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[VersionVisible = VersionVisible+1;]]>
				</body>
			</do>
		</object>
		<object access-modifier="private" name="userDataJson" display-name="userDataJson" uuid="5c669182-2008-48e3-9d79-fa0b17ebd790" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="RowHeight" display-name="RowHeight" uuid="a509ee11-0099-4ed5-bfb7-15412692bd28" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="HeaderHeight" display-name="HeaderHeight" uuid="a198ef07-e75d-4041-b8d6-c59c366e9aa8" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="CustomAttributes" display-name="CustomAttributes" uuid="a5269e43-fabc-4196-868e-7df77c46a597" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="GetColumnSpecAsJson" display-name="GetColumnSpecAsJson" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="om">
				<![CDATA[return modelForSpec.ColumnSpecAsJson;]]>
			</body>
		</do>
		<object access-modifier="private" name="followRow" display-name="followRow" uuid="5da4c439-74df-4e03-b3bb-d1bc0fa54a78" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
	</object>
	<do access-modifier="private" name="IsAbsolutePath" display-name="IsAbsolutePath" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="filename" display-name="" uuid="a6c1c295-44bf-4694-b5b4-210d6c5d6f62" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<body kind="javascript">
			<![CDATA[if (!File.Exists("/opt/"))
{
	if (/^(.+):(\\.*)$/.test(filename))
		return true;
	else
		return false;
}
else
{
	if (/^\//.test(filename))
		return true;
	else
		return false;
}]]>
		</body>
	</do>
	<do access-modifier="private" name="GetProgramDataFolder" display-name="GetProgramDataFolder" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[//#28805 пока требуется запускать функцию внешнего модуля в ОМ
return unit.ProductInfo.GetProgramDataFolder();]]>
		</body>
	</do>
	<object access-modifier="private" name="EventSettings" display-name="EventSettings" uuid="5bb76feb-82e0-4551-93b1-4dad355a8866" base-type="" base-type-id="" ver="5" description="" cardinal="1">
		<object access-modifier="private" name="DecoratorSettings" display-name="DecoratorSettings" uuid="6135ad4d-6651-4bfe-9b72-74ab9ee00011" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
			<designed target="Frozen" value="false" ver="3"/>
			<designed target="MaxRowCount" value="2147483647" ver="3"/>
			<designed target="OptOfProcessingEvents" value="0" ver="5"/>
		</object>
		<object access-modifier="private" name="DefColBackground" display-name="DefColBackground" uuid="0262dfeb-6d5f-4643-88bf-44f41d557624" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
		<object access-modifier="private" name="DefColText" display-name="DefColText" uuid="84acfae0-eba8-4588-a62c-7f339e544bb1" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
		<object access-modifier="private" name="AckColBackground" display-name="AckColBackground" uuid="75eb7781-8fc6-4d95-9acb-a16648e2be5c" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
		<object access-modifier="private" name="AckColText" display-name="AckColText" uuid="6fddb3b1-9883-40ea-8227-fff8696fe157" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
		<object access-modifier="private" name="SelectEventsCol" display-name="SelectEventsCol" uuid="d4042ea9-80e2-4355-842d-5b435eb9bbe1" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
		<object access-modifier="private" name="AckStyleMode" display-name="AckStyleMode" uuid="b4c48968-b9bc-45c4-99bf-e64cde66187c" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
		<object access-modifier="private" name="BlinkingColumns" display-name="BlinkingColumns" uuid="3fac9d5a-408a-49c8-a594-35f1d5c4f979" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<object access-modifier="private" name="BlinkAllColumns" display-name="BlinkAllColumns" uuid="40c5ae69-51db-459f-9bec-dc1fe64f005d" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
		<object access-modifier="private" name="CustomColors" display-name="CustomColors" uuid="bb3d95ce-b62d-4d4c-a167-4e20588fc6ba" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="4"/>
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[TableInitializer();

var filePath = File.CombinePath(ConfigurationFolder.Path, "eventstyles.json");
if (File.Exists(filePath))
{
	//log("Загрузка настроек событий из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var eventstyles = JSON.parse(json);
		
		if (eventstyles.Version==undefined)
		{
			eventstyles.BlinkColumns = 0x2;
			eventstyles.BlinkAllColumns = true;
			
			if (eventstyles.Table != null && eventstyles.Table.length > 0)
			{
				eventstyles.Table2 = [];
				for (let i = 0; i < eventstyles.Table.length; i++)
					{
						var item = {};
						item.activity = eventstyles.Table[i][0];
						item.subcondition = "";
						item.severity = eventstyles.Table[i][1];
						item.group = eventstyles.Table[i][2];
						item.background = eventstyles.Table[i][3];
						item.text = eventstyles.Table[i][4];
						//item.example = eventstyles.Table[i][5];//example dont saved
						item.blinking = eventstyles.Table[i][6];
						item.blinkingBackground = eventstyles.Table[i][7];
						item.blinkingText = eventstyles.Table[i][8];
						item.id = i;
						item.ackBackground = 0;
						item.ackText = 0;
						eventstyles.Table2.push(item);
					}
			}
		}
		else if (eventstyles.Version==1)
		{
			// признак выделения всей строки в отдельном поле
			eventstyles.BlinkAllColumns = (eventstyles.BlinkColumns & 0x8000) > 0;
			
			// порядок бит приводим к порядку столбцов в таблице
			var blinkColumns = eventstyles.BlinkColumns & 0xFF7FFF;
			if (eventstyles.BlinkColumns & 0x400) blinkColumns |= 0x800;
			if (eventstyles.BlinkColumns & 0x800) blinkColumns |= 0x1000;
			if (eventstyles.BlinkColumns & 0x1000) blinkColumns |= 0x2000;
			if (eventstyles.BlinkColumns & 0x2000) blinkColumns |= 0x400;
			if (eventstyles.BlinkColumns & 0x4000) blinkColumns |= 0x10000;
			if (eventstyles.BlinkColumns & 0x10000) blinkColumns |= 0x4000;
			if (eventstyles.BlinkColumns & 0x20000) blinkColumns |= 0x8000;
			eventstyles.BlinkColumns = blinkColumns;
		}
		if (eventstyles.BlinkColumns!=undefined)//eventstyles.Version==2
		{
			var obj = [];
			if (eventstyles.BlinkColumns & 0x1) obj.push(TableView.Static.Time.Id);
			if (eventstyles.BlinkColumns & 0x2) obj.push(TableView.Static.ActiveTime.Id);
			if (eventstyles.BlinkColumns & 0x4) obj.push(TableView.Static.DeactiveTime.Id);
			if (eventstyles.BlinkColumns & 0x8) obj.push(TableView.Static.Message.Id);
			if (eventstyles.BlinkColumns & 0x10) obj.push(TableView.Static.Source.Id);
			if (eventstyles.BlinkColumns & 0x20) obj.push(TableView.Static.Severity.Id);
			if (eventstyles.BlinkColumns & 0x40) obj.push(TableView.Static.Ack.Id);
			if (eventstyles.BlinkColumns & 0x80) obj.push(TableView.Static.AckTime.Id);
			if (eventstyles.BlinkColumns & 0x100) obj.push(TableView.Static.Actor.Id);
			if (eventstyles.BlinkColumns & 0x200) obj.push(TableView.Static.Comment.Id);
			if (eventstyles.BlinkColumns & 0x400) obj.push(TableView.Static.Active.Id);
			if (eventstyles.BlinkColumns & 0x800) obj.push(TableView.Static.AckRequired.Id);
			if (eventstyles.BlinkColumns & 0x1000) obj.push(TableView.Static.Quality.Id);
			if (eventstyles.BlinkColumns & 0x2000) obj.push(TableView.Static.Value.Id);
			if (eventstyles.BlinkColumns & 0x4000) obj.push("kind");
			if (eventstyles.BlinkColumns & 0x8000) obj.push("prev_active_time");
			if (eventstyles.BlinkColumns & 0x10000) obj.push(TableView.Static.Group.Id);
			eventstyles.BlinkingColumns = JSON.stringify(obj);
		}
		
		DefColBackground = eventstyles.DefColBackground;
		DefColText = eventstyles.DefColText;
		AckColBackground = eventstyles.AckColBackground;
		AckColText = eventstyles.AckColText;
		SelectEventsCol = eventstyles.SelectEventsCol;
		AckStyleMode = eventstyles.AckStyleMode;
		BlinkingColumns = eventstyles.BlinkingColumns;
		BlinkAllColumns = eventstyles.BlinkAllColumns;
		CustomColors = JSON.stringify(eventstyles.CustomColors);
		
		DecoratorSettings.Clear();
		if (eventstyles.Table2 != null && eventstyles.Table2.length > 0)
		{
			DecoratorSettings.InsertRows(0, eventstyles.Table2.length);
			for (let i = 0; i < eventstyles.Table2.length; i++)
			{
				DecoratorSettings.SetCellData(i,0,eventstyles.Table2[i].activity);
				DecoratorSettings.SetCellData(i,1,eventstyles.Table2[i].subcondition);
				DecoratorSettings.SetCellData(i,2,eventstyles.Table2[i].severity);
				DecoratorSettings.SetCellData(i,3,eventstyles.Table2[i].group);
				DecoratorSettings.SetCellData(i,4,eventstyles.Table2[i].background);
				DecoratorSettings.SetCellData(i,5,eventstyles.Table2[i].text);
				//DecoratorSettings.SetCellData(i,6,"");//example dont saved
				DecoratorSettings.SetCellData(i,7,eventstyles.Table2[i].blinking);
				DecoratorSettings.SetCellData(i,8,eventstyles.Table2[i].blinkingBackground);
				DecoratorSettings.SetCellData(i,9,eventstyles.Table2[i].blinkingText);
				DecoratorSettings.SetCellData(i,10,eventstyles.Table2[i].id);
				DecoratorSettings.SetCellData(i,11,eventstyles.Table2[i].ackBackground);
				DecoratorSettings.SetCellData(i,12,eventstyles.Table2[i].ackText);
			}
		}
		Version.Inc();
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "eventstyles.json");
//log("Сохранение настроек событий в файл "  + filePath);
try
{
	var events = {Version:3};
	events.Table2 = [];
	for (let i = 0; i < DecoratorSettings.GetRowCount(); i++)
	{
		var item = {};
		item.activity = DecoratorSettings.GetCellData(i,0);
		item.subcondition = DecoratorSettings.GetCellData(i,1);
		item.severity = DecoratorSettings.GetCellData(i,2);
		item.group = DecoratorSettings.GetCellData(i,3);
		item.background = DecoratorSettings.GetCellData(i,4);
		item.text = DecoratorSettings.GetCellData(i,5);
		//item.example = DecoratorSettings.GetCellData(i,6);//example dont saved
		item.blinking = DecoratorSettings.GetCellData(i,7);
		item.blinkingBackground = DecoratorSettings.GetCellData(i,8);
		item.blinkingText = DecoratorSettings.GetCellData(i,9);
		item.id = DecoratorSettings.GetCellData(i,10);
		item.ackBackground = DecoratorSettings.GetCellData(i,11);
		item.ackText = DecoratorSettings.GetCellData(i,12);
		events.Table2.push(item);
	}
	events.DefColBackground = DefColBackground;
	events.DefColText = DefColText;
	events.AckColBackground = AckColBackground;
	events.AckColText = AckColText;
	events.SelectEventsCol = SelectEventsCol;
	events.AckStyleMode = AckStyleMode;
	events.BlinkingColumns = BlinkingColumns;
	events.BlinkAllColumns = BlinkAllColumns;
	if (CustomColors != "")
		events.CustomColors = JSON.parse(CustomColors);
	
	File.WriteTextFile(filePath, JSON.stringify(events, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
		<do access-modifier="private" name="TableInitializer" display-name="TableInitializer" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (DecoratorSettings.GetColumnCount() > 0) return;
DecoratorSettings.AddColumn("activity","","","","string",false,true);
DecoratorSettings.AddColumn("subcondition","","","","string",false,true);
DecoratorSettings.AddColumn("severity","","","","string",false,true);
DecoratorSettings.AddColumn("group","","","","string",false,true);
DecoratorSettings.AddColumn("background","","","","uint4",false,true);
DecoratorSettings.AddColumn("text","","","","uint4",false,true);
DecoratorSettings.AddColumn("example","","","","string",false,true);
DecoratorSettings.AddColumn("blinking","","","","string",false,true);
DecoratorSettings.AddColumn("blinkingBackground","","","","uint4",false,true);
DecoratorSettings.AddColumn("blinkingText","","","","uint4",false,true);
DecoratorSettings.AddColumn("id","","","","uint4",false,true);
DecoratorSettings.AddColumn("ackBackground","","","","uint4",false,true);
DecoratorSettings.AddColumn("ackText","","","","uint4",false,true);]]>
			</body>
		</do>
		<do access-modifier="private" name="GetBlinkingColumnsDefault" display-name="GetBlinkingColumnsDefault" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var obj = [];
obj.push(TableView.Static.ActiveTime.Id);
return JSON.stringify(obj);]]>
			</body>
		</do>
		<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Значения по умолчанию
DefColBackground = 0xffffffff;
DefColText = 0xff000000;
AckColBackground = 0xffffffff;
AckColText = 0xff000000;
SelectEventsCol = 0xff0080ff;
AckStyleMode = false;
BlinkingColumns = GetBlinkingColumnsDefault();
BlinkAllColumns = true;

Version.Inc();]]>
			</body>
		</do>
		<do access-modifier="private" name="MakeJSONstring" display-name="MakeJSONstring" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" form-by-id="true">
			<param access-modifier="private" name="inputString" display-name="" uuid="4c671fce-9734-4e23-b9dc-1062d9e0ae9b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			<body kind="javascript">
				<![CDATA[//Функция преобразует исходную строку в формат JSON вида ">": { "severity": 10 }"
//определяются логические операторы и происходит поэтапное формирование логических выражений из элементов массива и происходит формирование строки в JSON формате
var str = inputString;
var objectInfo = {};
var JSONStr = '';
var tempArray =[];

//Если пустая строка, то возвращаем "0" для того, чтобы в очередь не попадали значения
//if (inputString == "") return '{"severity": 0 }';

//Шаблон диапазона
var gapPattern = /\d+[-]\d+/;

//Заполняем массив символами строки
var commonArray = str.split(",");

//Фукнция получения выражения вида ">": { "severity": 10 }"
function MakeExpression(str,gap)
{
	let argument = str.match(/\d+/g);
	let expression = {};
	//Если имеем дело с диапазоном
	expression = {[gap]: {["data:" + `${columnId}`] : parseInt(argument[0])}};
	return expression
}

//Если элемент всего один и не диапазон
if (commonArray.length == 1 && !gapPattern.test(commonArray[0])) 
{
	objectInfo = MakeExpression(commonArray[0],"==");
	JSONStr = JSON.stringify(objectInfo);
	return JSONStr;
}

//Формирование JSON-строки
for (let i = 0; i < commonArray.length; i++)
{
	let tempObject = {};
	tempObject[`AND`] = [];
	if (gapPattern.test(commonArray[i]))
	{
		tempArray = commonArray[i].match(/\d+/g);
		tempObject[`AND`].push(MakeExpression(tempArray[0],">="));
		tempObject[`AND`].push(MakeExpression(tempArray[1],"<="));
		if (commonArray.length > 1)
		{
			if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
			objectInfo[`OR`].push(tempObject);
		}
		else objectInfo = tempObject;
	}
	else
	{
		if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
		objectInfo[`OR`].push(MakeExpression(commonArray[i],"=="));
	}
}

//записываем объект в виде строки
JSONStr = JSON.stringify(objectInfo);
return JSONStr;]]>
			</body>
			<param access-modifier="private" name="columnId" display-name="" uuid="0c99ea20-8195-4d6f-b565-d7d148110606" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="MakeObjectFormatDictionary" display-name="MakeObjectFormatDictionary" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Формирование наборов форматов
var formatDictionary = {};

formatDictionary = {};
formatDictionary[`format_name`] = formatName;
formatDictionary[`format`] = {};
formatDictionary[`format`][`enum_format`] = JSON.parse(enumCondition);

return JSON.stringify(formatDictionary,null,2);]]>
			</body>
			<param access-modifier="private" name="formatName" display-name="" uuid="1e096541-4371-4b69-b4a8-1d1be4246b23" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="enumCondition" display-name="" uuid="64d343fc-c3bc-48c9-baab-04b6e1284616" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="MakeObjectFormatDictionaryBool" display-name="MakeObjectFormatDictionaryBool" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Формирование наборов форматов
var formatDictionary = {};

formatDictionary = {};
formatDictionary[`format_name`] = formatName;
formatDictionary[`format`] = {};
formatDictionary[`format`][`bool_format`] = JSON.parse(enumCondition);

return JSON.stringify(formatDictionary,null,2);]]>
			</body>
			<param access-modifier="private" name="formatName" display-name="" uuid="18d2e020-7e2c-4e1f-ae63-067329706ce5" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			<param access-modifier="private" name="enumCondition" display-name="" uuid="ad22423d-3c82-4959-bb39-b7775e977604" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		</do>
		<do access-modifier="private" name="MakeObjectFormatting" display-name="MakeObjectFormatting" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Формирование правил форматирования

var formatting = {};

formatting[`formatting_rule_name`] = "formatting_" + formatName;
formatting[`formatting_column`] = columnName;

//Если задаётся текст по-умолчанию
if (text_default != "")
{
formatting[`text`] = text_default;
}

//Выбор типа форматирования: ссылка на формат или условие-значение
if (condition == "")
{
	formatting[`format`] = formatName;
}
else formatting.conditions = JSON.parse(condition);

return JSON.stringify(formatting,null,2);]]>
			</body>
			<param access-modifier="private" name="formatName" display-name="" uuid="1d13ffac-f3ba-4456-8595-fc8fdd9f7e6a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="columnName" display-name="" uuid="e585f570-2d14-4327-baa3-544c722cf0f1" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="condition" display-name="" uuid="01619b6f-6446-49b6-8af4-90d15e20ee6e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="text_default" display-name="" uuid="df16772e-42c8-43ab-889a-7e8ce9d2d8cf" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="MakeObjectDefStyle" display-name="MakeObjectDefStyle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Формирование строки декоратора для остальных сообщений
var Object = {};

var backgroundColor;
var textColor;
Object.Decorating = [];
Object.StyleDictionary = [];

backgroundColor = DefColBackground.toString(16); //цвет фона
textColor = DefColText.toString(16); //цвет текста

//Формирование объекта правил декорирования
var decorating = {};
var styleDictionary = {};
decorating[`decoration_rule_name`] = ruleName;
decorating[`rowstyle`] = ruleName + "_style";
//decorating[`columnstyle`] = {};
//decorating[`columnstyle`][`ack_required`] = columnStyleName;
Object.Decorating.push(decorating);

styleDictionary[`style_name`] = ruleName + "_style";
styleDictionary[`style`] = {};
styleDictionary[`style`][`background_color`] = '#'+ backgroundColor +'';
styleDictionary[`style`][`color`] = '#'+textColor+'';

//Настройка границ
styleDictionary[`style`][`border`] = {'all':{'color':'#ff000000','style':'none','width':'2'}};

Object.StyleDictionary.push(styleDictionary);

return JSON.stringify(Object,null,2);

]]>
			</body>
			<param access-modifier="private" name="ruleName" display-name="" uuid="9275c55d-d123-4eff-abeb-4d1029a5b522" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="MakeObjectDecorations" display-name="MakeObjectDecorations" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" form-by-id="true">
			<param access-modifier="private" name="ruleName" display-name="" uuid="679c4c62-42d9-4e79-8a0b-578e061109e9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="conditionName" display-name="" uuid="31a10938-49db-4a1c-9d76-0023532f845b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="rowStyleName" display-name="" uuid="50ad7484-c5a5-4ba0-8721-97580ca4fa9a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<body kind="javascript">
				<![CDATA[//Формирование объекта правил декорирования
var decorating = {};
decorating[`decoration_rule_name`] = ruleName;
decorating[`decoration_rule`] = {"==":{	["condition:"+conditionName]:true}};
decorating[`rowstyle`] = rowStyleName;
if (columnStyle != "")
{
	decorating[`columnstyle`] = {};
	decorating[`columnstyle`] = JSON.parse(columnStyle);
}
return JSON.stringify(decorating,null,2);]]>
			</body>
			<param access-modifier="private" name="columnStyle" display-name="" uuid="f63698d3-f43f-4e52-8b55-d28f43d2a650" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="MakeObjectStyleDictionary" display-name="MakeObjectStyleDictionary" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[// Формирование объекта набора стилей

var styleDictionary = {};

styleDictionary[`style_name`] = styleName;
styleDictionary[`style`] = {};
styleDictionary[`style`][`background_color`] = '#' + backgroundColor +'';
styleDictionary[`style`][`color`] = '#'+textColor+'';

// Заполняем параметры мигания
if (blinkingTime != "0") {
	styleDictionary[`style`][`blinker`] = {};
	styleDictionary[`style`][`blinker`][`blinker_color`] = '#'+blinkTextColor+'';
	styleDictionary[`style`][`blinker`][`blinker_background_color`] = '#'+blinkBackColor+'';
	styleDictionary[`style`][`blinker`][`blinker_period`] = blinkingTime;
}

// Настройка границ
styleDictionary[`style`][`border`] = {'all':{'color':'#ff000000','style':'none','width':'2'}};

return JSON.stringify(styleDictionary,null,2);]]>
			</body>
			<param access-modifier="private" name="styleName" display-name="" uuid="b2bc264a-aad8-403c-ae5a-a8e75ad56ea3" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="backgroundColor" display-name="" uuid="8e738117-e0e0-4ed6-93d4-a867b7f22f2f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="textColor" display-name="" uuid="737b6052-f47a-4c94-8016-abeadbf4885b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="blinkBackColor" display-name="" uuid="7df7b2ab-a720-4e73-b73c-a712be7953ed" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="blinkTextColor" display-name="" uuid="c12e6a88-12f1-4bb0-b5aa-6075247ed62e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="blinkingTime" display-name="" uuid="6a96fb2b-da79-428e-bafc-68b0425db716" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="MakeObjectSelStyle" display-name="MakeObjectSelStyle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Формирование строки декоратора для выбранного сообщения
var Object = {};

var backgroundColor;
var textColor;
Object.Decorating = [];
Object.StyleDictionary = [];

backgroundColor = SelectEventsCol.toString(16); //цвет фона
textColor = DefColText.toString(16); //цвет текста

//Формирование объекта правил декорирования
var decorating = {};
var styleDictionary = {};
decorating[`decoration_rule_name`] = ruleName;
decorating[`decoration_rule`] = {"row:isSelected": true};
decorating[`rowstyle`] = ruleName + "_style";
Object.Decorating.push(decorating);

styleDictionary[`style_name`] = ruleName + "_style";
styleDictionary[`style`] = {};
styleDictionary[`style`][`border`] ={'top':{'color':'#'+ backgroundColor +'','style':'solid','width':'2'},'bottom':{'color':'#'+ backgroundColor +'','style':'solid','width':'2'}};
Object.StyleDictionary.push(styleDictionary);

return JSON.stringify(Object,null,2);
]]>
			</body>
			<param access-modifier="private" name="ruleName" display-name="" uuid="e7c5f514-53ed-4034-876b-16a3f5e8512c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<do access-modifier="private" name="MakeAckButtonCondition" display-name="MakeAckButtonCondition" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Функция преобразует исходную строку в формат JSON для условий важности
//определяются логические операторы и происходит поэтапное формирование логических выражений из элементов массива и происходит формирование строки в JSON формате
//todo метод почти полностью дублирует MakeRequestJSON
var objectInfo = {};
var resultObject = {};
var JSONStr = '';
var tempArray = [];
var AND = [];

//Если пустая строка, то возвращаем "0" для того, чтобы в очередь не попадали значения
//if (inputString == "") return '{"severity": 0 }';

//Шаблон диапазона
var gapPattern = /\d+[-]\d+/;

//Заполняем массив символами строки
var commonArray = inputString.split(",");

//Фукнция получения выражения вида ">": { "severity": 10 }"
function MakeExpression(str,gap)
{
	let argument = str.match(/\d+/g);
	let expression = {};
	//Если имеем дело с диапазоном
	if (argument==null || argument.length==0) expression = {'data:severity':0};
	else if (gap != "") expression = {[gap]: {'data:severity':parseInt(argument[0])}};
	else expression = {'data:severity':parseInt(argument[0])};
	return expression
}

//Если элемент всего один и не диапазон
if (commonArray.length == 1 && !gapPattern.test(commonArray[0])) 
{
	JSONStr = JSON.stringify(MakeExpression(commonArray[0],""));
	return JSONStr;
}

//Формирование JSON-строки
for (let i = 0; i < commonArray.length; i++)
{
	let tempObject = {};
	tempObject[`AND`] = [];
	if (gapPattern.test(commonArray[i]))
	{
		tempArray = commonArray[i].match(/\d+/g);
		tempObject[`AND`].push(MakeExpression(tempArray[0],">="));
		tempObject[`AND`].push(MakeExpression(tempArray[1],"<="));
		if (commonArray.length > 1)
		{
			if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
			objectInfo[`OR`].push(tempObject);
		}
		else objectInfo = tempObject;
	}
	else
	{
		if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
		objectInfo[`OR`].push(MakeExpression(commonArray[i],""));
	}
}
//Отрицание всего сущего
resultObject[`NOT`] = objectInfo;

//записываем объект в виде строки
JSONStr = JSON.stringify(resultObject);
//log(JSONStr);
return JSONStr;
]]>
			</body>
			<param access-modifier="private" name="inputString" display-name="" uuid="0f452b93-e316-4548-b1b2-f253645876b0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="BlinkColumnParsing" display-name="BlinkColumnParsing" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Функция парсинга числа мигающих столбцов
var columnIds = BlinkingColumns==""?[]: JSON.parse(BlinkingColumns);
var Object = {};
for (let i = 0; i < columnIds.length; i++)
	Object[columnIds[i]] = styleName;
var jsonStr = JSON.stringify(Object);
return jsonStr;]]>
			</body>
			<param access-modifier="private" name="styleName" display-name="" uuid="6de25f0f-9540-4bca-ae78-3f21b56880d7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		</do>
		<do access-modifier="private" name="BuildDecorator" display-name="BuildDecorator" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[TableInitializer();
var MergeModeOff = MergeEvents > 1;
//Формирование строки декоратора для оперативной и исторической таблицы
try{
var Object = {Conditions:[], Decorating:[], StyleDictionary:[], FormatDictionary:[], Formatting:[]};
var ObjectHistoryMode = {Conditions:[], Decorating:[], StyleDictionary:[], FormatDictionary:[], Formatting:[]};
var ackColBackground = AckColBackground.toString(16);
var ackColText = AckColText.toString(16);
	var ignoreOtherEvents = NotAckOtherEvents; // Не квитировать события группы прочие
	var dontShowButton = FollowLatestEvent || isExport; // Режим принудительного слежения за последним событием

{//Настройки декоратора по умолчанию
	//Для обычных сообщений
	Object.Decorating.push(JSON.parse(MakeObjectDefStyle('default_settings')).Decorating[0]);
	Object.StyleDictionary.push(JSON.parse(MakeObjectDefStyle('default_settings')).StyleDictionary[0]);
	ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDefStyle('default_settings')).Decorating[0]);
	ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectDefStyle('default_settings')).StyleDictionary[0]);
	//Для обычных квитированных сообщений
	if (AckStyleMode)
	{
		var other_decorating = {'decoration_rule_name':"other_acked_events",'rowstyle':"other_acked_events_style",'decoration_rule':{'AND':[{'data:ack':true},{'data:ack_required':true}]}};
		var other_aestyle = {'style_name':"other_acked_events_style", 'style':{'background_color':'#'+ackColBackground,'color':'#'+ackColText,'border':{'all':{'color':'#ff000000','style':'none','width':'2'}}}};
		Object.Decorating.push(JSON.parse(JSON.stringify(other_decorating)));
		Object.StyleDictionary.push(other_aestyle);
		if (MergeModeOff) other_decorating['decoration_rule']['AND'].push({'data:kind':1});
		ObjectHistoryMode.Decorating.push(other_decorating);
		ObjectHistoryMode.StyleDictionary.push(other_aestyle);
	}
	//Применять стиль квитированного сообщения по умолчанию к столбцам :Время генерации, Квитировано, Время квитирования, Пользователь, Комментарий
	if (!AckStyleMode)
	{
		var other_decorating = {'decoration_rule_name':"column_acked",'decoration_rule':{'AND':[{'data:ack':true},{'data:ack_required':true}]},'columnstyle':{'time':"column_acked",'ack':"column_acked",'ack_time':"column_acked",'actor_id':"column_acked",'ack_comment':"column_acked"}};
		var other_aestyle = {'style_name':"column_acked",'style':{'background_color':'#'+ackColBackground,'color':'#'+ackColText,'border':{'all':{'color':'#ff000000','style':'none','width':'2'}}}};
		Object.Decorating.push(JSON.parse(JSON.stringify(other_decorating)));
		Object.StyleDictionary.push(other_aestyle);
		if (MergeModeOff) other_decorating['decoration_rule']['AND'].push({'data:kind':1});
		ObjectHistoryMode.Decorating.push(other_decorating);
		ObjectHistoryMode.StyleDictionary.push(other_aestyle);
	}
}

var severityFormattingConditions = [];
var severityFormattingConditionsHistoryMode = [];
for (let i = DecoratorSettings.GetRowCount() - 1; i >= 0; i--)
{
	var active = DecoratorSettings.GetCellData(i,0); //состояние активности
	var activeHistoryMode = active;
	var activeHistoryMode2 = active;
	{
		if (active=="Активные")
		{
			active = JSON.stringify({'data:active':true});
			activeHistoryMode = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':2}, {'data:kind':0}]}):(active);
			activeHistoryMode2 = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':2}, {'data:kind':0}, {'AND':[{'data:kind':1},{'data:active':true}]}]}):(active);
		}
		else if (active=="Неактивные")
		{
			active = JSON.stringify({'data:active':false});
			activeHistoryMode = (MergeModeOff)?JSON.stringify({'data:kind':3}):(active);
			activeHistoryMode2 = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':3}, {'AND':[{'data:kind':1},{'data:active':false}]}]}):(active);
		}
		else
		{
			active = "";
			activeHistoryMode = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':2}, {'data:kind':0}, {'data:kind':3}]}):("");
			activeHistoryMode2 = "";
		}
	}
	var subcondition = DecoratorSettings.GetCellData(i,1); //подусловие
	var severity = DecoratorSettings.GetCellData(i,2); //значение важности
	if (severity == "") continue; //если важность не указана, пропускаем
	var group = DecoratorSettings.GetCellData(i,3); //значение группы важности
	var backgroundColor = DecoratorSettings.GetCellData(i,4).toString(16); //цвет фона
	var textColor = DecoratorSettings.GetCellData(i,5).toString(16); //цвет текста
	var blinkBackColor = DecoratorSettings.GetCellData(i,8).toString(16); //цвета фона мигания
	var blinkTextColor = DecoratorSettings.GetCellData(i,9).toString(16); //цвет текста мигания
	ackColBackground = (DecoratorSettings.GetCellData(i,11)==0 ? AckColBackground : DecoratorSettings.GetCellData(i,11)).toString(16);
	ackColText = (DecoratorSettings.GetCellData(i,12)==0 ? AckColText : DecoratorSettings.GetCellData(i,12)).toString(16);
	{//определяем время мигания в мс
		var blinkingTime = "0";
		switch (DecoratorSettings.GetCellData(i,7))
		{
			case "Нет":
				blinkingTime = "0";
				break;
			case "0.5 сек":
				blinkingTime = "500";
				break;
			case "1 сек":
				blinkingTime = "1000";
				break;
			case "2 сек":
				blinkingTime = "2000";
				break;
		}
	}
	
	{//Заполняем условия декорирования для квитированного и неквитированного состояния
		function MakeObjectConditions(activeValue,ackValue,conditionName){
			if (severity == "") return "";
			var conditions = {'condition_name':conditionName, 'condition':{'AND':[]}};
			//Добавляем в массив AND условия важности
			conditions['condition']['AND'].push(JSON.parse(MakeJSONstring(severity, "severity")));
			//Добавляем в массив AND подусловие
			if (subcondition != "") conditions['condition']['AND'].push({'data:subcondition_name':subcondition});
			//Добавляем в массив AND условие активности
			if (activeValue != "") conditions['condition']['AND'].push(JSON.parse(activeValue));
			//Добавляем в массив AND условие квитирования
			if (ackValue != "") conditions['condition']['AND'].push(JSON.parse(ackValue));
			if (conditions['condition']['AND'].length == 1) conditions['condition'] = conditions['condition']['AND'][0];
			return JSON.stringify(conditions,null,2);
		}
		Object.Conditions.push(JSON.parse(MakeObjectConditions(active, JSON.stringify({'data:ack':true}), "ack_" + i)));
		Object.Conditions.push(JSON.parse(MakeObjectConditions(active, JSON.stringify({'data:ack':false}), "not_ack_" + i)));
		Object.Conditions.push(JSON.parse(MakeObjectConditions(active, JSON.stringify({'data:ack':null}), "not_ack_not_req_" + i)));
		if (MergeModeOff)
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(active/*fix*/, JSON.stringify({'data:kind':1}), "ack_" + i)));
		else
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, JSON.stringify({'data:ack':true}), "ack_" + i)));
		if (MergeModeOff)
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, "", "not_ack_" + i)));
		else
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, JSON.stringify({'data:ack':false}), "not_ack_" + i)));
		ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, JSON.stringify({'data:ack':null}), "not_ack_not_req_" + i)));
	
		// Заполняем стиль декорирования для квитированного и неквитированного состояния
		if (AckStyleMode)//Применять стиль квитированного сообщения к всем столбцам
		{
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, '')));
			ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, '')));
			
			Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, ackColBackground, ackColText, "", "", "0")));
			ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, ackColBackground, ackColText, "", "", "0")));
		}
		else// При применении к отдельным столбцам, создается отдельный стиль и стиль декорирования для столбцов и строки
		{
			let columns = {'time':"column_ack_"+i,'ack':"column_ack_"+i,'ack_time':"column_ack_"+i,'actor_id':"column_ack_"+i,'ack_comment':"column_ack_"+i};
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, JSON.stringify(columns))));
			ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, JSON.stringify(columns))));
		
			Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("column_ack_" + i, ackColBackground, ackColText, "", "", "0")));
			ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("column_ack_" + i, ackColBackground, ackColText, "", "", "0")));		
		
			Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, backgroundColor, textColor, "", "", "0")));
			ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, backgroundColor, textColor, "", "", "0")));
		}
	
		Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, isExport?"0":blinkingTime)));
		Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_not_req_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, "0")));
		ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, "0")));
		ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_not_req_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, "0")));
	
		//Заполняем правила декорирования для квитированного и неквитированного состояния
		if (BlinkAllColumns)
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_" + i, "not_ack_" + i, "row_not_ack_" + i, '')));
		else
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_" + i, "not_ack_" + i, "row_not_ack_not_req_" + i, BlinkColumnParsing("row_not_ack_" + i))));
		Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_not_req_" + i, "not_ack_not_req_" + i, "row_not_ack_not_req_" + i, '')));
	
		ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_" + i, "not_ack_" + i, "row_not_ack_" + i,'')));
		ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_not_req_" + i, "not_ack_not_req_" + i, "row_not_ack_not_req_" + i, '')));
	}

	{//Задаем форматирование для столбца группы-важности
		if (group == "") continue;
		function madeCondition(activeValue)
		{
			var conditionItem = {'text':group,'condition':{'AND':[]}};
			conditionItem[`condition`][`AND`].push(JSON.parse(MakeJSONstring(severity, "severity")));
			if (activeValue != "")
				conditionItem[`condition`][`AND`].push(JSON.parse(activeValue));
			if (subcondition != "")
				conditionItem[`condition`][`AND`].push({'data:subcondition_name':subcondition});
			if (conditionItem[`condition`][`AND`].length == 1)
				conditionItem[`condition`] = conditionItem[`condition`][`AND`][0];
			return JSON.stringify(conditionItem);
		}
		severityFormattingConditions.push(JSON.parse(madeCondition(active)));
		severityFormattingConditionsHistoryMode.push(JSON.parse(madeCondition(activeHistoryMode2)));
	}
}

{//Декоратор для кнопки КВИТИРОВАТЬ
	var decorating = {};
	decorating['decoration_rule_name'] = 'ack_button';
	decorating['decoration_rule'] = {'AND': [{'data:ack': false},{'data:ack_required': true}]};
	if (ignoreOtherEvents)
		decorating['decoration_rule']['AND'].push({"==":{"condition:severity_of_other_events":true}});
	if (dontShowButton)
		decorating['columnstyle'] = {'ack_required':'hide_ack_button'}//#23602 нельзя оставлять пустым, но неправильным можно
	else
		decorating['columnstyle'] = {'ack_required':'ack_button'}
	Object.Decorating.push(decorating);

	var styleDictionary = {'style_name':"ack_button"};
	styleDictionary['style'] = {'blinker':{'blinker_period':'0'}};
	styleDictionary['style']['background_color'] = "#fff0f0f0";
	styleDictionary['style']['color'] = "#ff000000";
	styleDictionary['style']['text_align'] = "center";
	styleDictionary['style']['border'] = {'all':{'color':'#ff000000','style':'groove','width':'2'}};
	Object.StyleDictionary.push(styleDictionary);
}

//Настройки декоратора для выделенной строки //LineSelectionView
if (!FollowLatestEvent || SnapshotON)
{
	Object.Decorating.push(JSON.parse(MakeObjectSelStyle('row_selected')).Decorating[0]);
	Object.StyleDictionary.push(JSON.parse(MakeObjectSelStyle('row_selected')).StyleDictionary[0]);
}
ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectSelStyle('row_selected')).Decorating[0]);
ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectSelStyle('row_selected')).StyleDictionary[0]);

//Заполняем словарь форматов для столбцов
var kindColumnFormat = JSON.stringify([{'value':0, 'text':'Активация'}, {'value':1, 'text':'Квитанция квитирования'}, {'value':2, 'text':'Псевдоактивация'}, {'value':3, 'text':'Деактивация'}]);
Object.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionaryBool("ack_column", JSON.stringify([{'value':true, 'text':'Да'}, {'value':false, 'text':'Нет'}]))));
Object.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionaryBool("active_column", JSON.stringify([{'value':true, 'text':'Активно'}, {'value':false, 'text':'Неактивно'}]))));
Object.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionary("kind_column_format", kindColumnFormat)));
Object.FormatDictionary.push({'format_name':"variant_format",'format':{"var_format":[{"value_type": "FloatTypeCategory","text_format": "%g"}]}});
ObjectHistoryMode.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionary("kind_column_format", kindColumnFormat)));
ObjectHistoryMode.FormatDictionary.push({'format_name':"variant_format",'format':{"var_format":[{"value_type": "FloatTypeCategory","text_format": "%g"}]}});

//Заполняем правила форматирования для столбцов
Object.Formatting.push(JSON.parse(MakeObjectFormatting("group_column", "group", JSON.stringify(severityFormattingConditions.reverse()), "")));
Object.Formatting.push(JSON.parse(MakeObjectFormatting("active_column", "active","","")));
Object.Formatting.push(JSON.parse(MakeObjectFormatting("kind_column_format", "kind","","")));
Object.Formatting.push(JSON.parse(MakeObjectFormatting("variant_format", "value","","")));

ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("group_column", "group", JSON.stringify(severityFormattingConditionsHistoryMode.reverse()), "")));
ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("kind_column_format", "kind","","")));
ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("variant_format", "value","","")));
if (MergeModeOff)
{
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("active_column", "active", JSON.stringify([{'condition':{'data:kind':0},'text':'Активно'},{'condition':{'data:active':true},'text':'Активно'},{'condition':{'data:active':false},'text':'Неактивно'}]),"")));
	
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("deactive_time_column_mergeMode", "deactive_time",JSON.stringify([{'condition':{'data:kind':0},'text':''}]),"")));
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_time_column_mergeMode", "ack_time",JSON.stringify([{'condition':{'data:kind':2},'text':''},{'condition':{'data:kind':0},'text':''}]),"")));
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("actor_id_column_mergeMode", "actor_id",JSON.stringify([{'condition':{'data:kind':0},'text':''}, {'condition':{'data:kind':2},'text':''}]),"")));
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_comment_column_mergeMode", "ack_comment",JSON.stringify([{'condition':{'data:kind':0},'text':''}, {'condition':{'data:kind':2},'text':''}]),"")));
} else
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("active_column", "active",JSON.stringify([{'condition':{'data:active':true},'text':'Активно'},{'condition':{'data:active':false},'text':'Неактивно'}]),"")));

{//OtherEventsDecorating++
// Функция включения/выключения декорирования кнопки КВИТИРОВАТЬ для остальных сообщений важностей, а также для режима FollowLastEvent
	if (ignoreOtherEvents)
	{
		var severity = Alarms_Tools.SeverityJSONtoString(SeverityGroups.Range4.Severity); //Важность в виде массива чисел
		var severityJSON = MakeAckButtonCondition(severity); //Важность в виде JSON строки в формате декоратора
		Object.Conditions.push({'condition_name':"severity_of_other_events",'condition':JSON.parse(severityJSON)});
		
		Object.Decorating.push({'decoration_rule_name':"dec_other_events", 'decoration_rule':{'condition:severity_of_other_events':false}, 'rowstyle':"row_other_events"});
		Object.StyleDictionary.push({'style_name':"row_other_events", 'style':{'blinker':{'blinker_period':'0'}}});
	}
	{//ack_required column formatting
		var buttonTitle = (dontShowButton)?("Не квитировано"):("Квитировать");
		var _conds = [];
		var tempObj = {'condition':{'AND':[{'data:ack':false},{'data:ack_required':true}]},'text':buttonTitle};
		if (ignoreOtherEvents)
			tempObj['condition']['AND'].push({'condition:severity_of_other_events':true});
		_conds.push(tempObj);
		
		_conds.push({'condition':{'data:ack':true},'text': 'text:ack_time'});
		_conds.push({'condition':{'data:ack_required':false},'text': ''});
		if (ignoreOtherEvents)
			_conds.push({'condition':{'condition:severity_of_other_events':false},'text': ''});
		
		Object.Formatting.push(JSON.parse(MakeObjectFormatting("ack_required_column", "ack_required", JSON.stringify(_conds), "")));
	}	
	{//ack column formatting
		var tempObj = {'formatting_rule_name':"formatting_ack_column",'formatting_column':"ack"};
		if (ignoreOtherEvents)
			tempObj['conditions'] = [{'condition':{'condition:severity_of_other_events': false},'text':""}, {'condition':{'condition:severity_of_other_events': true},'format':"ack_column"}];
		else
			tempObj['format'] = "ack_column";
		Object.Formatting.push(tempObj);
	}
	{//History decorator
		//Conditions
		if (ignoreOtherEvents)
			ObjectHistoryMode.Conditions.push({'condition_name':"severity_of_other_events",'condition':JSON.parse(severityJSON)});
		//Formatting ack column
		var conds = [];
		if (ignoreOtherEvents)
			conds.push({'condition':{'condition:severity_of_other_events':false},'text': ''});
		if (MergeModeOff)
			conds.push({'condition':{'AND':[{'OR':[{'data:kind':2},{'data:kind':0}]},{'data:ack_required':true}]},'text':'Нет'});
		conds.push({'condition':{'data:ack':true},'text':'Да'});
		conds.push({'condition':{'data:ack':false},'text':'Нет'});
		ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_column", "ack", JSON.stringify(conds), "")));
		//Formatting ack_required column
		var conditions = [];
		if (ignoreOtherEvents)
			conditions.push({'condition':{'condition:severity_of_other_events':false},'text':""});
		if (MergeModeOff) {
			conditions.push({'condition':{'data:ack_required':false},'text':""});
			conditions.push({'condition':{'data:kind':2},'text':'Не квитировано'});
			conditions.push({'condition':{'AND':[{'data:kind':0}, {'data:ack_required':true}]}, 'text':'Не квитировано'});
		}
		conditions.push({'condition':{'data:ack':true},'text':'text:ack_time'});
		conditions.push({'condition':{'data:ack':false},'text':"Не квитировано"});
		if (!MergeModeOff)
			conditions.push({'condition':{'data:ack_required':false},'text': ""});
		ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_required_column", "ack_required", JSON.stringify(conditions), "")));
		//value column
		if (MergeModeOff)
			ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("value_hide_format", "value", JSON.stringify([{'condition':{'data:kind':1}, 'text':''}]),"")));
	}
}

return JSON.stringify(isHistory ? ObjectHistoryMode : Object);
}catch (err){log("Exception in BuildDecorator:");throw(err);}]]>
			</body>
			<param access-modifier="private" name="isHistory" display-name="" uuid="78939819-56d1-45ff-ab3e-c9d02019a03f" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
			<param access-modifier="private" name="isExport" display-name="" uuid="f8709ffb-6415-49af-836e-8eb9cdab4fd8" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
			<param access-modifier="private" name="NotAckOtherEvents" display-name="" uuid="d42f6159-d5e9-4ed2-8a1d-b9cff9a524f2" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
			<param access-modifier="private" name="FollowLatestEvent" display-name="" uuid="52225858-43a0-4fa3-baff-4f52b74894c8" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
			<param access-modifier="private" name="MergeEvents" display-name="" uuid="a8e22510-54f8-4fb6-8bba-4ca15502e93e" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5"/>
			<param access-modifier="private" name="SnapshotON" display-name="" uuid="7ec19cfe-ce32-4688-9c8e-332bdb53423c" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
		<object access-modifier="private" name="Version" display-name="Version" uuid="dc5b82e9-a47a-4aa3-a47a-c87187ec7274" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1">
			<do access-modifier="private" name="Inc" display-name="Inc" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[Version = Version + 1;]]>
				</body>
			</do>
		</object>
	</object>
	<object access-modifier="private" name="QueryProcessing" display-name="QueryProcessing" uuid="6f4933c6-42fc-4cd0-be3d-dfd5f80777e6" base-type="" base-type-id="" ver="5" description="" cardinal="1">
		<object access-modifier="private" name="StorageDuration" display-name="StorageDuration" uuid="4b5ef5cb-8a11-4235-b1c8-fe4dbb85cf6a" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "queryprocessing.json");
if (File.Exists(filePath))
{
	try
	{
		var json = File.ReadTextFile(filePath);
		var settings = JSON.parse(json);
		
		StorageDuration.Value = settings.StorageDuration;
		
		Version.Inc();
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "queryprocessing.json");
try
{
	var settings = {};
	settings.Mode = 1;//сохраняем номер варианта настроек, для будущих расширений
	settings.StorageDuration = StorageDuration.Value;
	
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
		<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[StorageDuration = 0;
Version.Inc();]]>
			</body>
		</do>
		<object access-modifier="private" name="Version" display-name="Version" uuid="4fd20f9c-2c91-4f5a-b53b-068e6fdd14c4" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1">
			<do access-modifier="private" name="Inc" display-name="Inc" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[Version = Version + 1;]]>
				</body>
			</do>
		</object>
	</object>
	<object access-modifier="private" name="Print" display-name="Print" uuid="dda40ab7-1074-4318-a026-56328206f3b4" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5" description="" cardinal="1">
		<object access-modifier="private" name="HeaderText" display-name="HeaderText" uuid="da68b67c-916b-4578-897b-6d29b077315e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="HeaderTextUse" display-name="HeaderTextUse" uuid="61eb2f71-59f6-4219-a2ed-053cca7eedd2" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "print.json");
if (File.Exists(filePath))
{
	try
	{
		var json = File.ReadTextFile(filePath);
		var obj = JSON.parse(json);
		HeaderText = obj.HeaderText;
		HeaderTextUse = obj.HeaderTextUse;
		PageLimit = (obj.PageLimit != undefined) ? obj.PageLimit : 0;
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		HeaderText = "";
		HeaderTextUse = false;
		PageLimit = 0;
		return false;
	}
}
else
{
	HeaderText = "";
	HeaderTextUse = false;
	PageLimit = 0;
}

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "print.json");
try
{
	var settings = {};
	settings.Version = 1;
	settings.HeaderText = HeaderText;
	settings.HeaderTextUse = HeaderTextUse;
	settings.PageLimit = PageLimit;
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
		<object access-modifier="private" name="PageLimit" display-name="PageLimit" uuid="55dc2ad4-acef-44fc-ba02-d4e4bc32278b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
	</object>
	<object access-modifier="private" name="ContextMenu" display-name="ContextMenu" uuid="1383b280-afe6-4c83-8648-324335516941" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="Data" display-name="Data" uuid="6289eb79-8930-48af-889f-ea2c5945178e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "contextmenu.json");
if (File.Exists(filePath))
{
	try
	{
		var json = File.ReadTextFile(filePath);
		var obj = JSON.parse(json);
		Data = JSON.stringify(obj.Content);
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		Data = GetDefaults();
		return false;
	}
}
else
	Data = GetDefaults();

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "contextmenu.json");
try
{
	var settings = {};
	settings.Version = 1;
	settings.Content = JSON.parse(Data);
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
		<do access-modifier="private" name="GetDefaults" display-name="GetDefaults" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var items = [];
// режимы
items.push({ 'id': "operative", 'enabled': true});
items.push({ 'id': "historical", 'enabled': true });
// квитирование
items.push({ 'id': "ack", 'enabled': true });
items.push({ 'id': "ackAll", 'enabled': true });
items.push({ 'id': "addComment", 'enabled': true });
// подавления и блокировки
items.push({ 'id': "suppressionsShow", 'enabled': false });
items.push({ 'id': "suppressionsModify", 'enabled': false });
// снимок
items.push({ 'id': "snapshot", 'enabled': true });
// звуки
items.push({ 'id': "mute", 'enabled': true });
items.push({ 'id': "skipSound", 'enabled': true });
items.push({ 'id': "clearSoundQueue", 'enabled': true });
// отображение событий
items.push({ 'id': "clear", 'enabled': true });
items.push({ 'id': "viewFilter", 'enabled': true });
items.push({ 'id': "defaultSorting", 'enabled': true });
items.push({ 'id': "sort", 'enabled': true });
// экспорт
items.push({ 'id': "print", 'enabled': true });
items.push({ 'id': "export", 'enabled': true });
items.push({ 'id': "opentrend", 'enabled': false });
items.push({ 'id': "openform", 'enabled': false });
// вид
items.push({ 'id': "toolbar", 'enabled': true });
items.push({ 'id': "statusbar", 'enabled': true });
// параметры
items.push({ 'id': "options", 'enabled': true });

return JSON.stringify(items);]]>
			</body>
		</do>
		<do access-modifier="private" name="GetMenuDesign" display-name="GetMenuDesign" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var items = [];
function itemspush(id,title,icon)
{
	var obj = { 'id':id, 'title':title };
	if (icon != "") obj.icon = icon.split(",").map(function(e,n){return "Alarms_Icons/"+e;}).join(",");
	items.push(obj);
}

// режимы
itemspush("operative", "Оперативный режим", "Operative16.png");
itemspush("historical", "Исторический режим", "Historical16.png");
// квитирование
itemspush("ack", "Квитировать", "Acknowledge16.png");
itemspush("ackAll", "Квитировать все", "AcknowledgeAll16.png");
itemspush("addComment", "Добавить комментарий...", "");
// подавления и блокировки
itemspush("suppressionsShow", "Подавления и блокировки", "Supression16.png");
itemspush("suppressionsModify", "Изменить состояние подавления и блокировки", "");
// снимок
itemspush("snapshot",
	!forMenu ? "Включить/Отключить режим снимка":
	forMenu && snapshot ? "Отключить режим снимка" : "Включить режим снимка",
	!forMenu ? "Pause16.png,Play16.png":
	forMenu && snapshot ? "Play16.png" : "Pause16.png");
// звуки
itemspush("mute",
	!forMenu ? "Включить/Отключить проигрывание звуков" :
	forMenu && mute ? "Включить проигрывание звуков" : "Отключить проигрывание звуков",
	!forMenu ? "SoundPlay16.png,SoundMute16.png" :
	forMenu && mute ? "SoundPlay16.png" : "SoundMute16.png");
itemspush("skipSound", "Пропустить звук", "SoundForward16.png");
itemspush("clearSoundQueue", "Очистить очередь звуков", "SoundStop16.png");
// отображение событий
itemspush("clear", "Очистить список", "Clear16.png");
itemspush("viewFilter", "Фильтр отображения...", "Filter16.png");
itemspush("defaultSorting", "Сортировать по умолчанию", "");
itemspush("sort", "Сортировка...", "Sort16.png");
// экспорт
itemspush("print", "Печать...", "Print16.png");
itemspush("export", "Экспорт...", "ExportToFile16.png");
itemspush("opentrend", "Открыть график", "");
itemspush("openform", "Открыть экранную форму", "");
// вид
itemspush("toolbar", "Показывать панель инструментов", "");
itemspush("statusbar", "Показывать строку состояния", "");
// параметры
itemspush("options", "Параметры...", "Options16.png");

return JSON.stringify(items);]]>
			</body>
			<param access-modifier="private" name="forMenu" display-name="" uuid="be53fce9-45f4-4d17-917e-6399a6d3e146" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
			<param access-modifier="private" name="mute" display-name="" uuid="d7b1a70c-3e50-4ee4-b32f-aa3fca03db3a" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
			<param access-modifier="private" name="snapshot" display-name="" uuid="0e85a707-2b14-45bd-ae18-ed634aa65815" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
	</object>
	<object access-modifier="private" name="PresetFilters" display-name="PresetFilters" uuid="a77ea505-0830-451a-bade-29f07f20462d" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "presetfilters.json");
if (File.Exists(filePath))
{
	try
	{
		var columns = JSON.parse(TableView.GetSelectableColumns());
		//reset old settings
		for (let i = 0; i < used.Length; i++) used[i] = false;
		//load new settings
		var obj = JSON.parse(File.ReadTextFile(filePath));
		var filters = [];
		if (obj.Version == undefined)
		{
			filters = obj;
			mode = 0;
		}
		else if (obj.Version == 1)
		{
			filters = obj.Filters;
			mode = obj.Mode;
		}
		
		for (let i = 0; i < filters.length; i++)
			if (i < name.Length)
			{
				name[i] = filters[i].name;
				used[i] = filters[i].used;
				
				var f = {};
				for (let c = 0; c < columns.length; c++)
					f[columns[c]/*id*/] = filters[i][columns[c]/*id*/];
				json[i] = JSON.stringify(f);
			}
	}
	catch(error)
	{		
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "presetfilters.json");
try
{
	var obj = {Version:1, Filters:[], Mode:mode};
	var columns = JSON.parse(TableView.GetSelectableColumns());
	for (let i = 0; i < name.Length; i++)
		if (used[i] && json[i] != "")
		{
			var f = {};
			f.name = name[i];
			f.used = used[i];
			var object = JSON.parse(json[i]);
			for (let c = 0; c < columns.length; c++)
				f[columns[c]/*id*/] = object[columns[c]/*id*/];
			obj.Filters.push(f);
		}
	File.WriteTextFile(filePath, JSON.stringify(obj, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}
]]>
			</body>
		</do>
		<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// значения по умолчанию
for (let i = 0; i < json.Length; i++)
{
	name[i] = "";
	used[i] = false;
	json[i] = "";
}
mode = 0;
]]>
			</body>
		</do>
		<object access-modifier="private" name="name" display-name="name" uuid="9ccfa360-3f44-43b6-8c1a-6b4c9550428d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4" cardinal="20"/>
		<object access-modifier="private" name="used" display-name="used" uuid="4d13c411-a9bf-4497-aa95-8e575eb66060" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4" cardinal="20"/>
		<object access-modifier="private" name="json" display-name="json" uuid="52001631-33c7-4229-a5a3-a157c5868b7d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4" cardinal="20"/>
		<object access-modifier="private" name="mode" display-name="mode" uuid="fc10117a-07de-425d-868e-88a5ba63941e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
	</object>
	<object access-modifier="private" name="CommentPattern" display-name="CommentPattern" uuid="77722312-ee5d-442c-9638-66a9fbff163f" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
		<object access-modifier="private" name="PatternsTable" display-name="PatternsTable" uuid="5219e585-bb12-4e48-b6c8-cab0a3bee836" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
			<designed target="Frozen" value="false" ver="3"/>
			<designed target="MaxRowCount" value="2147483647" ver="3"/>
			<designed target="OptOfProcessingEvents" value="0" ver="5"/>
		</object>
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "commenttemplates.json");
if (File.Exists(filePath))
{
	//log("Загрузка шаблонов комментариев из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var comments = JSON.parse(json);
		
		PatternsTable.Reset();
		PatternsTable.AddColumn("Patterns","","","","string",false,true);
		if (comments.CommentTemplates.length > 0)
		{
			PatternsTable.InsertRows(0, comments.CommentTemplates.length);
			for (let i = 0; i < comments.CommentTemplates.length; i++)
				PatternsTable.SetCellData(i,0,comments.CommentTemplates[i]);
		}
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		return false;
	}
}

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "commenttemplates.json");
//log("Сохранение шаблонов комментариев в файл "  + filePath);
try
{
	var comments = {};
	comments.CommentTemplates = [];
	for (let i = 0; i < PatternsTable.GetRowCount(); i++)
		comments.CommentTemplates.push(PatternsTable.GetCellData(i,0));
	
	File.WriteTextFile(filePath, JSON.stringify(comments, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="Export" display-name="Export" uuid="a2657932-29df-4539-90d5-c7502e52f46d" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "export.json");
if (File.Exists(filePath))
{
	//log("Загрузка параметров экспорта из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var settings = JSON.parse(json);
		
		ExportPath.Update(settings.Path);
		ViewColumnSettings.Value = settings.ViewColumnSettings;
		HeaderText = settings.HeaderText;
		HeaderTextUse = settings.HeaderTextUse;
		
		return true;
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "export.json");
//log("Сохранение параметров экспорта в файл "  + filePath);
try
{
	var settings = {};
	settings.Path = ExportPath.Value;
	settings.ViewColumnSettings = ViewColumnSettings.Value;
	settings.HeaderText = HeaderText;
	settings.HeaderTextUse = HeaderTextUse;
	
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
		<object access-modifier="private" name="ViewColumnSettings" display-name="ViewColumnSettings" uuid="cb5f6344-88b5-473a-b517-76b00a0fecba" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
		<object access-modifier="private" name="ExportPath" display-name="ExportPath" uuid="356f6ea8-2fb0-4845-b403-4ea10a759eee" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="3">
			<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[// путь экспорта по умолчанию
d: string = File.ToNative(File.CombinePath(File.CombinePath(GetProgramDataFolder(), "Export"), "_"));
Default = String.SubString(d, 0, String.Length(d) - 1);

// если не указан, то используем путь экспорта по умолчанию
if (exportFolder == "")
	exportFolder = Default;

// завершаем путь разделителем, чтобы отличать путь к файлу от пути к папке
t: string = File.CombinePath(exportFolder, "_");
exportFolder = String.SubString(t, 0, String.Length(t) - 1);

// задаем путь для экспорта
ExportPath = File.ToNative(exportFolder);
]]>
				</body>
				<param access-modifier="private" name="exportFolder" display-name="" uuid="00727d0f-8ec4-45e2-8433-c2ba617dd86b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</do>
			<object access-modifier="private" name="Default" display-name="Default" uuid="404f596e-3875-4534-ae8c-a31636df4217" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</object>
		<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// пустое значение приведет к подстановке пути по умолчанию
ExportPath.Update("");

HeaderText = "";
HeaderTextUse = false;
]]>
			</body>
		</do>
		<object access-modifier="private" name="HeaderText" display-name="HeaderText" uuid="149d81fd-6caa-4a3c-ba98-cf7463f7cdb9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="HeaderTextUse" display-name="HeaderTextUse" uuid="a5de0ac5-ecf0-4766-a3d3-0a7ea81fcf31" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
	</object>
	<object access-modifier="private" name="SeverityGroups" display-name="SeverityGroups" uuid="a14c00d4-8d37-47a0-8482-7677f90672de" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "severitygroups.json");
if (File.Exists(filePath))
{
	//log("Загрузка настроек групп важности из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var severitygroups = JSON.parse(json);
		
		Range1.SoundEnable = severitygroups.ApAlarmQueue_1.SoundEnabled;
		Range1.nSoundRepeats = severitygroups.ApAlarmQueue_1.SoundRepeats;
		Range1.SoundPriority = severitygroups.ApAlarmQueue_1.SoundPriority;
		Range1.Severity = severitygroups.ApAlarmQueue_1.Severity;
		
		Range2.SoundEnable = severitygroups.ApAlarmQueue_2.SoundEnabled;
		Range2.nSoundRepeats = severitygroups.ApAlarmQueue_2.SoundRepeats;
		Range2.SoundPriority = severitygroups.ApAlarmQueue_2.SoundPriority;
		Range2.Severity = severitygroups.ApAlarmQueue_2.Severity;
		
		Range3.SoundEnable = severitygroups.ApAlarmQueue_3.SoundEnabled;
		Range3.nSoundRepeats = severitygroups.ApAlarmQueue_3.SoundRepeats;
		Range3.SoundPriority = severitygroups.ApAlarmQueue_3.SoundPriority;
		Range3.Severity = severitygroups.ApAlarmQueue_3.Severity;
		
		Range4.SoundEnable = severitygroups.ApAlarmQueue_4.SoundEnabled;
		Range4.nSoundRepeats = severitygroups.ApAlarmQueue_4.SoundRepeats;
		Range4.SoundPriority = severitygroups.ApAlarmQueue_4.SoundPriority;
		Range4.Severity = severitygroups.ApAlarmQueue_4.Severity;
		Range4.severityArray = GapToArray(Alarms_Tools.SeverityJSONtoString(Range4.Severity));
		
		Version.Inc();
	}
	catch(error)
	{		
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "severitygroups.json");
//log("Сохранение настроек групп важностей в файл "  + filePath);
try
{
	var severitygroups = {};
	
	severitygroups.ApAlarmQueue_1 = {};
	severitygroups.ApAlarmQueue_1.Severity = Range1.Severity;
	severitygroups.ApAlarmQueue_1.SoundEnabled = Range1.SoundEnable;
	severitygroups.ApAlarmQueue_1.SoundRepeats = Range1.nSoundRepeats;
	severitygroups.ApAlarmQueue_1.SoundPriority = Range1.SoundPriority;
	
	severitygroups.ApAlarmQueue_2 = {};
	severitygroups.ApAlarmQueue_2.Severity = Range2.Severity;
	severitygroups.ApAlarmQueue_2.SoundEnabled = Range2.SoundEnable;
	severitygroups.ApAlarmQueue_2.SoundRepeats = Range2.nSoundRepeats;
	severitygroups.ApAlarmQueue_2.SoundPriority = Range2.SoundPriority;
	
	severitygroups.ApAlarmQueue_3 = {};
	severitygroups.ApAlarmQueue_3.Severity = Range3.Severity;
	severitygroups.ApAlarmQueue_3.SoundEnabled = Range3.SoundEnable;
	severitygroups.ApAlarmQueue_3.SoundRepeats = Range3.nSoundRepeats;
	severitygroups.ApAlarmQueue_3.SoundPriority = Range3.SoundPriority;
	
	severitygroups.ApAlarmQueue_4 = {};
	severitygroups.ApAlarmQueue_4.Severity = Range4.Severity;
	severitygroups.ApAlarmQueue_4.SoundEnabled = Range4.SoundEnable;
	severitygroups.ApAlarmQueue_4.SoundRepeats = Range4.nSoundRepeats;
	severitygroups.ApAlarmQueue_4.SoundPriority = Range4.SoundPriority;
	
	File.WriteTextFile(filePath, JSON.stringify(severitygroups, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}
]]>
			</body>
		</do>
		<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// значения по умолчанию
Range1.SoundEnable = true;
Range1.nSoundRepeats = 0;
Range1.SoundPriority = 0;
Range1.Severity = '{"AND":[{">=":{"severity":667}},{"<=":{"severity":1000}}]}';

Range2.SoundEnable = true;
Range2.nSoundRepeats = 3;
Range2.SoundPriority = 0;
Range2.Severity = '{"AND":[{">=":{"severity":445}},{"<=":{"severity":666}}]}';

Range3.SoundEnable = true;
Range3.nSoundRepeats = 1;
Range3.SoundPriority = 0;
Range3.Severity = '{"AND":[{">=":{"severity":223}},{"<=":{"severity":444}}]}';

Range4.SoundEnable = true;
Range4.nSoundRepeats = 1;
Range4.SoundPriority = 0;
Range4.Severity = '{"AND":[{">=":{"severity":1}},{"<=":{"severity":222}}]}';
Range4.severityArray = GapToArray(Alarms_Tools.SeverityJSONtoString(Range4.Severity));

Version.Inc();
]]>
			</body>
		</do>
		<object access-modifier="private" name="Range1" display-name="Range1" uuid="a54072bb-5d46-4679-9241-55ae4650f180" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="2">
			<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="5ea538c0-119c-4d66-a524-1477a5b95854" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="8652e354-5b59-4bab-b456-3d9f81ed0be5" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
			<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="aaab49e8-03ef-4bb4-a76a-d05ec9dba4dd" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="Severity" display-name="Severity" uuid="3f2c740a-c7af-4ff7-aa4f-493832c7de0b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="08aa247a-c01d-4c77-90e6-dd1242849755" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
		</object>
		<object access-modifier="private" name="Range2" display-name="Range2" uuid="2571648b-a80b-43a2-a5f9-fa85df15e31a" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="2">
			<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="b058ffdb-6bf3-4bc4-8a37-141262a4f750" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="6391d951-7bca-4183-84a6-637ed0d2700a" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
			<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="d33fd67a-f87f-4d09-8fe7-2a077f6c2cd8" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="Severity" display-name="Severity" uuid="84deec00-f667-4277-bff1-1480a7e47387" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="cbb01548-0816-48a5-898d-e93288063610" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
		</object>
		<object access-modifier="private" name="Range3" display-name="Range3" uuid="2bafda12-0159-4240-8820-f2734fda24b9" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="2">
			<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="8dc35e72-3e12-4f01-a7fc-a56f56819dd2" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="3fbc5fe0-3b1f-4c16-bd18-119385ec536a" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
			<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="17be75af-257c-498f-b28a-5a148862ff35" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="Severity" display-name="Severity" uuid="e72fdddb-70a2-40c9-9364-96a897c4728a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="cefb5d4c-1cb1-4d8b-a856-7e0c929c068e" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
		</object>
		<object access-modifier="private" name="Range4" display-name="Range4" uuid="49195ceb-5ff8-4881-a701-99686b260012" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="2">
			<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="be1223cc-1558-44a7-9b7e-a64eced263e0" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="f4c20acf-455d-4a8a-9431-9ade392e0ac6" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
			<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="eb86130f-de0f-4bd3-8fc0-d994315e6be6" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="Severity" display-name="Severity" uuid="acf6dd77-036d-4d7c-8c7d-17a8a143dbc2" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="68f16d3b-6858-4f8d-a00d-591895e1f54d" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
			<object access-modifier="private" name="severityArray" display-name="severityArray" uuid="00df5d1f-fd07-407a-9105-d1fe663576e4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<init target="severityArray" ver="5" value="667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000"/>
		</object>
		<object access-modifier="private" name="Version" display-name="Version" uuid="c929c19d-2642-46ef-8808-abadd97ce765" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1">
			<do access-modifier="private" name="Inc" display-name="Inc" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[Version = Version + 1;]]>
				</body>
			</do>
		</object>
		<do access-modifier="private" name="GapToArray" display-name="GapToArray" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Преобразование последовательности в массив идущих друг за другом чисел
var str = inputString;
var numberArray = [];
var tempArray = [];
var commonArray = [];
var gapPattern = /\d+\s?[-]\s?\d+/;

str = inputString.replace(/[ ]/g,"");
//Проверка на случай, если элемент всего один
if (/(^\s?[0-9]{1,3}\s?$)|(^\s?[0-9]{1,3}\s?[-]\s?[0-9]{1,3}\s?$|^\s?(1000)$)/.test(str))commonArray[0] = str;
else commonArray = str.split(",");
if (/[,]/.test(commonArray[commonArray.length-1])) return "error";

//Проверка на верную запись диапазона чисел, запись его чисел в виде элемента массива
for (let i = 0; i < commonArray.length; i++)
{
	if (gapPattern.test(commonArray[i])) //Если элемент - диапазон чисел, то проверяем его и формируем массив
	{
		tempArray = commonArray[i].match(/\d+/g);
		if (parseInt(tempArray[0]) >= parseInt(tempArray[1])) return "error";
		while (parseInt(tempArray[0]) <= parseInt(tempArray[1]))
		{
			numberArray.push(tempArray[0]);
			tempArray[0] = parseInt(tempArray[0])+1;
		}
	}
	else numberArray.push(commonArray[i]);
	tempArray = [];
}
return numberArray.join(',');]]>
			</body>
			<param access-modifier="private" name="inputString" display-name="" uuid="d2a76f46-869e-4c57-879a-eb2541411f67" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
	</object>
	<object access-modifier="private" name="Suppression" display-name="Suppression" uuid="80e385b9-d1da-405a-adf9-348ff37abcb8" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="3">
		<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="javascript">
				<![CDATA[var filePath = File.CombinePath(ConfigurationFolder.Path, "suppression.json");
if (File.Exists(filePath))
{
	try
	{
		var json = File.ReadTextFile(filePath);
		var obj = JSON.parse(json);
		BlockIndefinite.Value = obj.BlockIndefinite;
		SuppressIndefinite.Value = obj.SuppressIndefinite;
		SuppressInterval.Value = obj.SuppressInterval;
		Intervals = obj.Intervals;
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		BlockIndefinite.Value = false;
		SuppressIndefinite.Value = false;
		SuppressInterval.Value = false;
		Intervals = GetDefaultIntervals();
		return false;
	}
}
else
{
	BlockIndefinite.Value = false;
	SuppressIndefinite.Value = false;
	SuppressInterval.Value = false;
	Intervals = GetDefaultIntervals();
}

return true;]]>
			</body>
		</do>
		<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationFolder.Path))
	return;

var filePath = File.CombinePath(ConfigurationFolder.Path, "suppression.json");
try
{
	var settings = {};
	settings.Version = 1;
	settings.BlockIndefinite = BlockIndefinite.Value;
	settings.SuppressIndefinite = SuppressIndefinite.Value;
	settings.SuppressInterval = SuppressInterval.Value;
	settings.Intervals = Intervals;
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
			</body>
		</do>
		<object access-modifier="private" name="Intervals" display-name="Intervals" uuid="d065d338-8cc3-45b6-b364-699ddcb22ae7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="BlockIndefinite" display-name="BlockIndefinite" uuid="ad283ff9-d058-486d-bcad-8177459e2607" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="SuppressIndefinite" display-name="SuppressIndefinite" uuid="e3b4b09e-c348-4125-9a11-1832107a9694" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="SuppressInterval" display-name="SuppressInterval" uuid="b1f19923-3a90-4b16-8caf-79a1f983b8b6" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="GetDefaultIntervals" display-name="GetDefaultIntervals" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[return '[{"name":"Бессрочно","size":0},{"name":"5 минут","size":5},{"name":"10 минут","size":10},{"name":"15 минут","size":15},{"name":"20 минут","size":20},{"name":"30 минут","size":30},{"name":"1 час","size":60},{"name":"2 часа","size":120}]';]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="File" display-name="File" uuid="b9b12291-4892-41d9-ace3-9727a264127d" base-type="FileSystem" base-type-id="34d744f9-7303-4077-a3f7-9c06c0945512" ver="2">
		<designed target="RootPath" value="/" ver="3"/>
	</object>
	<do access-modifier="private" name="Save" display-name="Save" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[ToolBar.SaveSettings();
TableView.SaveSettings();
Export.SaveSettings();
EventSettings.SaveSettings();
SeverityGroups.SaveSettings();
CommentPattern.SaveSettings();
PresetFilters.SaveSettings();
ContextMenu.SaveSettings();
Print.SaveSettings();
QueryProcessing.SaveSettings();
Suppression.SaveSettings();]]>
		</body>
	</do>
	<param access-modifier="private" name="ShowRelativeTag" display-name="Отображать относительный тег источника сообщения" uuid="05400550-54d2-41ac-af9e-209d6ac27184" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description=""/>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="140318a4-9bf0-4d59-a579-1a97d95cb4a8" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="AckAllAvailable" display-name="Доступность кнопок квитирования всех сообщений" uuid="d378aebf-02c5-43eb-9df7-27e269a244da" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="LineTransfer" display-name="Перенос строк" uuid="80158331-8d5a-4667-bccb-372284b3a1fe" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<init target="LineTransfer" ver="5" value="false"/>
	<init target="AckAllAvailable" ver="5" value="true"/>
	<object access-modifier="private" name="ExportFileNameFormat" display-name="Формат имени файла экспорта" uuid="46b15d21-c951-47ff-a099-cfdd675a54a5" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="4"/>
	<object access-modifier="private" name="NotAckOtherEvents" display-name="Не требовать квитирования группы Прочие" uuid="da234654-7e9b-4013-8590-ae693a3a05b9" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<init target="NotAckOtherEvents" ver="5" value="false"/>
	<object access-modifier="private" name="MergeEvents" display-name="Режим сведения событий" uuid="e7f8790c-1cea-48e8-ba87-d225a8f07987" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="5" description="" cardinal="1"/>
	<init target="MergeEvents" ver="5" value="0"/>
	<object access-modifier="private" name="ForceFollowLatestEvent" display-name="Принудительное слежение за последним событием" uuid="f4883470-84d2-4c37-83ac-1dd4c63d4029" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<init target="ForceFollowLatestEvent" ver="5" value="false"/>
	<object access-modifier="private" name="ShowMilliseconds" display-name="Отображать миллисекунды" uuid="6934d900-d0fd-4474-9139-e7458b84e2bc" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<init target="ShowMilliseconds" ver="5" value="true"/>
	<do access-modifier="private" name="Load" display-name="Load" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="javascript">
			<![CDATA[//Функция загрузки конфигурации
if (ConfigurationFolder.loadedFolder != folder)
	ConfigurationFolder.loadedFolder = folder;
else
	return true;
	
if (ConfigurationFolder != folder)
	ConfigurationFolder = folder;

var result = true;

if (IsAbsolutePath(ConfigurationFolder))
	ConfigurationFolder.Path = ConfigurationFolder;
else if (ConfigurationFolder == "")
	// путь по умолчанию
	ConfigurationFolder.Path = GetProgramDataFolder();
else
	// относительный путь задается относительно папки по умолчанию
	ConfigurationFolder.Path = File.CombinePath(GetProgramDataFolder(), ConfigurationFolder);

// абсолютный путь к папке со звуковыми файлами
ConfigurationFolder.soundFolderPath = File.CombinePath(File.CombinePath(File.ProjectFolder/*output*/, "resources"), "Sounds");
// относительный путь используемый для воспроизведения
ConfigurationFolder.soundFolder = "Sounds";

try
{
	// Создаем папку конфигурации, если ее нет
	if (!File.Exists(ConfigurationFolder.Path))
		File.CreateRecursiveFolder(ConfigurationFolder.Path);
}
catch(error)
{
	log("Не удалось создать папку с конфигурацией: " + error);
}

if (!File.Exists(ConfigurationFolder.Path))
	return false;

// Чтение конфигурации таблицы
result &= TableView.LoadSettings();

// Чтение конфигурации панели инструментов
result &= ToolBar.LoadSettings();

// Чтение шаблонов комментариев
result &= CommentPattern.LoadSettings();

// Чтение конфигурации событий
result &= EventSettings.LoadSettings();

// Загрузка параметров экспорта
result &= Export.LoadSettings();

// Чтение настроек групп важности
result &= SeverityGroups.LoadSettings();

// Чтение предустановленных фильтров
result &= PresetFilters.LoadSettings();

result &= ContextMenu.LoadSettings();

result &= Print.LoadSettings();

// Чтение механизмов очистки
result &= QueryProcessing.LoadSettings();

result &= Suppression.LoadSettings();

return result==true;]]>
		</body>
		<param access-modifier="private" name="folder" display-name="" uuid="90e8af36-0ada-4e00-ad5e-a7095d4585e4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
</type>

