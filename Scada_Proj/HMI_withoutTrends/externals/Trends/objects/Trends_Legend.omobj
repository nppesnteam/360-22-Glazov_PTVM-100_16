<type access-modifier="private" name="Trends_Legend" display-name="Тренды. Легенда" uuid="12a9628e-5f57-42ef-afe7-6a7cf5b34b8d" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="800" ver="5"/>
	<designed target="Height" value="150" ver="5"/>
	<designed target="RoundingRadius" value="0" ver="5"/>
	<designed target="PenColor" value="0xff808080" ver="5"/>
	<designed target="PenStyle" value="0" ver="5"/>
	<designed target="PenWidth" value="0" ver="5"/>
	<designed target="BrushColor" value="4278190080" ver="5"/>
	<designed target="BrushStyle" value="0" ver="5"/>
	<object access-modifier="private" name="private" display-name="private" uuid="8b74aaf6-158a-4f9e-ba32-6fa2708fe4ed" base-type="" base-type-id="" ver="5">
		<object access-modifier="private" name="pTheme" display-name="pTheme" uuid="20a15048-934f-4c90-8e39-390316a10324" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="5" description=""/>
		<object access-modifier="private" name="pScreenKeyboard" display-name="pScreenKeyboard" uuid="52395532-df60-423d-a6dd-7120fb0441c4" base-type="ScreenKeyboardOptions" base-type-id="0589bc8e-fbb2-4f0e-b5d2-f0d825538ef1" base-const="true" base-ref="true" ver="5" description=""/>
		<object access-modifier="private" name="StringUtils" display-name="StringUtils" uuid="4b35be6b-88e6-404e-ad25-2177af836770" base-type="StringUtils" base-type-id="3ded1ef2-be27-4246-8c9e-8c68b24f1041" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="EventParams" display-name="EventParams" uuid="158f7cbf-c4c6-4961-9878-95dce1e94445" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="2"/>
		<object access-modifier="private" name="SynchronizeColor" display-name="SynchronizeColor" uuid="9b4588da-36b7-495b-b422-b38e77fe4da0" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
				<body kind="om">
					<![CDATA[// принудительно скрываем/отображаем столбец с цветом оси
View.Columns[private.Columns.CL_AXIS].Hidden = value || View.Columns[private.Columns.CL_LINE].Hidden;]]>
				</body>
			</do-on>
		</object>
		<init target="pTheme" ver="5" ref="init_Theme"/>
		<do-trace access-modifier="private" target="SynchronizeColor" ver="5">
			<body>
				<![CDATA[pChart.SynchronizeColor]]>
			</body>
		</do-trace>
		<init target="pScreenKeyboard" ver="5" ref="init_ScreenKeyboard"/>
		<object access-modifier="private" name="Columns" display-name="Колонки в таблице Легенды" uuid="eec16a2e-37a3-4a3a-bf26-1003e90e4d39" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
			<object access-modifier="private" name="ADVISE" display-name="ADVISE" uuid="942d526c-7fae-4fcc-9507-288af26ea7d9" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="CL_AXIS" display-name="CL_AXIS" uuid="07ff8536-ea78-4e93-8368-fcdd985637f6" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="CL_LINE" display-name="CL_LINE" uuid="401b5d25-d8db-4a05-8813-a5699434eff1" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="LINE_STYLE" display-name="LINE_STYLE" uuid="58c8bd32-e643-4c93-95aa-d218abd79c47" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="MARKER" display-name="MARKER" uuid="be4ee1c5-ac7f-4860-a738-3c0c2cdade83" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="DESCRIPTION" display-name="DESCRIPTION" uuid="77285c2f-0cdb-4c91-a713-be1f69c629a8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="TAG" display-name="TAG" uuid="8bf4b4bb-874c-4edc-aa8a-2095059bb30e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="VALUE" display-name="VALUE" uuid="fe225304-2767-4d42-bef5-d533eb0879de" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="EU" display-name="EU" uuid="a8b59c40-8738-443e-a0ac-364c08e7fdb9" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="TIME" display-name="TIME" uuid="1e83ae24-c635-4e51-ad5b-955229794df2" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="QUALITY" display-name="QUALITY" uuid="30f5bec3-ce4b-43b9-8ea2-c3d6053cb92e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="MINIMUM" display-name="MINIMUM" uuid="677636fb-0a9a-4098-90db-d71ff5fd2149" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="MAXIMUM" display-name="MAXIMUM" uuid="3f6d0323-1494-4cc9-a12f-fe33482a37bf" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="QUANTITY" display-name="QUANTITY" uuid="ac66e4f2-d98b-4e92-80db-6b9367ddca2c" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<init target="ADVISE" ver="5" value="0"/>
			<init target="CL_AXIS" ver="5" value="1"/>
			<init target="CL_LINE" ver="5" value="2"/>
			<init target="LINE_STYLE" ver="5" value="3"/>
			<init target="MARKER" ver="5" value="4"/>
			<init target="DESCRIPTION" ver="5" value="5"/>
			<init target="TAG" ver="5" value="6"/>
			<init target="VALUE" ver="5" value="7"/>
			<init target="EU" ver="5" value="8"/>
			<init target="TIME" ver="5" value="9"/>
			<init target="QUALITY" ver="5" value="10"/>
			<init target="MINIMUM" ver="5" value="11"/>
			<init target="MAXIMUM" ver="5" value="12"/>
			<init target="QUANTITY" ver="5" value="13"/>
			<object access-modifier="private" name="INTERPOLATION" display-name="INTERPOLATION" uuid="1eceaa9b-f69a-4443-abb7-c26e357877c4" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<init target="INTERPOLATION" ver="5" value="14"/>
		</object>
		<do access-modifier="private" name="SetVQT" display-name="SetVQT" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[View.Initialize();

if (row >= 0 && row < View.TableModel.GetRowCount())
{
	// значение
	if (Variant.IsEmpty(value))
		View.TableModel.SetCellData(row, private.Columns.VALUE, "");
	else View.TableModel.SetCellData(row, private.Columns.VALUE, pChart.private.VariantToString(value, pChart.YAxisPrecision));
	
	// качество
	View.TableModel.SetCellData(row, private.Columns.QUALITY, quality);
		
	// метка времени
	format: string = ShowMilliseconds ? "%d.%m.%Y %H:%M:%S.%f" : "%d.%m.%Y %H:%M:%S";
	if (pChart.UseServerTime)
		format += nXColumn == unit.Const.tmSOURCE ? " (Источника)" : " (Сервера)";
	timeStr: string = DateTime.ToString(DateTime.ToLocal(timestamp), format);	
	View.TableModel.SetCellData(row, private.Columns.TIME, timeStr);
}]]>
			</body>
			<param access-modifier="private" name="row" display-name="" uuid="8b3e4c7b-2f06-41fe-924a-2e6071849a1b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="value" display-name="" uuid="2a0c51c8-3a00-4de1-afd8-f34eff76a3ad" base-type="variant" base-type-id="7d3322c1-a2cf-4732-a957-abd69e3e4b7a" ver="5"/>
			<param access-modifier="private" name="quality" display-name="" uuid="5ee01bf1-3f4f-40c6-a396-963386772ad8" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
			<param access-modifier="private" name="timestamp" display-name="" uuid="dfe5f4af-fc03-4541-ae5f-635cdc39b034" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
			<param access-modifier="private" name="nXColumn" display-name="" uuid="2a8b44c3-d3ee-4ea9-906d-c750f59908d1" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
	</object>
	<object access-modifier="private" name="Initializer" display-name="Initializer" uuid="28c8eb81-ea87-4a67-9e1e-b3aed45375b9" base-type="Initializer" base-type-id="6db89679-9299-4993-ad1a-0d086cd1c7d2" ver="5" description="" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Initialized">
			<body kind="om">
				<![CDATA[View.Initialize();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="95fdee38-ce8f-423c-a2b9-074682ba1b2e" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<object access-modifier="private" name="Files" display-name="Files" uuid="79862f6b-ff3e-4b19-b1ac-78870f274eb4" base-type="FileSystem" base-type-id="34d744f9-7303-4077-a3f7-9c06c0945512" ver="5">
		<designed target="RootPath" value="/" ver="5"/>
	</object>
	<object access-modifier="private" name="Layout" display-name="Layout" uuid="3af89793-ea94-4ba4-ba77-dfb30414f236" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="5">
		<designed target="Orientation" value="1" ver="5"/>
		<designed target="Gap" value="0" ver="5"/>
	</object>
	<object access-modifier="private" name="View" display-name="View" uuid="21d26406-accd-478d-8782-dd9049dc4818" base-type="Table" base-type-id="c65ff4dc-f22b-47d3-9333-72c4e4e5f662" ver="5">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="Width" value="800" ver="5"/>
		<designed target="Height" value="150" ver="5"/>
		<designed target="SelectionBehavior" value="1" ver="5"/>
		<designed target="SelectionMode" value="3" ver="5"/>
		<object access-modifier="private" name="Columns" display-name="Columns" uuid="649a0799-259f-4d6a-9b02-92572a9839ab" base-type="TableColumn" base-type-id="109c05c5-8dcf-4a8f-aedd-5bb547cca2d4" ver="5" cardinal="15">
			<designed target="Title" value="" ver="5"/>
			<designed target="Description" value="" ver="5"/>
			<designed target="Id" value="" ver="5"/>
			<designed target="BackgroundColor" value="0xffffffff" ver="5"/>
			<designed target="ForegroundColor" value="0xff000000" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="TitleBackgroundColor" value="0xfff0f0f0" ver="5"/>
			<designed target="TitleForegroundColor" value="0xff000000" ver="5"/>
			<designed target="TitleFont" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="Width" value="20" ver="5"/>
			<designed target="WidthResizeMode" value="0" ver="5"/>
			<designed target="Hidden" value="false" ver="5"/>
			<designed target="NumberFormat" value="%d" ver="5"/>
			<designed target="TimeFormat" value="dd.MM.yyyy hh:mm:ss.zzz" ver="5"/>
			<designed target="Emptiable" value="true" ver="5"/>
			<designed target="TextAlignment" value="132" ver="5"/>
			<designed target="JsonFilter" value="" ver="5"/>
			<designed target="SortingEnabled" value="false" ver="5"/>
			<designed target="SortOrder" value="0" ver="5"/>
			<designed target="SortPriority" value="0" ver="5"/>
			<designed target="WordWrap" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseDoubleClick">
				<body kind="om">
					<![CDATA[pOnDoubleClick.Invoke();]]>
				</body>
			</do-on>
			<designed target="TitleTextAlignment" value="132" ver="5"/>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="WidthChanged">
				<body kind="om">
					<![CDATA[if (initialized)
	pOnViewChanged.Invoke();]]>
				</body>
			</do-on>
			<designed target="ColumnOwnId" value="" ver="5"/>
			<designed target="SortMode" value="0" ver="5"/>
			<do-trace access-modifier="private" target="TitleBackgroundColor" ver="5">
				<body>
					<![CDATA[private.pTheme.BackgroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleForegroundColor" ver="5">
				<body>
					<![CDATA[private.pTheme.ForegroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="BackgroundColor" ver="5">
				<body>
					<![CDATA[private.pTheme.EditorBrushColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="ForegroundColor" ver="5">
				<body>
					<![CDATA[private.pTheme.EditorFontColor]]>
				</body>
			</do-trace>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="MouseRightTitleClick">
				<body kind="om">
					<![CDATA[ShowContextMenu.mX = ScreenX(MouseX, MouseY);
ShowContextMenu.mY = ScreenY(MouseX, MouseY);
ShowContextMenu.Invoke();]]>
				</body>
			</do-on>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[private.pTheme.Font]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleFont" ver="5">
				<body>
					<![CDATA[private.pTheme.TitleFont]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="TableModel_1" display-name="TableModel_1" uuid="5b0f4fbf-4f30-485c-b676-c38f24c1ad7f" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5">
			<designed target="Frozen" value="false" ver="5"/>
			<designed target="MaxRowCount" value="10000" ver="5"/>
		</object>
		<designed target="HeaderHeight" value="25" ver="5"/>
		<designed target="HeaderVisible" value="true" ver="5"/>
		<designed target="RowHeight" value="25" ver="5"/>
		<designed target="RowOrder" value="0" ver="5"/>
		<designed target="LatestRowTracking" value="false" ver="5"/>
		<init target="TableModel" ver="5" ref="TableModel_1"/>
		<object access-modifier="private" name="TableDecorator_1" display-name="TableDecorator_1" uuid="5a2e21d6-cc0e-441c-9ed4-48ec92c45a05" base-type="TableDecorator" base-type-id="2ff6a2d7-9573-4060-bfea-29c63d61b079" ver="5">
			<designed target="JsonDecorator" value="" ver="5"/>
			<do-trace access-modifier="private" target="JsonDecorator" ver="5">
				<body>
					<![CDATA[GetJsonDecorator(selectionColor)]]>
				</body>
			</do-trace>
		</object>
		<designed target="SelectionOverlayEnabled" value="false" ver="5"/>
		<designed target="DelayedSortingEnabled" value="false" ver="5"/>
		<designed target="HorizontalScrollMode" value="0" ver="5"/>
		<designed target="VerticalScrollMode" value="0" ver="5"/>
		<designed target="HorizontalScrollBarPolicy" value="0" ver="5"/>
		<designed target="VerticalScrollBarPolicy" value="0" ver="5"/>
		<do access-modifier="private" name="Initialize" display-name="Initialize" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// Повторная инициализация не нужна
if (initialized)
	return;

// Номера колонок в модели и в таблице должны соответствовать и равны значениям констант private.Columns.*
TableModel_1.AddColumn("Advise",     "","","","string",false,true);
TableModel_1.AddColumn("AxisColor",  "","","","uint4",false,true);
TableModel_1.AddColumn("LineColor",  "","","","uint4",false,true);
TableModel_1.AddColumn("LineStyle",  "","","","variant",false,true);
TableModel_1.AddColumn("Marker",     "","","","variant",false,true);
TableModel_1.AddColumn("Description","","","","string",false,true);
TableModel_1.AddColumn("Tag",        "","","","string",false,true);
TableModel_1.AddColumn("Value",      "","","","string",false,true);
TableModel_1.AddColumn("EU",         "","","","string",false,true);
TableModel_1.AddColumn("Time",       "","","","string",false,true);
TableModel_1.AddColumn("Quality",    "","","","uint4",false,true);
TableModel_1.AddColumn("Minimum",    "","","","string",false,true);
TableModel_1.AddColumn("Maximum",    "","","","string",false,true);
TableModel_1.AddColumn("Quantity",   "","","","uint8",false,true);
TableModel_1.AddColumn("Interpolation", "","","","string",false,true);

Columns[0].Id = "Advise";
Columns[0].Title = "";
Columns[0].Description = "Подписка";
Columns[0].Width = 20;

Columns[1].Id = "AxisColor";
Columns[1].Title = "Шкала";
Columns[1].Description = "Цвет шкалы графика";
Columns[1].Width = 50;

Columns[2].Id = "LineColor";
Columns[2].Title = "Цвет";
Columns[2].Description = "Цвет линии графика";
Columns[2].Width = 50;

Columns[3].Id = "LineStyle";
Columns[3].Title = "Стиль";
Columns[3].Description = "Стиль линии";
Columns[3].Width = 60;

Columns[4].Id = "Marker";
Columns[4].Title = "Маркер";
Columns[4].Description = "Маркер точек";
Columns[4].Width = 60;

Columns[5].Id = "Description";
Columns[5].Title = "Описание";
Columns[5].Description = "Описание";
Columns[5].Width = 200;

Columns[6].Id = "Tag";
Columns[6].Title = "Имя";
Columns[6].Description = "Тэг сигнала";
Columns[6].Width = 75;

Columns[7].Id = "Value";
Columns[7].Title = "Значение";
Columns[7].Description = "Значение";
Columns[7].Width = 75;

Columns[8].Id = "EU";
Columns[8].Title = "Единицы";
Columns[8].Description = "Единицы измерения";
Columns[8].Width = 50;

Columns[9].Id = "Time";
Columns[9].Title = "Время";
Columns[9].Description = "Метка времени";
Columns[9].Width = 130;

Columns[10].Id = "Quality";
Columns[10].Title = "Качество";
Columns[10].Description = "Качество сигнала ";
Columns[10].Width = 60;

Columns[11].Id = "Minimum";
Columns[11].Title = "Минимум";
Columns[11].Description = "Минимальное значение";
Columns[11].Width = 100;

Columns[12].Id = "Maximum";
Columns[12].Title = "Максимум";
Columns[12].Description = "Максимальное значение";
Columns[12].Width = 100;

Columns[13].Id = "Quantity";
Columns[13].Title = "Количество";
Columns[13].Description = "Количество точек на графике";
Columns[13].Width = 100;

Columns[14].Id = "Interpolation";
Columns[14].Title = "Интерполяция";
Columns[14].Description = "Режим интерполяции линии";
Columns[14].Width = 100;

// инициализация завершена
initialized = true;]]>
			</body>
		</do>
		<do access-modifier="private" name="GetJsonDecorator" display-name="GetJsonDecorator" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var decorator = {
    StyleDictionary: [{
            'style_name': "selected_style",
            'style': { 'background_color': '#' + selectionColor.toString(16) }
        },
    ],
    Decorating: [{
            'decoration_rule_name': "selected_rule",
            'decoration_rule': { 'row:isSelected': true },
            'rowstyle': "selected_style"
        }
    ]
}

var colorDecorating_1 = {};				// Правило для отображения цвета линии
colorDecorating_1["decoration_rule_name"] = "rule_ColorLine";
colorDecorating_1["columnstyle"] = {'LineColor':"style_ColorLine"};
decorator.Decorating.push(colorDecorating_1);

var userStyle_1 = {};
userStyle_1["style_name"] = "style_ColorLine";
userStyle_1["style"] = {'background_color':'data:LineColor','color': 'data:LineColor'};
decorator.StyleDictionary.push(userStyle_1);

var colorDecorating_2 = {};				// Правило для отображения цвета оси
colorDecorating_2["decoration_rule_name"] = "rule_ColorAxis";
colorDecorating_2["columnstyle"] = {'AxisColor':"style_ColorAxis"};
decorator.Decorating.push(colorDecorating_2);

var userStyle_2 = {};
userStyle_2["style_name"] = "style_ColorAxis";
userStyle_2["style"] = {'background_color':'data:AxisColor','color': 'data:AxisColor'};
decorator.StyleDictionary.push(userStyle_2);

var adviseDecorating_1 = {};			// Правило декорирования при не отвечающем сервере
adviseDecorating_1["decoration_rule_name"] = "rule_AdviseWarning_1";
adviseDecorating_1["columnstyle"] = {'Advise':"style_AdviseWarning_1"};
adviseDecorating_1["decoration_rule"] = {'data:Advise': '!'};
decorator.Decorating.push(adviseDecorating_1);

var userStyle_3 = {};
userStyle_3["style_name"] = "style_AdviseWarning_1";
userStyle_3["style"] = {'background_color':'#ffffff00','text_align': 'center'};
decorator.StyleDictionary.push(userStyle_3);

var adviseDecorating_2 = {};		// Правило декорирования при отсутствии тэга сигнала
adviseDecorating_2["decoration_rule_name"] = "rule_AdviseWarning_2";
adviseDecorating_2["columnstyle"] = {'Advise':"style_AdviseWarning_2"};
adviseDecorating_2["decoration_rule"] = {'data:Advise': '! '};		// Признак отличается от предыдущего наличием пробела!
decorator.Decorating.push(adviseDecorating_2);

var userStyle_4 = {};
userStyle_4["style_name"] = "style_AdviseWarning_2";
userStyle_4["style"] = {'background_color':'#ffff0000','text_align': 'center'};
decorator.StyleDictionary.push(userStyle_4);

return JSON.stringify(decorator);]]>
			</body>
			<param access-modifier="private" name="selectionColor" display-name="" uuid="075fa0e5-ba69-4a21-9053-655f61f0b784" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		</do>
		<do-trace access-modifier="private" target="FrameColor" ver="5">
			<body>
				<![CDATA[private.pTheme.BorderColor]]>
			</body>
		</do-trace>
		<designed target="BackgroundColor" value="0xffffffff" ver="5"/>
		<designed target="FrameColor" value="0xff808080" ver="5"/>
		<designed target="GridColor" value="0xffa0a0a0" ver="5"/>
		<do-trace access-modifier="private" target="BackgroundColor" ver="5">
			<body>
				<![CDATA[private.pTheme.EditorBrushColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="GridColor" ver="5">
			<body>
				<![CDATA[private.pTheme.DisabledBorderColor]]>
			</body>
		</do-trace>
		<object access-modifier="private" name="selectionColor" display-name="selectionColor" uuid="c4381609-133e-4bea-b710-b467ce7c2175" base-type="notifying_uint8" base-type-id="2e6d6c20-2489-49e1-9d5f-fe68a21b43df" ver="5" description="" cardinal="1"/>
		<do-trace access-modifier="private" target="selectionColor" ver="5">
			<body>
				<![CDATA[private.pTheme.SelectionColor]]>
			</body>
		</do-trace>
		<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="CurrentChanged">
			<body kind="om">
				<![CDATA[//Debug.Log("CurrentChanged.row="+String.ToString(row));
if (row > -1)
	pChart.Lines.SetSelect(iItemInLegend[row]);
else	pChart.Lines.SetSelect(0);]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="RowHeight" ver="5">
			<body>
				<![CDATA[private.StringUtils.CalcRowHeight(private.pTheme.Font)]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="HeaderHeight" ver="5">
			<body>
				<![CDATA[private.StringUtils.CalcRowHeight(private.pTheme.TitleFont)]]>
			</body>
		</do-trace>
		<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="MouseRelease">
			<body kind="om">
				<![CDATA[if (button == 2) // правая клавиша мыши
{
	private.EventParams[0] = String.ToString(ScreenX(MouseX, MouseY));
	private.EventParams[1] = String.ToString(ScreenY(MouseX, MouseY));
	pOnMouseRightRelease.Invoke();
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="initialized" display-name="initialized" uuid="fc70030d-38df-4bbf-bcf2-f11d830d84d7" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="ShowContextMenu" display-name="ShowContextMenu" uuid="b26f5b93-ab63-4063-9e82-6d14ae1b64a8" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-new" form-by-id="false">
				<object access-modifier="private" uuid="1bbed998-379a-4aaa-9d4e-1e64c0614cb0" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
					<init target="pResult" ver="5" ref="MenuResult"/>
					<init target="pAction" ver="5" ref="OnMenuClick"/>
					<init target="WindowX" ver="5">
						<expr>
							<![CDATA[mX]]>
						</expr>
					</init>
					<init target="WindowY" ver="5">
						<expr>
							<![CDATA[mY]]>
						</expr>
					</init>
					<init target="Items" ver="5">
						<expr>
							<![CDATA[GetMenuItems()]]>
						</expr>
					</init>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
			<object access-modifier="private" name="mX" display-name="mX" uuid="43b2ab13-2434-4e31-924c-6a40182a817e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="mY" display-name="mY" uuid="83c5ee5c-034f-415a-a4fb-66f3c66660f8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="MenuResult" display-name="MenuResult" uuid="f6f639cf-7b71-4bfa-ba8e-e14d0c0d5480" base-type="MenuResult" base-type-id="0fe7658c-92f4-4af7-b038-3594414ac651" ver="5"/>
			<object access-modifier="private" name="OnMenuClick" display-name="OnMenuClick" uuid="5f450b5b-d167-4fb1-9b16-8d82883461db" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[if (String.StartsWith(MenuResult.Id, "column_"))
{
	columnId: string = String.SubString(MenuResult.Id, 7);
	ChangeColumnVisibility(columnId);
}]]>
					</body>
				</do-on>
			</object>
			<do access-modifier="private" name="GetMenuItems" display-name="GetMenuItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="javascript">
					<![CDATA[var items = [];

var i = 0;
while (i < View.Columns.Length)
{
	if (!private.SynchronizeColor.Value || i != private.Columns.CL_AXIS)
	{
		var column = View.Columns[i];
		items.push({
			 'id': "column_" + column.Id,
			 'title': column.Title == "" ? column.Description : column.Title,
			 'checked': !column.Hidden,
			 'staysOpen': true
			});
	}
	i += 1;
}

return JSON.stringify(items);]]>
				</body>
			</do>
			<do access-modifier="private" name="ChangeColumnVisibility" display-name="ChangeColumnVisibility" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[for (i: int4 = 0; i < View.Columns.Length; i += 1)
{
	if (View.Columns[i].Id == id)
	{
		View.Columns[i].Hidden = !View.Columns[i].Hidden;
		pOnViewChanged.Invoke();
		break;
	}
}]]>
				</body>
				<param access-modifier="private" name="id" display-name="" uuid="05b9f9d3-125e-481f-bcbb-ca9498666310" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</do>
		</object>
	</object>
	<do access-modifier="private" name="Clear" display-name="Clear" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[rowCount: int4 = View.TableModel.GetRowCount();
View.TableModel.Clear();

if (rowCount > 0)
	pOnRowsChanged.Invoke();]]>
		</body>
	</do>
	<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//Debug.Log("Update legend rows");
View.Initialize();

LinesCount:int4 = 0;			// для подсчета графиков
RowCount0:int4 = View.TableModel_1.GetRowCount(); // Запоминаем начальное количество строк в таблице

i:int4 = 1;
while (i <= unit.Const.MAX_LINES)		// перебираем графики
{
		//Для оперативного режима ВЫводим строки только с основным режимом времени, в историческом режиме выводим все строки
	bNeedTimeMode:bool = (pChart.ActiveMode == unit.Const.amOPERATIVE)?(pChart.Params.Lines[i].bMainTime):(true);	
		//В первую очередь выводим только осноные графики
	bNeedTypeGraph:bool = (pChart.Params.Lines[i].TypeGraph==unit.Const.tgFILE_GRAPH) && (pChart.ActiveMode==unit.Const.amHISTORY);
	bNeedTypeGraph = bNeedTypeGraph || (pChart.Params.Lines[i].TypeGraph==unit.Const.tgMAIN_GRAPH);
	if (pChart.Params.Lines[i].Used && bNeedTimeMode && bNeedTypeGraph)		
	{
		LinesCount += 1; // увеличиваем счетчик графиков
		if (View.TableModel_1.GetRowCount() < LinesCount)
			View.TableModel_1.AddRow();	 // если строк не хватает добавляем
		
		iItemInLegend[LinesCount - 1] = i;	// Запоминаем индекс графика для строки легенды
		nRowInLegend[i] = LinesCount - 1;	// Запоминаем строку легенды для графика
		
		UpdateItem(i);
		UpdateItemVQT(i);
		UpdateItemMinMaxSize(i);
	}
	else
	{
		nRowInLegend[i] = -1;	// Обозначаем отсутствие графика в легенде	
	}
	i += 1;
}

while (View.TableModel_1.GetRowCount() > LinesCount)
{
	View.TableModel_1.RemoveRow(View.TableModel_1.GetRowCount()-1);
}

SelectItem(pChart.SelectedItem);

if (RowCount0 != View.TableModel_1.GetRowCount()) // Если количество строк изменилось
	pOnRowsChanged.Invoke();]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateItem" display-name="UpdateItem" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[row: int4 = nRowInLegend[line];
if (row >= 0 && row < View.TableModel.GetRowCount())		
{
	adviseSymbol: string;
	if (pChart.Params.Lines[line].TypeGraph == unit.Const.tgFILE_GRAPH)
		adviseSymbol = "f";
	else if (pChart.Line[line].ApItem.AdviseState == unit.Const.stNOADVISED)
		adviseSymbol = "!";
	else adviseSymbol = "";
	View.TableModel_1.SetCellData(row, private.Columns.ADVISE, adviseSymbol);

	if (ShowRelativeTag.Value && pChart.Params.Lines[line].RelationTag != "")
		View.TableModel_1.SetCellData(row, private.Columns.TAG, pChart.Params.Lines[line].RelationTag);
	else View.TableModel_1.SetCellData(row, private.Columns.TAG, pChart.Params.Lines[line].Tag);
	if (pChart.Params.Lines[line].Tag == "")
		View.TableModel_1.SetCellData(row, private.Columns.TAG, pChart.Params.Lines[line].FileName);
	View.TableModel_1.SetCellData(row, private.Columns.DESCRIPTION, pChart.Params.Lines[line].Description);	

	// едины измерения	
	eUnit: string = pChart.Params.Lines[line].AltUnit != "" ? pChart.Params.Lines[line].AltUnit : pChart.Params.Lines[line].Unit;
	View.TableModel_1.SetCellData(row, private.Columns.EU, eUnit);
	
	// маркер точек
	pointSymbol: string = pChart.Params.Lines[line].PointSymbol;
	if (pointSymbol == "") pointSymbol = "●"; // символ по умолчанию
	View.TableModel_1.SetCellData(row, private.Columns.MARKER, pointSymbol);
	
	// стиль линии
	lineStyle: string = unit.Const.lst.GetName(pChart.Params.Lines[line].StyleGood);
	View.TableModel_1.SetCellData(row, private.Columns.LINE_STYLE, lineStyle);

	// интерполяция
	interpolation_mode: string = pChart.Params.Lines[line].Interpolation ? "линии" : "ступеньки";
	View.TableModel_1.SetCellData(row, private.Columns.INTERPOLATION, interpolation_mode);

	// Цвет оси и линии
	nAxis: int4 = pChart.Params.Lines[line].numAxis;	// номер оси к которой привязан график
	View.TableModel_1.SetCellData(row, private.Columns.CL_AXIS, pChart.Params.Axis[nAxis].ColorY);
	View.TableModel_1.SetCellData(row, private.Columns.CL_LINE, pChart.Params.Lines[line].ColorMain);
}]]>
		</body>
		<param access-modifier="private" name="line" display-name="" uuid="8479c613-4c65-47f7-a4d9-7e0faf60cfb9" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
	</do>
	<do access-modifier="private" name="SelectItem" display-name="SelectItem" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[row: int4 = nRowInLegend[line];
if (row >= 0 && row < View.TableModel.GetRowCount())		
	View.SetSelectedRows("[" + String.ToString(row) + "]");
else View.SetSelectedRows("[]");]]>
		</body>
		<param access-modifier="private" name="line" display-name="" uuid="e530c863-c9be-4f04-b788-e69e71c4945e" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
	</do>
	<do access-modifier="private" name="UpdateVQT" display-name="UpdateVQT" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[View.Initialize();
//Debug.Log("Update VQT on legend");

for (i: int4; i < pChart.Line.Length; i += 1)
{
	if (pChart.Params.Lines[i].Used)
		UpdateItemVQT(i);
}]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateItemVQT" display-name="UpdateItemVQT" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[empty: variant;
row: int4 = nRowInLegend[line];
if (row >= 0 && row < View.TableModel.GetRowCount())		
{	
	activeReper: int4 = pChart.Repers.iActive;
	if (activeReper > 0)
	{
		nChart: int4 = pChart.Params.Lines[line].nChart;
		value: variant = pChart.Chart[nChart].ControlLine[activeReper].CrossPoint[line].GetValue(unit.Const.cpVALUE);
		quality: uint4 = Variant.ToUint4(pChart.Chart[nChart].ControlLine[activeReper].CrossPoint[line].GetValue(unit.Const.cpQUALITY), 0);
		timestamp: uint8 = Variant.ToUint8(pChart.Chart[nChart].ControlLine[activeReper].Value, 0);
		private.SetVQT(row, value, quality, timestamp, pChart.Params.Lines[line].nXColumn);
		//Debug.Log("Set VQT for active reper");
	}
	else
	{
		if (pChart.ActiveMode == unit.Const.amOPERATIVE && pChart.ShowRedLine)
		{
			recalcValue: variant = pChart.Line[line].ApItem.Value;
			if (!Variant.IsEmpty(recalcValue) && !Variant.IsBool(recalcValue) && !Variant.IsString(recalcValue))
			{
				recalcValue *= pChart.Params.Lines[line].Ratio;
				recalcValue += pChart.Params.Lines[line].Offset;
			}	
			private.SetVQT(row, recalcValue, pChart.Line[line].ApItem.Quality, pChart.Line[line].ApItem.TimeStamp, unit.Const.tmSOURCE);
			//Debug.Log("Set VQT as current value: " + pChart.Line[line].ApItem.ValueAsString);
		}
		else
		{
			View.TableModel.SetCellData(row, private.Columns.VALUE, empty);
			View.TableModel.SetCellData(row, private.Columns.TIME, empty);
			View.TableModel.SetCellData(row, private.Columns.QUALITY, empty);
			//Debug.Log("Clear VQT without active reper and redline");
		}
	}
}]]>
		</body>
		<param access-modifier="private" name="line" display-name="" uuid="6d7f11fc-a41c-49d0-9b0b-a855099ee02a" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
	</do>
	<do access-modifier="private" name="UpdateMinMaxSize" display-name="UpdateMinMaxSize" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[View.Initialize();
//Debug.Log("Update Min, Max and Quantity on legend");

for (i: int4; i < pChart.Line.Length; i += 1)
{
	if (pChart.Params.Lines[i].Used)
		UpdateItemMinMaxSize(i);
}]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateItemMinMaxSize" display-name="UpdateItemMinMaxSize" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[row: int4 = nRowInLegend[line];
if (row >= 0 && row < View.TableModel.GetRowCount())		
{
	if (pChart.Line[line].DataSource_1.Size > 0)
	{
		minY: string = pChart.private.VariantToString(pChart.Line[line].GetMinY(), pChart.YAxisPrecision);
		maxY: string = pChart.private.VariantToString(pChart.Line[line].GetMaxY(), pChart.YAxisPrecision);
		View.TableModel.SetCellData(row, private.Columns.MINIMUM, minY);
		View.TableModel.SetCellData(row, private.Columns.MAXIMUM, maxY);
	}
	else
	{
		View.TableModel.SetCellData(row, private.Columns.MINIMUM, "");
		View.TableModel.SetCellData(row, private.Columns.MAXIMUM, "");
	}
	
	size: uint8 = pChart.Line[line].DataSource_1.Size;
	View.TableModel.SetCellData(row, private.Columns.QUANTITY, size);
}]]>
		</body>
		<param access-modifier="private" name="line" display-name="" uuid="9e5e33ed-9ccc-4f4c-89ee-e34a720d39b7" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
	</do>
	<object access-modifier="private" name="pChart" display-name="pChart" uuid="da6ea230-56f3-463f-bb00-15d0370488da" base-type="Trends_Chart" base-type-id="659f73ba-7fa5-4aa4-ac4d-623541275829" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="iItemInLegend" display-name="iItemInLegend" uuid="05174ebb-ba63-4abe-8147-eb0b7009bdb5" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" cardinal="30"/>
	<object access-modifier="private" name="nRowInLegend" display-name="nRowInLegend" uuid="61d54c5c-f3fe-4f2e-a07c-ff2b61925aa5" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" cardinal="31"/>
	<object access-modifier="private" name="pOnViewChanged" display-name="pOnViewChanged" uuid="7e82afe4-0bc0-4921-9698-242f9b1a56d6" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-сonst="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnRowsChanged" display-name="pOnRowsChanged" uuid="36f3768e-24fb-4e31-ac86-69e0b8e81e6a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-сonst="true" base-ref="true" ver="5"/>
	<do access-modifier="private" name="GetViewSettings" display-name="GetViewSettings" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[View.Initialize();

var settings = {
	"Columns" : {}
};

for (var i = 0; i < View.Columns.Length; i++)
{		
	var column = View.Columns[i];

	var columnInfo = {
		"Index": column.Index,
		"Width": column.Width
	};

	if (column.Hidden)
		columnInfo.Hidden = true;

	if (column.SortingEnabled != false)
	{
		columnInfo.SortOrder = column.SortOrder;
		columnInfo.SortPriority = column.SortPriority;
	}

	settings.Columns[column.Id] = columnInfo;
}

return JSON.stringify(settings, null, 2);]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateView" display-name="UpdateView" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[var settings = JSON.parse(json);

if (settings.Columns != undefined)
{
	View.Initialize();

	for (var i = 0; i < View.Columns.Length; i++)
	{
		var column = View.Columns[i];

		var columnInfo = settings.Columns[column.Id];
		if (columnInfo != undefined)
		{
			var columnWidth = columnInfo.Width;
			if (columnWidth > 0) // ширину столбца изменяем, только если она больше 0
				column.Width = columnWidth;

			if (private.SynchronizeColor.Value && i == private.Columns.CL_AXIS)
				column.Hidden = true;
			else column.Hidden = columnInfo.Hidden == true;

			column.SortingEnabled = columnInfo.SortOrder != undefined;
			if (column.SortingEnabled)
			{
				column.SortOrder = columnInfo.SortOrder;
				column.SortPriority = columnInfo.SortPriority;
			}
		}
	}
}]]>
		</body>
		<param access-modifier="private" name="json" display-name="" uuid="3fb3a75a-009d-45eb-9c5a-1cb617f7327b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<object access-modifier="private" name="pOnDoubleClick" display-name="pOnDoubleClick" uuid="ada502e8-a72f-4a65-9a4d-cf0e67dd670c" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnMouseRightRelease" display-name="pOnMouseRightRelease" uuid="9370bad8-4ad4-471d-a609-3ad94658962f" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-сonst="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="ShowRelativeTag" display-name="Показывать относительный тег" uuid="13f42770-5e16-40d8-931c-d2dd347139f8" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<object access-modifier="private" name="ShowMilliseconds" display-name="Показывать миллисекунды" uuid="a57193b3-9dfc-4dd5-853f-ad888481c549" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	<designed target="Flip" value="0" ver="5"/>
	<param access-modifier="private" name="init_Theme" display-name="Тема оформления" uuid="aceb0bb2-bc06-44a5-9018-fba9fb89ac8f" base-type="Trends_Theme" base-type-id="3fbfa4c2-c742-4bec-94dc-d1bcb7ef25b6" base-const="true" base-ref="true" ver="5"/>
	<do access-modifier="private" name="GetEventParam" display-name="GetEventParam" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[if (numParam >= 0 && numParam < private.EventParams.Length)
	return private.EventParams[numParam];
else
	return "";]]>
		</body>
		<param access-modifier="private" name="numParam" display-name="" uuid="ddf1e6ef-44c7-4731-9b70-e179acb19b44" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	</do>
	<param access-modifier="private" name="init_ScreenKeyboard" display-name="Вызов экранной клавиатуры" uuid="14bea795-fda8-4fb9-9862-59e5af80b41c" base-type="ScreenKeyboardOptions" base-type-id="0589bc8e-fbb2-4f0e-b5d2-f0d825538ef1" ver="5" description="" cardinal="1" base-ref="true">
		<init target="Enabled" ver="5" value="false"/>
	</param>
</type>

