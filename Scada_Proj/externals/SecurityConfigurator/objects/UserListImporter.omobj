<type access-modifier="private" name="UserListImporter" display-name="UserListImporter" uuid="a1e430d4-51a5-4f1d-b125-8b6fae7c6553" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5" description="">
	<object access-modifier="private" name="private" display-name="private" uuid="ce721995-4b7b-4a78-ba84-e3225c3ee507" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="Model" display-name="Model" uuid="110c21b2-7120-4797-8025-826291069d29" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5" description="" cardinal="1">
			<designed target="Frozen" value="false" ver="5"/>
			<designed target="MaxRowCount" value="10000" ver="5"/>
			<designed target="OptOfProcessingEvents" value="0" ver="5"/>
			<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if (GetColumnCount() > 0)
	return;

Reset();
AddColumn("Login","","","","string",false,true);
AddColumn("Password","","","","string",false,true);
AddColumn("DisplayName","","","","string",false,true);
AddColumn("Name","","","","string",false,true);
AddColumn("Surname","","","","string",false,true);
AddColumn("MidName","","","","string",false,true);
AddColumn("Position","","","","string",false,true);
AddColumn("Unit","","","","string",false,true);
AddColumn("Email","","","","string",false,true);
AddColumn("Phone","","","","string",false,true);
AddColumn("Comment","","","","string",false,true);
AddColumn("Groups","","","","string",false,true);]]>
				</body>
			</do>
			<do access-modifier="private" name="ReadContent" display-name="ReadContent" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[//После доработки tableModel перенести код в обработчик успешного завершения чтения из файла
//проверки, результат которых может поломать сохранение пользователей вынесен сюда, для выполнения предварительных проверок

ProgressStage.Update("Чтение файла...");

//cписок поддерживаемых столбцов
const columns = ["Login", "DisplayName", "Name", "Surname", "MidName", "Position", "Unit", "Email", "Phone", "Comment", "Password", "Groups"];
const stringSeparator = ",";

try
{
	//формируем массивы данных пользователй 
	try
	{	
		var usersDictionary = {
			"Logins": [],
			"DisplayNames":[]
		};
		let userList = JSON.parse(Manager.userList).data;
		for (let user of userList)
		{
			usersDictionary.Logins.push(user.symbolicId);
			usersDictionary.DisplayNames.push(user.displayName);
		}
	}
	catch (error)
	{
		throw new Error(`Не удалось разобрать список пользователей \n ${error.message}`);
	}
	
	//формируем словарь групп вида {displayName:uid}
	try
	{
		var groupsDictionary = {};
		let groupList = JSON.parse(Manager.groupList).data;
		groupList.forEach((group) => groupsDictionary[group.displayName] = group.uid);
	}
	catch (error)
	{
		throw new Error(`Не удалось разобрать список групп \n ${error.message}`);
	}
	
	ProgressStage.Update("Проверка структуры таблицы...");
	//Проверка структуры таблицы
	//наличие столбцов
	if (GetColumnCount() == 0)
		throw new Error(`В таблице нет столбцов` );
		
	//подготовка словаря столбцов
	try
	{
		var columnsMap = {};	//columnId : orderNumber
		let columnsData = JSON.parse(GetColumnSpecAsJson()).columns;
		
		//мапирование номеров колонок
		for (let i = 0; i < columnsData.length; i++)
		{
			let columnId = columnsData[i].name;	
			if (columns.includes(columnId))
				columnsMap[columnId] = i;
		}
	}
	catch (error)
	{
		throw new Error(`Не удалось разобрать спецификацию столбцов \n ${error.message}`);
	}

	//наличие обязательных столбцов
	if (columnsMap.Login == undefined || columnsMap.Password == undefined || columnsMap.DisplayName == undefined || columnsMap.Surname == undefined)
		throw new Error(`Таблица не имеет обязательных полей`);
	
	//наличие строк
	let userCount = GetRowCount();
	if (userCount == 0)
		throw new Error(`В таблице нет строк`);
	
	ProgressStage.Update("Проверка данных...");
	//Проверка данных
	//массив ошибок проверки данных пользователей
	var contentErrors = [];
	let logins = [];
	let displayNames = [];
		
	for (let row = 0; row < userCount; row++)
	{
		let userData = JSON.parse(GetRowDataAsJson(row));
		
		//проверки логина
		let login = userData[columnsMap.Login];
		logins.push(login);
		if (login == "")
			contentErrors.push(new Error(`Не установлено значение логина, строка: ${row}`));
			
		if (usersDictionary.Logins.includes(login))
			contentErrors.push(new Error(`Пользователь с логином '${login}' существует, строка: ${row}`));
		
		//проверки отображаемого имени
		let displayName = userData[columnsMap.DisplayName];
		displayNames.push(displayName);
		if (displayName == "")
			contentErrors.push(new Error(`Не установлено значение отображаемого имени, строка: ${row}`));
			
		if (usersDictionary.DisplayNames.includes(displayName))
			contentErrors.push(new Error(`Пользователь с отображаемым именем '${displayName}' существует, строка: ${row}`));
		
		//проверки фамилии
		let surname = userData[columnsMap.Surname];
		if (surname == "")
			contentErrors.push(new Error(`Не установлено значение фамилии, строка: ${row}`));
			
		//проверки пароля
		let password = userData[columnsMap.Password];
		if (password == "")
			contentErrors.push(new Error(`Не установлен пароль у пользователя  с логином '${login}', строка: ${row}`));
		
		//проверки группы
		let groups = userData[columnsMap.Groups];
		if (groups != "")
		{
			let userGroupIdList = [];
			let groupList = groups.split(stringSeparator).map(name => name.trim());
			for (let i = 0; i < groupList.length; i++)
			{
				let groupName = groupList[i];
				let groupId = groupsDictionary[groupName];
				if (groupId != undefined)
					userGroupIdList.push(groupId);
				else
					contentErrors.push(new Error(`Невозможно добавить пользователя '${login}' в группу '${groupName}', группы не существует, строка: ${row}`));
			}
			//замена строки с name на id в ячейке модели (row, columnsMap.Groups)
			SetCellData(row, columnsMap.Groups, JSON.stringify(userGroupIdList));
		} 
		else if (groups == "" && pSettings.UserInAtLeastOneGroup)
		{
			contentErrors.push(new Error(`Пользователю ${login} не назначена группа, строка: ${row}`));
		}
		
		//проверка необязательных полей с форматированием
		//проверка ввода телефона
		let phoneColumn = columnsMap.Phone;
		if (phoneColumn != undefined)
		{
			let template = /^(\+[0-9][\- ]?)?(\(?\d{3,4}\)?[\- ]?)?[\d\- ]{3,10}$/;
			if (!template.test(userData[phoneColumn]))
				contentErrors.push(new Error(`Неверный формат номера телефона у пользователя '${login}, строка: ${row}'`));
		}
		
		//проверка ввода email
		let mailColumn = columnsMap.Email;
		if (mailColumn != undefined)
		{
			let template = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/;
			if (!template.test(userData[mailColumn]))
				contentErrors.push(new Error(`Неверный формат электронной почты у пользователя '${login}, строка: ${row}'`));
		}
		
		//переодическая проверка колличества ошибок
	}
	
	//повторяющиеся значения в файле
	//логины
	if (getRepetedValues(logins).length > 1)
	{
		let loginsAsString = logins.join(', ')
		contentErrors.push(new Error(`В файле обнаружены повторяющиеся логины ${loginsAsString}`));
	}
	//отображаемые имена
	if (getRepetedValues(displayNames).length > 1)
	{
		let displayNamesAsString = displayNames.join(', ')
		contentErrors.push(new Error(`В файле обнаружены повторяющиеся логины ${displayNamesAsString}`));
	}

	//разбор массива ошибок
	if (contentErrors.length > 0)
	{
		//сформировать массив сообщений всех ошибок
		let messages = [];
		let messageAsString = "";
		contentErrors.forEach((error) => messages.push(error.message));
		
		const showMessageCount = 3;
		const hideMessageCount = messages.length - showMessageCount;
		const messagePostfix = StringUtils.GetDeclension(hideMessageCount, "ошибка", "ошибки", "ошибок");
		
		messageAsString = messages.slice(0, showMessageCount).join('\n');
		if (hideMessageCount > 0)
			messageAsString += `\nИ еще ${hideMessageCount} ${messagePostfix}`;
		
		throw new Error(messageAsString);
	}
	
	//сохраянем словарь столбцов
	ColumnsDictionary = (Object.keys(columnsMap).length > 0)?(JSON.stringify(columnsMap)):("");
	
	//обновить прогресс
	//пересчитать колличество операций
	ProgressStage.SetOperationCount(userCount * 2 + ProgressStage.GetCurrentOperation());
	
	//запустить чтение данных из таблицы
	private.QueueRead.Init(userCount);
}
catch (error)
{
	ErrorHandling(error.message);
}

function getRepetedValues(values)
{
	return values.filter((element, index, elements) => elements.indexOf(element) != index);
}]]>
				</body>
			</do>
			<object access-modifier="private" name="ColumnsDictionary" display-name="ColumnsDictionary" uuid="2c14e840-d059-40c1-884f-f81c55522bac" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		</object>
		<object access-modifier="private" name="Manager" display-name="Manager" uuid="7d190c26-2be7-4cbf-81ec-180ac47acde7" base-type="SecurityManager" base-type-id="179958e0-f45a-40f3-9668-98e4ea2987da" ver="5" description="" cardinal="1">
			<object access-modifier="private" name="userList" display-name="userList" uuid="eb6b88f6-90d2-4ee0-a40e-5baab4b8bc74" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="groupList" display-name="groupList" uuid="1276e2ef-aec0-46c5-a7bf-6669e2dd2d4a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="RequestGroupListComplete">
				<body kind="om">
					<![CDATA[groupList = JSONGroupList;
IsRequestsCompleted();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="RequestUsersListComplete">
				<body kind="om">
					<![CDATA[userList = JSONUsersList;
IsRequestsCompleted();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="RequestUsersListFailed">
				<body kind="om">
					<![CDATA[Error = GetErrorDescriptionByCode(FailReason);]]>
				</body>
			</do-on>
			<do access-modifier="private" name="IsRequestsCompleted" display-name="IsRequestsCompleted" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if (error)
	return;

if (userList != "" && groupList != "")
	//запуск чтения файла
	Model.ReadContent();
	
//добавить обработку событий если списки пусты failReasonCode !=0]]>
				</body>
			</do>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="RequestGroupListFailed">
				<body kind="om">
					<![CDATA[Error = GetErrorDescriptionByCode(FailReason);]]>
				</body>
			</do-on>
			<object access-modifier="private" name="error" display-name="error" uuid="5f0ba710-052e-485d-ab86-a95da0f1a8f6" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
			<init target="SecurityContext" ver="5">
				<object access-modifier="private" uuid="4321fd27-fdbe-42d8-b08d-875648e77c88" base-type="SecurityContext" base-type-id="d9cb0fff-b70a-4e2d-833d-3f73cf74e0dd" ver="5"/>
			</init>
		</object>
		<object access-modifier="private" name="User" display-name="User" uuid="ab74b43c-8930-46bd-ad66-3d0f9ae0fb94" base-type="SecurityManagerUser" base-type-id="896178de-ae2c-4ff7-918c-3a0035e435ab" ver="5" description="" cardinal="1">
			<designed target="Login" value="" ver="5"/>
			<designed target="Name" value="" ver="5"/>
			<designed target="Surname" value="" ver="5"/>
			<designed target="MidName" value="" ver="5"/>
			<designed target="DisplayName" value="" ver="5"/>
			<designed target="DispalyName" value="" ver="5"/>
			<designed target="Position" value="" ver="5"/>
			<designed target="Unit" value="" ver="5"/>
			<designed target="Email" value="" ver="5"/>
			<designed target="Phone" value="" ver="5"/>
			<designed target="Comment" value="" ver="5"/>
			<designed target="ForcePassChange" value="false" ver="5"/>
			<designed target="Disabled" value="false" ver="5"/>
			<init target="SecurityManager" ver="5" ref="Manager"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="SaveComplete">
				<body kind="javascript">
					<![CDATA[//возвращаемся в очередь
private.QueueRead.IsCompleted();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="SaveFailed">
				<body kind="om">
					<![CDATA[message: string = "Ошибка при сохранении пользлвателя '"+ Login +"'. "+GetErrorDescriptionByCode(FailReasonCode);
ErrorHandling(message);]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="QueueRead" display-name="QueueRead" uuid="8084450a-bbb0-45a5-add4-2968e5ea5baa" base-type="ActionsQueue" base-type-id="7cd7ab97-3392-4032-badc-0d7bdd897063" ver="5" description="" cardinal="1">
			<object access-modifier="private" name="AddUser" display-name="AddUser" uuid="d19e0c2b-425d-45aa-bfd1-ed24a7461ae0" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="javascript">
						<![CDATA[try
{
	try
	{
		var columns = JSON.parse(Model.ColumnsDictionary); 
	}
	catch (error)
	{
		throw new Error(`Не удалось получить столбцы модели \n ${error.message}`);
	}
	
	//данные пользователя по строке CurrentRow
	let CurrentRow = GetCurrentIndex();
	try
	{
		var userData = JSON.parse(Model.GetRowDataAsJson(CurrentRow));
	}
	catch (error)
	{
		throw new Error(`Не удалось получить данные пользователя из модели по строке ${CurrentRow} \n ${error.message}`);
	}
	
	if (isValidDataByRow(CurrentRow))
	{
		User.New();
		
		let login = userData[columns.Login];
		User.Login = login;
		
		let displayName = userData[columns.DisplayName];
		User.DisplayName = displayName;
		
		//проверка на возможность применить пароль
		let password = userData[columns.Password].split().toString();
		let code = User.ValidatePassword(password);
		if (password != "" && code == 0)
			User.SetPassword(password);
		else
			throw new Error(`Невозможно применить пароль пользователю ${login}`);	
			
		//добавление в группу
		let groups = userData[columns.Groups];
		if (groups != "")
		{
			try
			{
				var groupIdList = JSON.parse(groups);	
			}
			catch (error)
			{
				throw new Error(`Не удалось разобрать список групп пользователя ${login} \n ${error.message}`);
			}
			
			for (let i = 0; i < groupIdList.length; i++)
			{
				let groupId = groupIdList[i];
				User.AddGroup(groupId);
			}
		}
		
		let surname = columns.Surname;
		User.Surname = userData[surname];
		
		//необязательные поля
		let name = columns.Name;
		if (name != undefined)
			User.Name = userData[name];
		
		let midName = columns.MidName;
		if (midName != undefined)
			User.MidName = userData[midName];	
	
		let position = columns.Position;
		if (position != undefined)
			User.Position = userData[position];
		
		let unit = columns.Unit;	
		if (unit != undefined)
			User.Unit = userData[unit];
		
		let email = 	columns.Email;
		if (email != undefined)
			User.Email = userData[email];
		
		let phone = 	columns.Phone;
		if (phone != undefined)
			User.Phone = userData[phone];
		
		let comment = columns.Comment;	
		if (comment != undefined)
			User.Comment = userData[comment];
		
		//требовать смену пароля после входа
		User.ForcePassChange = true;
		
		//применить изменения	
		User.Save();
		ProgressStage.Update(`Сохранение пользователя ${login}`);
	}
	else
	{
		throw new Error(`Нет данных в обязательных столбцах по строке ${CurrentRow}`);
	}
}
catch (error)
{
	//log(error.stack);
	ErrorHandling(error.message);
}

//-------------------------------------------------
//Проверка минимального набора параметров для добавления (Данные не пустые)
function isValidDataByRow(row)
{	
	return userData[columns.Login] != "" && userData[columns.DisplayName] != "" && userData[columns.Password] != "" && userData[columns.Surname] != "" && userData[columns.Groups] != "";
}]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="UserSaved" display-name="UserSaved" uuid="479a1cbd-9ea8-4197-b1e1-0d1c46f7a792" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[//уведомление об успешном чтении элемента
//обновить прогрес
ProgressStage.Update("Пользователь " + User.Login + " сохранен");]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="ReadFinished" display-name="ReadFinished" uuid="8c1b8180-8a61-4208-8016-b86b3973c054" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[//уведомить об успешном окончании
pComplete.Invoke();]]>
					</body>
				</do-on>
			</object>
			<init target="pExecuteAction" ver="5" ref="AddUser"/>
			<init target="pFinished" ver="5" ref="ReadFinished"/>
			<init target="pActionComplete" ver="5" ref="UserSaved"/>
			<object access-modifier="private" name="ReadStop" display-name="ReadStop" uuid="5dff4ec2-103e-4a09-9195-8105d8237a04" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[ErrorHandling("Очередь остановлена");]]>
					</body>
				</do-on>
			</object>
			<init target="pStoped" ver="5" ref="ReadStop"/>
		</object>
		<object access-modifier="private" name="ProgressStage" display-name="ProgressStage" uuid="60fd2c3d-d7b2-402c-b16b-0f91271efb7a" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
			<object access-modifier="private" name="Counter" display-name="Counter" uuid="5d0fae03-ea10-4e2d-bfb1-dc6f04ab564b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="OPERATION_COUNT" display-name="OPERATION_COUNT" uuid="24a48004-0b95-45b9-89cd-9cbcb3ba5ea0" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
			<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[Counter = 0;
OPERATION_COUNT = 0;]]>
				</body>
			</do>
			<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if (status != "")
{
	//увеличиваем текущее значение
	Counter += 1;
	
	min: int4 = 0;
	max: int4 = OPERATION_COUNT;
	
	//приведение к диапазону 0 - 100
	newMin: int4 = 0;
	newMax: int4 = 100;
	
	Progress = TypeConvert.ToInt4(Math.Round((TypeConvert.ToDouble((Counter - min)) / (max - min)) * (newMax - newMin) + newMin));
	//Debug.Log("Прогрес: "+String.ToString(Progress) + ", статус: " + status);
}
Status = status;]]>
				</body>
				<param access-modifier="private" name="status" display-name="" uuid="0e4701b0-12d0-4f6b-99ff-654323a825d7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</do>
			<do access-modifier="private" name="GetCurrentOperation" display-name="GetCurrentOperation" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
				<body kind="om">
					<![CDATA[return Counter;]]>
				</body>
			</do>
			<do access-modifier="private" name="SetOperationCount" display-name="SetOperationCount" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[OPERATION_COUNT = value;]]>
				</body>
				<param access-modifier="private" name="value" display-name="" uuid="325f2d8e-c1a6-4dc6-9f21-270cedadd787" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			</do>
		</object>
		<do access-modifier="private" name="ErrorHandling" display-name="ErrorHandling" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//остановить очередь
QueueRead.Stop();

//обновить поле Error
//statusText: string = String.SubString(Status, 0, (String.Length(Status) - 3)); 
//Error = "Операция прервана на этапе - '"+statusText + "'\n" + message;
Error = message;
pError.Invoke();]]>
			</body>
			<param access-modifier="private" name="message" display-name="" uuid="37bf8cc6-5217-460a-9c2a-bb51fdde5ce2" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<object access-modifier="private" name="StringUtils" display-name="StringUtils" uuid="54cd679b-b474-4452-9605-084cd672a6e1" base-type="StringUtils" base-type-id="3ded1ef2-be27-4246-8c9e-8c68b24f1041" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="pSettings" display-name="pSettings" uuid="35402348-55fe-4e31-99ce-8c612b4ed64b" base-type="SecurityConfigurator_Settings" base-type-id="a7c582fd-25fb-4cc3-8522-3166d1a63de6" base-const="true" base-ref="true" ver="5" description=""/>
		<init target="pSettings" ver="5" ref="init_Settings"/>
		<do access-modifier="private" name="UseTestData" display-name="UseTestData" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[const userCount = 5;
private.Model.Init();
//список пользователей для тестирования
let userList = [];
for (let i = 0; i < userCount; i++)
{
	let userData = [];
	let index = i + 1;
	
	userData.push("login");
	userData.push("Password");
	userData.push("viewName");
	userData.push("userName");
	userData.push("userSurname");
	userData.push("userMidName");
	userData.push("pos");
	userData.push("unit");
	userData.push("test@mail.com");
	userData.push("8952154710");
	userData.push("Comment");
	userData = userData.map(property => property+index);
	//Добавление группы
	let groupName = (i % 2 == 0)?("Admins"):("Operators");
	userData.push(groupName);
	userList.push(userData);
}

private.Model.InsertRows(0, userList.length);
for (let row = 0;  row < userList.length; row++)
{
	let userData = userList[row];
	if (userData.length > 0)
		private.Model.SetRowDataAsJson(row, JSON.stringify(userData));
}]]>
			</body>
		</do>
		<object access-modifier="private" name="Error" display-name="Error" uuid="a6575f5b-3d7d-48c2-9c51-695e691c6f70" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
	</object>
	<object access-modifier="private" name="Progress" display-name="Progress" uuid="8eb5ee7d-78ad-460d-bca4-68677da2b20e" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="Status" display-name="Status" uuid="b12241ac-c01f-4c16-a87c-2f847f981b71" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="pComplete" display-name="pComplete" uuid="f729109d-b7d0-4b3d-866e-4927ec7cb2da" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
	<do access-modifier="private" name="LoadFile" display-name="LoadFile" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//Загрузка данных из файла в модель таблицы
private.ProgressStage.Init();
private.ProgressStage.SetOperationCount(100);

//запросить списки групп и пользователей в системе
private.Manager.RequestGroupList();
private.Manager.RequestUsersList();

//отладка - заполнение модели тестовыми данными
private.UseTestData();]]>
		</body>
		<param access-modifier="private" name="filePath" display-name="" uuid="3cbc5c72-f8b7-4077-b6aa-7ebcd68a8e33" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<param access-modifier="private" name="init_Settings" display-name="init_Settings" uuid="8e865802-45bb-4db9-93d3-bce4b8200dd1" base-type="SecurityConfigurator_Settings" base-type-id="a7c582fd-25fb-4cc3-8522-3166d1a63de6" base-const="true" base-ref="true" ver="5" description=""/>
	<init target="init_Settings" ver="5">
		<object access-modifier="private" uuid="4483a0b3-ed92-4f3c-9c65-bb07a21912c0" base-type="SecurityConfigurator_Settings" base-type-id="a7c582fd-25fb-4cc3-8522-3166d1a63de6" ver="5"/>
	</init>
	<object access-modifier="private" name="pError" display-name="pError" uuid="0da6b87c-f2f3-4fee-987e-9f9fb4245e72" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="064e8db1-9a42-44b0-bfce-d31d3c7e802a" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5" description="" cardinal="1"/>
	<do access-modifier="private" name="Release" display-name="Release" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//освобождаем рессурсы
private.Model.Reset();
private.Manager.userList = "";
private.Manager.groupList = "";

Progress = 0;
Status = "";
private.Error = "";
]]>
		</body>
	</do>
	<do access-modifier="private" name="GetResultDescriptionMessage" display-name="GetResultDescriptionMessage" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[error: string = private.Error;
if (error != "")
	return error;

//если нет ошибок, то возвращаем сообщение с колличеством успешно импортированных пользователей
userCount:int4 = private.QueueRead.GetSize();
message: string = "Импортирование успешно завершено. Добавлено " + String.ToString(userCount) + " " + private.StringUtils.GetDeclension(userCount, "пользователь", "пользователя", "пользователей");
return message;]]>
		</body>
	</do>
</type>

