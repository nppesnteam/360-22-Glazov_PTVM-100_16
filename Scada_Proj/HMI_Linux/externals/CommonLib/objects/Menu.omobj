<type access-modifier="public" name="Menu" display-name="Меню" uuid="07bb4545-980a-4140-bbaa-4d1397447864" base-type="Popup" base-type-id="346ea4f8-f80d-44c4-904b-258f28be2b43" ver="5">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Width" value="50" ver="5"/>
	<designed target="Height" value="25" ver="5"/>
	<designed target="WindowWidth" value="51" ver="5"/>
	<designed target="WindowHeight" value="26" ver="5"/>
	<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="WindowActivationChanged">
		<body kind="om">
			<![CDATA[if (active)
{
	// почему-то активация происходит при закрытии окна, поэтому завели специальный флаг
	if (!private.closing)
	{
		//Debug.Log(private.id + ". Переводим фокус на форму при активации окна");
		here.Focus = true;
	}
}
else
{
	if (private.initialized)
	{
		//Debug.Log(private.id + ". Menu deactivated with " + String.ToString(private.Submenu.opened) + " submenu" + (private.mouseOver ? ", mouse over menu" : ""));
		if (private.Submenu.opened < 1)
		{
			// в WebViewer это событие срабатывает при смене фокуса перед кликом мышкой по элементу меню (#30900)
			// поэтому будем закрывать меню, только если деактивация произошла, когда мышка была за пределами меню
			if (private.Runtime.WorkMode != 1 || !private.mouseOver)
			{
				//Debug.Log(private.id + ". Закрываем меню после деактивации");
				Close();
			}
		}
	}
}]]>
		</body>
	</do-on>
	<object access-modifier="private" name="MenuItems" display-name="MenuItems" uuid="99a7a0af-f88b-42d2-8490-67766f819d2a" base-type="MenuItem" base-type-id="064f06d5-fe3b-471e-a8d5-8914807aa060" ver="5" cardinal="30">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Width" value="50" ver="5"/>
		<designed target="Height" value="25" ver="5"/>
		<designed target="Visible" value="false" ver="5"/>
		<object access-modifier="private" name="id" display-name="id" uuid="91f65d56-161f-440f-9dbb-543fbe54ea2d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<object access-modifier="private" name="checkable" display-name="checkable" uuid="ef9b4fea-e1ac-4a31-aa8d-067fe569cab8" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseClick">
			<body kind="om">
				<![CDATA[//Debug.Log("Mouse click on " + Title);
if (Active && Items == "")
	DoAction();]]>
			</body>
		</do-on>
		<object access-modifier="private" name="staysOpen" display-name="staysOpen" uuid="59e5308f-5e63-4904-9d2e-5714f72fd605" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="MouseEnter">
			<body kind="om">
				<![CDATA[//Debug.Log("Mouse enter to menu item");
private.mouseOver = true;

Selected = true;

if (Items != "")
{
	//Debug.Log("Start opening submenu " + Items);
	private.Submenu.itemIndex = Index;
	private.OpenSubmenuTimer.Active = true;	
}

// если выделена команда без подменю, то подменю других команд 
// будут закрыты через некоторое время после авктивации этого меню
private.ActivateTimer.Active = Items == "" && Active;]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="MouseLeave">
			<body kind="om">
				<![CDATA[//Debug.Log("Mouse leave menu item");
private.mouseOver = false;

Selected = MouseX > 0 && MouseX < Width && MouseY > 0 && MouseY < Height;
private.OpenSubmenuTimer.Active = false;]]>
			</body>
		</do-on>
		<do access-modifier="private" name="DoAction" display-name="DoAction" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (checkable)
	Checked = !Checked;

// подготавливаем результат
pResult.Id = id;
pResult.StaysOpen = staysOpen;

// выполняем команду
//Debug.Log("Invoke menu command with id: " + id);
pAction.Invoke();

// если не нужно оставлять меню открытым, то закрываем это меню
if (!staysOpen)
{
	//Debug.Log(private.id + ". Закрываем меню после выполнения команды " + id);
	private.CloseByUser();
}
else
{
	// возвращаем фокус на форму, это нужно для корректной работы в WebViewer
	if (private.Runtime.WorkMode == 1)
	{
		//Debug.Log(private.id + ". Возвращаем фокус на форму при смене выбора " + id);
		here.Focus = true;
	}
}]]>
			</body>
		</do>
		<object access-modifier="private" name="selected" display-name="selected" uuid="0cf381b6-da43-4d5b-99ad-6b3183fb7d6c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
				<body kind="om">
					<![CDATA[if (value)
{
	//Debug.Log(private.id + ". Selected item: " + String.ToString(Index));	
	i: int4 = 0;
	while (i < here.private.count)
	{
		if (Index != i && MenuItems[i].Selected)
			MenuItems[i].Selected = false;
		i += 1;
	}
}]]>
				</body>
			</do-on>
		</object>
		<do-trace access-modifier="private" target="selected" ver="5">
			<body>
				<![CDATA[Selected]]>
			</body>
		</do-trace>
		<init target="pTheme" ver="5" ref="here.init_Theme"/>
	</object>
	<object access-modifier="private" name="Separators" display-name="Separators" uuid="87a6be34-db78-45d0-8b8b-83ab04146889" base-type="MenuSeparator" base-type-id="0534e401-a222-4f5a-b162-477d316aa696" ver="5" cardinal="10">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Width" value="50" ver="5"/>
		<designed target="Height" value="5" ver="5"/>
		<designed target="Visible" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="MouseClick">
			<body kind="om">
				<![CDATA[here.Focus = true;]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="private" display-name="private" uuid="582f1c20-a828-4872-93c2-9e62a8f0513b" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="System" display-name="System" uuid="79e7a960-b9c5-45a4-8938-0cf2ad7533b2" base-type="System" base-type-id="702b5ddf-fab9-4646-995b-8999e6f09879" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="Runtime" display-name="Runtime" uuid="f37cb5d2-12d5-4b57-bd6e-c1bb0b667c0d" base-type="Runtime" base-type-id="9031e0ca-e75e-47d6-98eb-cf0e5779cb68" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="initialized" display-name="initialized" uuid="f8c4cb17-941b-4907-b107-f32fe05f14c9" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="mouseOver" display-name="mouseOver" uuid="3e69641c-ca89-40bc-abaa-aeeb8a99164d" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="ActivateTimer" display-name="ActivateTimer" uuid="22040af8-7275-4330-8c12-cb767f870d93" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="5">
			<designed target="Period" value="300" ver="5"/>
			<designed target="Active" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
				<body kind="om">
					<![CDATA[Active = false;
if (!here.WindowActive)
{
	//Debug.Log(private.id + ". Активируем меню после наведения мышки на команду без подменю");
	here.Activate();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="OpenSubmenuTimer" display-name="OpenSubmenuTimer" uuid="22e4449f-f8e6-4c83-b277-cce8689210f2" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="5">
			<designed target="Period" value="300" ver="5"/>
			<designed target="Active" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
				<body kind="om">
					<![CDATA[Active = false;
Submenu.Open();]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="Submenu" display-name="Submenu" uuid="e1c633c2-274b-4899-a0a0-eb9a94c01ca7" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-new" form-by-id="false">
				<object access-modifier="private" uuid="add94ffc-a550-4240-8cd5-cff991d44819" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
					<init target="pResult" ver="5" ref="here.pResult"/>
					<init target="pAction" ver="5" ref="parent.OnAction"/>
					<init target="pOnClosed" ver="5" ref="parent.OnClosed"/>
					<init target="WindowY" ver="5">
						<expr>
							<![CDATA[mY]]>
						</expr>
					</init>
					<init target="WindowX" ver="5">
						<expr>
							<![CDATA[mX]]>
						</expr>
					</init>
					<init target="Items" ver="5">
						<expr>
							<![CDATA[items]]>
						</expr>
					</init>
					<init target="PointHeight" ver="5" value="-25"/>
					<init target="IsSubmenu" ver="5" value="true"/>
					<init target="pOnDoClose" ver="5" ref="parent.OnDoClosed"/>
					<init target="init_Theme" ver="5" ref="here.protected.pTheme"/>
				</object>
			</do-on>
			<object access-modifier="private" name="itemIndex" display-name="itemIndex" uuid="4de1104f-89a6-488c-9a8e-9fffe44d52e7" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			<object access-modifier="private" name="mX" display-name="mX" uuid="69ba5608-f846-42b8-b4fd-68391c898e58" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="mY" display-name="mY" uuid="4bed596c-d20f-41f8-99a6-65b8dd04cd4d" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="items" display-name="items" uuid="2f5846e2-45e2-401d-9009-45d4e777f754" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<object access-modifier="private" name="opened" display-name="opened" uuid="5e6e342b-616a-4f0c-9ef8-46996d1e1310" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="closedByUser" display-name="closedByUser" uuid="2f322217-d7f2-4ba1-883e-4791042922c9" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="OnAction" display-name="OnAction" uuid="0fe06316-aeaf-4370-82eb-41d2fde231da" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[//Debug.Log("Submenu action = " + pResult.Id);
pAction.Invoke();

// если была выполнена команда с закрытием меню, то закрываем и это меню тоже
if (!pResult.StaysOpen)
{
	private.closing = true;
	Close();
}]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="OnDoClosed" display-name="OnDoClosed" uuid="7a1d54e8-ec6e-464f-a44f-96150e24db0c" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[//Debug.Log(private.id + ". Submenu closed by user");
closedByUser = true;]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="OnClosed" display-name="OnClosed" uuid="58ebaa53-e9f9-4223-af6a-6f633195806a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[// уменьшаем количество открытых подменю
opened -= 1;
//Debug.Log(private.id + ". Submenu closed, " + String.ToString(opened) + " more left");

if (opened < 1 && !WindowActive && !closedByUser && !private.mouseOver)
{
	//Debug.Log(private.id + ". Закрываем неактивное меню после закрытия его подменю");
	private.closing = true;
	Close();
}
else if (closedByUser)
{
	//Debug.Log(private.id + ". Активируем после закрытия подменю");
	here.Activate();
}]]>
					</body>
				</do-on>
			</object>
			<do access-modifier="private" name="Open" display-name="Open" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[// Для признака наличия подменю используется счетчик вместо флага из-за того,
// что событие закрытия предыдущего подменю возникает после события открытия нового подменю.

// проверяем, что нет открытых подменю или открытое подменю отличается от того, что нужно открыть
if (opened < 1 || items != MenuItems[itemIndex].Items)
{
	closedByUser = false;

	// запоминаем элементы подменю
	items = MenuItems[itemIndex].Items;
	
	// определяем позицию подменю
	mX = MenuItems[itemIndex].ScreenX(Width - 5, 0);
	mY = MenuItems[itemIndex].ScreenY(0, 0);
	
	// если подменю не помещается по горизонтали, то размещаем его с другой стороны
	m: int4 = WindowUtilities.Monitors.GetMonitor(mX, mY);
	if (m > -1)
	{
		submenuWidth: int4 = CalculateWidth(items);
		right: int4 = WindowUtilities.Monitors.GetAvailableX(m) + WindowUtilities.Monitors.GetAvailableWidth(m);
		if (mX + submenuWidth > right)
			mX = MenuItems[itemIndex].ScreenX(5, 0) - submenuWidth;
	}
	
	// подсчитываем количество открытых подменю, чтобы не открывать их повторно
	// и для проверки наличия открытых подменю перед закрытием этого
	opened += 1;
	
	//Debug.Log("Open submenu " + items);
	Invoke();
}]]>
				</body>
			</do>
		</object>
		<do access-modifier="private" name="GetSelected" display-name="GetSelected" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[i: int4 = 0;
while (i < count)
{
	if (MenuItems[i].Selected)
		return i;
		
	i += 1;
}
return -1;]]>
			</body>
		</do>
		<object access-modifier="private" name="updateItems" display-name="updateItems" uuid="846a1236-62aa-44e6-8f91-62a22d860b10" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
				<body kind="javascript">
					<![CDATA[if (value != "")
{
	//log("UpdateItems: " + value);
	var update = JSON.parse(value);
	
	var i = 0;
	while (i < update.length)
	{
		var item = update[i];
		if (item.id != undefined)
		{
			var miIndex = 0;
			while (miIndex < MenuItems.Length)
			{
				var mi = MenuItems[miIndex];
				if (!mi.Visible)
					break;
				
				if (mi.id == item.id)
				{
					if (item.title != undefined)
						mi.Title = item.title;

					if (item.icon != undefined)
						mi.IconFile = item.icon;
						
					if (item.active != undefined)
						mi.Active = item.active != false;
						
					if (item.checked != undefined)
						mi.Checked = item.checked == true;
						
					if (item.icon != undefined)
						mi.IconFile = item.icon;

					break;
				}
				
				miIndex += 1;
			}
		}
		
		i += 1;
	}
}]]>
				</body>
			</do-on>
		</object>
		<do-trace access-modifier="private" target="updateItems" ver="5">
			<body>
				<![CDATA[pResult.UpdateItems]]>
			</body>
		</do-trace>
		<object access-modifier="private" name="count" display-name="count" uuid="be436ab4-a53e-412a-b694-779fa9361f05" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="id" display-name="id" uuid="a4ac6731-5542-431d-ad91-2c68318c12c3" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="ParseItemsJson" display-name="ParseItemsJson" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[var items = JSON.parse(value);
//log(JSON.stringify(items, null, 2));

var y = 0;

var maxKeyGestureLength = 0;
	
var miIndex = 0;
var sIndex = 0;
var i = 0;
while (i < items.length)
{
	var item = items[i];

	if (item.title == "-")
	{
		if (sIndex < Separators.Length)
		{
			// добавляем разделительную линию
			Separators[sIndex].Y = y;
			Separators[sIndex].Visible = true;		
			y += Separators[sIndex].Height;
			
			sIndex += 1;
		}
	}
	else if (miIndex < MenuItems.Length)
	{
		if (item.keyGesture != undefined && item.keyGesture.length > maxKeyGestureLength)
			maxKeyGestureLength = item.keyGesture.length;

		// добавляем элемент меню
		MenuItems[miIndex].id = item.id;
		MenuItems[miIndex].Y = y;
		MenuItems[miIndex].Title = item.title;
		MenuItems[miIndex].IconFile = item.icon;
		MenuItems[miIndex].KeyGesture = item.keyGesture;
		MenuItems[miIndex].Active = item.active != false;
		MenuItems[miIndex].checkable = item.checked != null;
		MenuItems[miIndex].Checked = item.checked == true;
		MenuItems[miIndex].staysOpen = item.staysOpen == true;
		if (item.items != null)
			MenuItems[miIndex].Items = JSON.stringify(item.items);
		MenuItems[miIndex].Visible = true;
		y += MenuItems[miIndex].Height;

		miIndex += 1;
	}
	
	i += 1;
}

// количество элементов меню будет определено по последнему увеличенному индексу
count = miIndex;

// к ширине заголовка нужно добавить на иконку слева, горячие клавиши и стрелочку вправо
var keyGestureWidth = maxKeyGestureLength * 6.3;
var width = CalculateWidth(value);
var height = y;

// рамка увеличивает размер на 1 пиксель снизу и справа
WindowHeight = height + 1;
WindowWidth = width + 1;

// после задания размеров у окна задаем размер формы, чтобы не возникало появление полос прокрутки
Height = height;
Width = width;

// обновляем размеры элементов меню
for (var j = 0; j < MenuItems.Length; j++)
{
	MenuItems[j].Width = width;
	MenuItems[j].UpdateLayout(keyGestureWidth);
}
for (var j = 0; j < Separators.Length; j++)
{
	Separators[j].Width = width;
	Separators[j].UpdateLayout();
}

// в подменю выделяем первый элемент
if (IsSubmenu && count > 0)
	MenuItems[0].Selected = true;]]>
			</body>
			<param access-modifier="private" name="value" display-name="" uuid="7d009634-7605-48c6-bbe5-71dc837b7984" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="CalculateWidth" display-name="CalculateWidth" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="javascript">
				<![CDATA[var items = JSON.parse(value);

var i = 0;
var maxTitleLength = 0;
var maxKeyGestureLength = 0;
var hasSubitems = false;
while (i < items.length)
{
	var item = items[i];
	
	if (item.title.length > maxTitleLength)
		maxTitleLength = item.title.length;
	
	if (item.keyGesture != undefined && item.keyGesture.length > maxKeyGestureLength)
		maxKeyGestureLength = item.keyGesture.length;
		
	if (item.Items != undefined)
		hasSubitems = true;
	
	i += 1;
}

// из-за различия шрифтов в разных системах подбираем примерную ширину символа
var charWidth = Runtime.WorkMode == 0 ? (System.Family == "windows" ? 5.9 : 6.4) : 6.2;

// к ширине заголовка нужно добавить на иконку слева, горячие клавиши и стрелочку вправо
return Math.trunc(45 + (maxTitleLength + maxKeyGestureLength) * charWidth + (hasSubitems ? 20 : 0));]]>
			</body>
			<param access-modifier="private" name="value" display-name="" uuid="0f927775-164c-4757-b55d-d52600c802fa" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<object access-modifier="private" name="closing" display-name="closing" uuid="0d5a7da2-1141-4779-92ef-086b69efa67b" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="CloseByUser" display-name="CloseByUser" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[pOnDoClose.Invoke();
closing = true;
Close();]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="Initializer" display-name="Initializer" uuid="e5270794-635b-456d-ae43-e7d892ef4833" base-type="Initializer" base-type-id="6db89679-9299-4993-ad1a-0d086cd1c7d2" ver="5" description="" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Initialized">
			<body kind="om">
				<![CDATA[private.id = String.ToString(DateTime.MSecond(DateTime.Now()));
//Debug.Log(private.id + ". Menu initialization");
private.ParseItemsJson(Items);
private.initialized = true;]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="IsSubmenu" display-name="IsSubmenu" uuid="57b1e528-e2ca-4ba9-84fb-dd75139c8a49" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="Items" display-name="Элементы меню" uuid="20feddff-0fb0-4305-9ac7-ebf1ac6bcc84" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	<object access-modifier="private" name="pResult" display-name="Ссылка на результат" uuid="66d4cf63-8a37-4266-bbb3-c9ae26922c62" base-type="MenuResult" base-type-id="0fe7658c-92f4-4af7-b038-3594414ac651" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pAction" display-name="pAction" uuid="c7ed7e1b-e1ac-4325-81c5-a27087c472fb" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pPrevMenu" display-name="pPrevMenu" uuid="b2eea1d1-bb9f-4acd-b9ee-4a89b668f706" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pNextMenu" display-name="pNextMenu" uuid="e6870c2a-e8c7-4305-afc7-66dd92619970" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnDoClose" display-name="pOnDoClose" uuid="24ce7ce2-5cd8-4a8b-bc44-e111fcb73c7a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnClosed" display-name="pOnClosed" uuid="3f8603ce-9729-4be5-b7fe-6fcc35e2f3b4" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="Closed">
		<body kind="om">
			<![CDATA[//Debug.Log(private.id + ". Menu closed");
pOnClosed.Invoke();]]>
		</body>
	</do-on>
	<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="KeyPress">
		<body kind="om">
			<![CDATA[//Debug.Log("KeyPress: " + String.ToString(event.KeyCode));

if (event.KeyCode == 105) // стрелка вверх
{
	// определяем текущий выделенный элемент
	index: int4 = private.GetSelected();

	// определяем предыдущий элемент меню
	index -= 1;
	if (index < 0)
		index = private.count - 1;

	// выделяем элемент меню с новым индексом
	MenuItems[index].Selected = true;
}
else if (event.KeyCode == 107) // стрелка вниз
{
	// определяем текущий выделенный элемент
	index: int4 = private.GetSelected();

	// определяем следующий элемент меню
	index += 1;
	if (index >= private.count)
		index = 0;
	
	// выделяем элемент меню с новым индексом
	MenuItems[index].Selected = true;
}
else if (event.KeyCode == 82) // Enter
{
	// определяем текущий выделенный элемент
	index: int4 = private.GetSelected();
	
	// выполняем команду меню, если она активна
	if (index > -1)
	{
		if (MenuItems[index].Active)
		{
			if (MenuItems[index].Items == "")
				MenuItems[index].DoAction();
			else
			{
				// открываем подменю
				private.Submenu.itemIndex = index;
				private.Submenu.Open();
			}
		}
	}
}
else if (event.KeyCode == 106) // стрелка вправо
{
	// определяем текущий выделенный элемент
	index: int4 = private.GetSelected();
	
	if (index > -1)
	{
		// проверку наличия подменю выполняем отдельным условием из-за ошибки #28535
		if (MenuItems[index].Items != "")
		{
			// открываем подменю
			private.Submenu.itemIndex = index;
			private.Submenu.Open();
			return;
		}
	}

	// переход к следующему меню
	if (pNextMenu.Enabled)
		pNextMenu.Invoke(); 
}
else if (event.KeyCode == 108) // стрелка влево
{
	// если это подменю, то закрываем его
	if (IsSubmenu)
	{
		// уведомляем родителькое меню, что закрытие выполнено пользователем
		private.CloseByUser();
	}
	else if (pPrevMenu.Enabled)
	{
		// иначе переходим к предыдущему меню
		pPrevMenu.Invoke();
	}
}
else if (event.KeyCode == 75) // Escape
{
	// закрываем меню
	private.CloseByUser();
}]]>
		</body>
	</do-on>
	<designed target="WindowCaption" value="Menu" ver="5"/>
	<designed target="WindowCloseMode" value="0" ver="5"/>
	<designed target="ShowWindowMinimize" value="false" ver="5"/>
	<designed target="ShowWindowMaximize" value="false" ver="5"/>
	<designed target="ShowWindowClose" value="false" ver="5"/>
	<do-trace access-modifier="private" target="BrushColor" ver="5">
		<body kind="om">
			<![CDATA[protected.pTheme.MenuBrushColor]]>
		</body>
	</do-trace>
	<init target="init_Theme" ver="5">
		<object access-modifier="private" uuid="d88aeab5-2299-4514-a25f-f84b672f7d8d" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" ver="5"/>
	</init>
</type>

