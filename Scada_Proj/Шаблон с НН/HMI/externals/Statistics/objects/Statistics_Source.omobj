<type access-modifier="private" name="Statistics_Source" display-name="Statistics_Source" uuid="159f04e7-927b-436a-833f-953d0fcd7f97" base-type="ApStatSource" base-type-id="28212ef8-2ce2-4f88-b3f2-f6c873eb12a7" ver="5" description="">
	<object access-modifier="private" name="private" display-name="private" uuid="5066e699-0277-4402-91be-a608780af4d4" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="Credentials" display-name="Credentials" uuid="ff507801-d24b-4292-b867-f43eb4211cde" base-type="ApCredentials" base-type-id="fef70643-767d-4533-98e9-412948317273" ver="5" description="" cardinal="1">
			<designed target="FilePath" value="" ver="5"/>
			<do access-modifier="private" name="FromJSON" display-name="FromJSON" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if (credentials != "")
{
	folder: string = ProductInfo.GetUserDataFolder();
	Files.CreateRecursiveFolder(folder);
		
	FilePath = Files.CombinePath(folder, String.ToString(DateTime.UtcNow()));
	Files.WriteTextFile(FilePath, credentials);
	if (!Load())
		Debug.Log(GetLastError());
	Files.RemoveRecursive(FilePath);
}
else
{
	FilePath = "";
	SetPassword("");
}]]>
				</body>
				<param access-modifier="private" name="credentials" display-name="" uuid="7b8345c4-8fad-411c-93a5-02a86705d681" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</do>
			<object access-modifier="private" name="current" display-name="current" uuid="4594fe3b-1552-458a-a13e-122b6584116d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		</object>
	</object>
	<object access-modifier="private" name="Title" display-name="Title" uuid="f90d5772-043a-44c4-a461-5b53fae67e35" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="FilePath" display-name="FilePath" uuid="6a589fbc-365b-4937-881b-3b60c931bf69" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="IsActive" display-name="IsActive" uuid="0445d000-f72d-4c4b-b209-2002bd511eee" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="IsCreditentialError" display-name="IsCreditentialError" uuid="8ef4358e-4d43-4929-9343-c55393e40251" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="ConnectionState" display-name="ConnectionState" uuid="8df3837c-cc81-42af-a95c-93843f32720a" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="ErrorState" display-name="ErrorState" uuid="be293c79-9d4a-450f-a0fb-f1b4f5d36687" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="CheckFileTimer" display-name="CheckFileTimer" uuid="97060df8-37c6-4e3e-b8e2-d6adb283fdbb" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="5" description="" cardinal="1">
		<designed target="Period" value="2000" ver="5"/>
		<designed target="Active" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
			<body kind="om">
				<![CDATA[if (Files.Exists(FilePath))
{
	Active = false;
	Snapshot = Files.ReadTextFile(FilePath);	
}]]>
			</body>
		</do-on>
	</object>
	<do access-modifier="private" name="Connect" display-name="Connect" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[if (Mode == 1)
{
	if (Files.Exists(FilePath))
	{
		snapshot: string = Files.ReadTextFile(FilePath);
		Snapshot = snapshot;
	}
	else
		CheckFileTimer.Active = true;
}

Active = true;
if (IsActive != Active)
	IsActive = Active;]]>
		</body>
	</do>
	<do access-modifier="private" name="Disconnect" display-name="Disconnect" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[Active = false;
if (IsActive != Active)
	IsActive = Active;

private.Credentials.SetPassword("");
private.Credentials.current = "";
CheckFileTimer.Active = false;
Location = "";
Title = "";
FilePath = "";
Snapshot = "";]]>
		</body>
	</do>
	<do access-modifier="private" name="GetSourceTitle" display-name="GetSourceTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[sourceTitle: string;
if (Mode == 0)
{
	sourceTitle = Location + ":" + String.ToString(Port);
	if (Title != "")
		sourceTitle = Title + " - " + sourceTitle;
}
else if (Mode == 1)
{
	sourceTitle = FilePath;
}
return sourceTitle;]]>
		</body>
	</do>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="6c7ba703-6897-4bd6-abaa-a4ea2b86633b" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<object access-modifier="private" name="Files" display-name="Files" uuid="691a970e-3f84-4267-b48a-5bd9f17bba9c" base-type="FileSystem" base-type-id="34d744f9-7303-4077-a3f7-9c06c0945512" ver="5" description="" cardinal="1">
		<designed target="RootPath" value="/" ver="5"/>
	</object>
	<designed target="ClientDisplayName" value="HMI.Statistics" ver="5"/>
	<designed target="Mode" value="0" ver="5"/>
	<designed target="Timeout" value="30000" ver="5"/>
	<designed target="Location" value="" ver="5"/>
	<designed target="Port" value="4572" ver="5"/>
	<designed target="Snapshot" value="" ver="5"/>
	<designed target="SnapshotFormat" value="json" ver="5"/>
	<designed target="Active" value="false" ver="5"/>
	<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnConnectionStateChanged">
		<body kind="om">
			<![CDATA[//Debug.Log(GetSourceTitle() + " - connectionState: " + String.ToString(connectionState) + ", errorState: " + String.ToString(errorState) + " " + GetErrorStateAsString(errorState));

if (ErrorState != errorState)
	ErrorState = errorState;

// если была ошибка авторизации, то деактивируем источник, чтобы не "спамить" попытками подключения
if (errorState == 2)
{
	//при отключении активности сервера ошибка стирается. Сохраняем её для дальнейшей обработки
	IsCreditentialError = true;
	Active = false;
}

if (ConnectionState != connectionState)
	ConnectionState = connectionState;

if (Mode == 1 && errorState > 0)
	CheckFileTimer.Active = true;]]>
		</body>
	</do-on>
	<init target="ConnectionState" ver="5" value="0"/>
	<init target="IsActive" ver="5" value="false"/>
	<do access-modifier="private" name="SetCredentials" display-name="SetCredentials" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[if (private.Credentials.current != credentials)
{
	//Debug.Log("Set credentials for " + GetSourceTitle());
	private.Credentials.FromJSON(credentials);
	private.Credentials.current = credentials;
	
	// активируем источник, если ранее было подключение
	if (IsActive)
	{
		//Debug.Log("Reconnect to source after set credentials");
		if (Active)
			Active = false;
		Active = true;
	}
}]]>
		</body>
		<param access-modifier="private" name="credentials" display-name="" uuid="e336fda1-b9d1-4b4a-ba0b-755496c5b1d9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<init target="Credentials" ver="5" ref="private.Credentials"/>
	<do access-modifier="private" name="GetCredentials" display-name="GetCredentials" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[return private.Credentials.current;]]>
		</body>
	</do>
	<init target="IsCreditentialError" ver="5" value="false"/>
	<do access-modifier="private" name="IsUsed" display-name="IsUsed" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[return Location != "" || Snapshot != "";
]]>
		</body>
	</do>
</type>

