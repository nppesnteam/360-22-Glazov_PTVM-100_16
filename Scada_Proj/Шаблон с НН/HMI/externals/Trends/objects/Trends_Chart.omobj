<type access-modifier="private" name="Trends_Chart" display-name="Тренды. Чарт" uuid="659f73ba-7fa5-4aa4-ac4d-623541275829" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="800" ver="5"/>
	<designed target="Height" value="600" ver="5"/>
	<designed target="RoundingRadius" value="0" ver="5"/>
	<designed target="PenColor" value="0xff808080" ver="5"/>
	<designed target="PenStyle" value="1" ver="5"/>
	<designed target="PenWidth" value="1" ver="5"/>
	<designed target="BrushColor" value="4278190080" ver="5"/>
	<designed target="BrushStyle" value="0" ver="5"/>
	<object access-modifier="private" name="private" display-name="private" uuid="54ec6e05-c7ae-4fbe-8d4d-727e6b3d7cf6" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<do access-modifier="private" name="Initializer" display-name="Initializer" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (bInit)	return;
bInit = true;
//Debug.Log("Trends_Chart. Инициализация");

n: int4 = 0;
while (n < Chart.Length)
{
	Chart[n].SetVisible(n == 0);

	i:int4 = 1;
	while (i < Chart.ControlLine.Length) 
	{
		Chart[n].ControlLine[i].Visible = false; 
		i += 1;
	}

	Params.Axis.fixYmin = LowRange;
	Params.Axis.fixYmax = HighRange;

	i = 0; 
	align:uint4 = 1;	
	while (i < Chart.Axis_Y.Length)
	{
		Chart[n].Axis_Y[i].Visible = false;
		Line[i].Visible = false;
		// Распределение осей на правую и левую стороны
		Chart[n].Axis_Y[i].Align = align;
		if (i != 0) align = align ^ 3;	// Чередование чисел 1\2
		i += 1;
	}
	n += 1;
}

// переходим к текущему времени
if (ActiveMode == unit.Const.amOPERATIVE)
{
	MoveToNow();
	SetPause(false);
}
else
{
	now: uint8 = DateTime.UtcNow();
	SetTimeInterval(now - ViewInterval.currentValue, now);
	private.UpdateDataInterval(ViewInterval.Begin, ViewInterval.End);
}

// Привязка точек пересечения реперов к линиям графиков	
Chart[0].LinkCrossPoint();

// Привязка минитрендов к оси чарта
MiniTrend.LinkToChart(0);

// Приоритеты декораторов
i:int4 = 1;
while (i < Line.Length)
{
	j:int4 = 0;
	while (j < Line.Decor.Length)
	{
		Line[i].Decor[j].zOrder = i;
		Line[i].Decor[j].Active = false;
		j += 1;
	}
	i += 1;
}

UpdateYRanges(AutoRange);

Legend.UpdateHeight();]]>
			</body>
		</do>
		<object access-modifier="private" name="bInit" display-name="bInit" uuid="3a6aab87-e897-4f08-acf0-3feeee78b5d6" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		<init target="bInit" ver="5" value="false"/>
		<do access-modifier="private" name="VariantToString" display-name="VariantToString" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<param access-modifier="private" name="value" display-name="" uuid="f0f31b50-6c29-4eb3-9d8f-167bfb72dc91" base-type="variant" base-type-id="7d3322c1-a2cf-4732-a957-abd69e3e4b7a" ver="5"/>
			<body kind="om">
				<![CDATA[if (Variant.IsFloat(value) || Variant.IsDouble(value))
{
	return ValueRound(Variant.ToDouble(value, -1), precision);
}
else if (Variant.IsBool(value))
{
	return Variant.ToBool(value, false)? "1" : "0";
}
else if (Variant.IsString(value))
{
	return Variant.ToString(value, "");
}
else 
{
	return String.ToString(Variant.ToInt8(value, 0));
}]]>
			</body>
			<param access-modifier="private" name="precision" display-name="" uuid="3b6eb3cb-9e93-4bbc-8d2e-bd7a3cc94516" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="ValueRound" display-name="ValueRound" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="om">
				<![CDATA[
decimals:string = String.ToString(numDecimals);
return String.ToLocalizedString("%."+decimals+"f", value);

]]>
			</body>
			<param access-modifier="private" name="value" display-name="" uuid="5bbc14a2-191b-4652-92ea-a52eb03eec8e" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
			<param access-modifier="private" name="numDecimals" display-name="" uuid="7a0b53af-034a-460e-b92d-558f735bdba7" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<object access-modifier="private" name="Runtime" display-name="Runtime" uuid="5cfd3712-5db9-40ab-99a9-c23250ed6d48" base-type="Runtime" base-type-id="9031e0ca-e75e-47d6-98eb-cf0e5779cb68" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="ApSource" display-name="ApSource" uuid="d2445246-23e7-4d9c-8f89-fd6352d3d127" base-type="ApSource" base-type-id="966603da-f05e-4b4d-8ef0-919efbf8ab2c" ver="5" description="" cardinal="1">
			<designed target="Location" value="" ver="5"/>
			<designed target="Port" value="0" ver="5"/>
			<designed target="HistoryPort" value="0" ver="5"/>
			<designed target="Path" value="" ver="5"/>
			<designed target="Active" value="false" ver="5"/>
			<designed target="ReAdvise" value="0" ver="5"/>
			<designed target="ClientDisplayName" value="HMI" ver="5"/>
			<designed target="ClientId" value="HMI" ver="5"/>
			<object access-modifier="private" name="oldConnectionState" display-name="oldConnectionState" uuid="53a20e96-44a5-46ba-b5d2-b64e4446ec30" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5" description="" cardinal="1"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnConnectionStateChanged">
				<body kind="om">
					<![CDATA[if (oldConnectionState != connectionState)
{
	oldConnectionState = connectionState;
	UpdateAdviseWarnings();
}]]>
				</body>
			</do-on>
			<init target="ParentSource" ver="5" ref="here.initApSource"/>
		</object>
		<object access-modifier="private" name="ServerAPI" display-name="ServerAPI" uuid="57f7eea4-ff63-49a9-bae6-1d3e750df056" base-type="ServerAPI" base-type-id="91c3f218-c07d-453a-a7b0-8b6aab8fda83" ver="5" description="" cardinal="1">
			<init target="init_SessionID" ver="5">
				<expr>
					<![CDATA[unit.Const.sessions.GetId()]]>
				</expr>
			</init>
			<object access-modifier="private" name="OnError" display-name="OnError" uuid="068ef427-6e11-4896-9336-55ac025ec359" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Debug.Log("ServerAPI: " + LastError);]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="FullDescriptionReaded" display-name="FullDescriptionReaded" uuid="fbff4603-c36f-4e51-9592-95668ac54eeb" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="javascript">
						<![CDATA[var event = JSON.parse(FullDescriptions.Get());
//Debug.Log("'" + event.description + "' is full description of " + event.tag);
var index = Params.GetIndexByPath(event.tag);
Params.Lines[index].Description = event.description;
Legend.UpdateItem(index);]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="RelativeTagReaded" display-name="RelativeTagReaded" uuid="32c2a358-3a84-45e0-a7e9-47eb465b4442" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="javascript">
						<![CDATA[var event = JSON.parse(RelativeTags.Get());
//Debug.Log(event.relativeTag + " is relative tag of " + event.tag);
var index = Params.GetIndexByPath(event.tag);
Params.Lines[index].RelationTag = event.relativeTag;
Legend.UpdateItem(index);]]>
					</body>
				</do-on>
			</object>
			<init target="pOnError" ver="5" ref="OnError"/>
			<init target="pFullDescriptionReaded" ver="5" ref="FullDescriptionReaded"/>
			<init target="pRelativeTagReaded" ver="5" ref="RelativeTagReaded"/>
			<init target="init_ApSource" ver="5" ref="here.initApSource"/>
		</object>
		<object access-modifier="private" name="bPlayStatus" display-name="bPlayStatus" uuid="ab5a258a-1ee1-48be-815d-8b66cc7e4a96" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="chartMousePressed" display-name="chartMousePressed" uuid="2e20dcb0-6a70-40d7-87b9-13cb0e700c19" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="chartMouseWheel" display-name="chartMouseWheel" uuid="abb04374-a148-48ed-af5f-306c9ab2a111" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="tMouseWheelStart" display-name="tMouseWheelStart" uuid="86e5d1ea-6d2d-4243-87bf-6f9c664023ac" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="zOrderCount" display-name="zOrderCount" uuid="e2f1ab16-b55a-4958-9740-43e60c8235e6" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<object access-modifier="private" name="Timer_ValueQuery" display-name="Timer_ValueQuery" uuid="1ff6e448-8e6d-4d7a-a24b-d869fc5f2c7c" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="5">
			<designed target="Period" value="1000" ver="5"/>
			<designed target="Active" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
				<body kind="om">
					<![CDATA[i: int4 = 0;
error: string = "";
while (i < private.QueryError.Length)
{
	if (private.QueryError[i] != "")
	{
		if (error == "")
			error = private.QueryError[i];
		else error += "\n" + private.QueryError[i];
		
		private.QueryError[i] = "";
	}
	i += 1;
}

if (error != "")
{
	private.EventParams[0] = error;	
	pOnError.Invoke();
}

Legend.UpdateMinMaxSize();

Active = false;]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="QueryError" display-name="QueryError" uuid="6c9c8886-206b-4f6f-82c2-abc4d5c07072" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" cardinal="21"/>
		<object access-modifier="private" name="LoadingFilePath" display-name="LoadingFilePath" uuid="87c4e4bb-7418-47bd-b0c5-43c2b0be5091" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="LoadingFolder" display-name="LoadingFolder" uuid="60478842-b1dc-4a52-a8c8-6ad736ab98c9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="ExportTrendsPath" display-name="ExportTrendsPath" uuid="f82e4695-e70a-43e7-b91a-0d980c5415d7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<object access-modifier="private" name="ExportFile" display-name="ExportFile" uuid="19666989-2ffc-4ac9-a99e-1b6ce51a38b7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<do access-modifier="private" name="SetMarkerLabelVisible" display-name="SetMarkerLabelVisible" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("SetMarkerLabelVisible.index="+Str.ToString(index)+", value="+Str.ToString(value));
Params.Lines[index].bShowMarkerLabels = value;
n: int4 = 0;
while (n < Chart.Length)
{
	j: int4 = 1;
	while (j < Chart.ControlLine.Length)
	{
		Chart[n].ControlLine[j].CrossPoint[index].Visible = value;
		j += 1;
	}
	n += 1;
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="d5dbd76e-c027-4a3f-b549-15f96acf307f" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			<param access-modifier="private" name="value" display-name="" uuid="8fa7360e-6051-4f30-b334-8f0bb216daa5" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
		<do access-modifier="private" name="ExportParams" display-name="ExportParams" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="om">
				<![CDATA[//Debug.Log("ExportParams");

// Заполнение недостающих параметров текущими значениями
Params.ActiveMode = ActiveMode.Value;

Params.Xmin = Variant.ToUint8(Chart.Axis_X.Min, 0);
Params.Xmax = Variant.ToUint8(Chart.Axis_X.Max, 0);

Params.tHistRangeStart = DataIntervalBegin;
Params.tHistRangeEnd = DataIntervalEnd;

// Сохранение параметров осей
i: int4 = 1;	
while (i < Params.Lines.Length)
{
	nChart: int4 = Params.Lines[i].nChart; // индекс в массиве трендовых полей
	Params.Axis[i].Ymin = Variant.ToDouble(Chart[nChart].Axis_Y[i].Min, 0);
	Params.Axis[i].Ymax = Variant.ToDouble(Chart[nChart].Axis_Y[i].Max, 0);
	i	+= 1;
}

n: int4 = 0;	
while (n < Params.Charts.Length)
{
	Params.Charts[n].Y0min = Variant.ToDouble(Chart[n].Axis_Y.Min, 0);
	Params.Charts[n].Y0max = Variant.ToDouble(Chart[n].Axis_Y.Max, 0);
	n	+= 1;
}

return Params.SaveToFile(filePath);]]>
			</body>
			<param access-modifier="private" name="filePath" display-name="" uuid="23c45208-98ad-4ee1-b729-311fd3394840" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="RestartOperativeMode" display-name="RestartOperativeMode" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[i: int4 = 1;
while (i < Line.Length)
{
	// перезапускаем чтение только для используемых графиков (не из файла)
	if (Params.Lines[i].Used && Params.Lines[i].TypeGraph != unit.Const.tgFILE_GRAPH && Params.Lines[i].bMainTime)
	{
		Lines.BeginReadRT(i);
	}
	i += 1;
}]]>
			</body>
		</do>
		<do access-modifier="private" name="UpdateOperativeTimeInterval" display-name="UpdateOperativeTimeInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[t2: uint8 = lastTime;

if (ShowRedLine)
{
	// допускается сдвиг красной линии от 1 до 99 процентов
	shift: uint4 = Math.Min(99, Math.Max(1, RedLineShift));
			
	// cдвиг отображаемого интервала
	t2 += ViewInterval.currentValue * shift / 100;
}

if (t2 > ViewInterval.End || shiftToLastTime)
{
	// обновляем текущий интервал
	t1: uint8 = t2 - ViewInterval.currentValue;
	//Debug.Log("UpdateOperativeTimeInterval: " + DateTime.ToString(t1) + " .. " + DateTime.ToString(t2));
	SetTimeInterval(t1, t2);
}

private.UpdateDataInterval(lastTime - OperativeStoredInterval.currentValue * unit.Const.dtONE_SECOND, ViewInterval.End);]]>
			</body>
			<param access-modifier="private" name="lastTime" display-name="" uuid="9869ff72-9ada-4579-a1da-035c6304ecfb" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
			<param access-modifier="private" name="shiftToLastTime" display-name="" uuid="4a49de60-9844-401b-b2de-a86a4593b80f" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
		<do access-modifier="private" name="SetExtrapolationLimit" display-name="SetExtrapolationLimit" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// ограничиваем время экстраполяции
n: int4 = 0;
while (n < Chart.Length)
{
	if (Params.Charts[n].bVisible)
	{
		rightExtrapolationLimit: uint8 =  Variant.ToUint8(Chart[n].RightExtrapolationLimit, 0);
		if (rightExtrapolationLimit != end)
		{
			//Debug.Log("Chart[" + String.ToString(n) + "].RightExtrapolationLimit = " + DateTime.ToString(end));
			Chart[n].RightExtrapolationLimit = end;
		}
	}
	n += 1;
}]]>
			</body>
			<param access-modifier="private" name="end" display-name="" uuid="24da6fa2-bf98-4438-942e-afdfad4fafba" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
		</do>
		<do access-modifier="private" name="UpdateDataInterval" display-name="UpdateDataInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (DataIntervalBegin != begin || DataIntervalEnd != end)
{
	//Debug.Log("UpdateDataInterval: " + DateTime.ToString(begin) + " - " + DateTime.ToString(end));
	if (DataIntervalBegin != begin)
	{
		DataIntervalBegin = begin;
		MiniTrend.MinTimeline = begin;
		//Debug.Log("MiniTrend.MinTimeline: " + DateTime.ToString(Variant.ToUint8(MiniTrend.MinTimeline, 0)));
	}
	
	if (DataIntervalEnd != end)
	{
		DataIntervalEnd = end;
		MiniTrend.MaxTimeline = end;
		//Debug.Log("MiniTrend.MaxTimeline: " + DateTime.ToString(Variant.ToUint8(MiniTrend.MaxTimeline, 0)));
	}
	
	// Удаление реперов выходящих за пределы интервала данных
	j: int4 = 0;
	while (j < Chart.ControlLine.Length)
	{
		if (Chart.ControlLine[j].Visible)
		{			
			reperTime: uint8 = Variant.ToUint8(Chart.ControlLine[j].Value, 0);
			if (reperTime < begin || reperTime > end)
			{
				//Debug.Log("Remove reper at " + DateTime.ToString(reperTime));
				Repers.Remove(j);
			}
		}
		j += 1;
	}
}

now: uint8 = DateTime.UtcNow();
private.SetExtrapolationLimit(now<end ? now : end);]]>
			</body>
			<param access-modifier="private" name="begin" display-name="" uuid="48e5ed61-4f73-4de7-9949-194317ecb521" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
			<param access-modifier="private" name="end" display-name="" uuid="18c01181-5ca3-4926-b140-fc4ceded5768" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
		</do>
		<do access-modifier="private" name="HistoryRequest" display-name="HistoryRequest" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[Lines.HistoryRequestMask = Math.SetBit(Lines.HistoryRequestMask, index);
Lines.HistoryNeedMask = Math.ClearBit(Lines.HistoryNeedMask, index);
//Debug.Log(String.ToString(RequestCounter) + ". history request \"" + Line[index].ApItem.Tag + "\"");

// останавливаем и удаляем данные
Line[index].DataSource_1.CancelReadAsync();
Line[index].DataSource_1.Clear();

Line[index].DataSource_1.EnableRT(false);
Line[index].DataSource_1.ApItemValueQuery.Mode = unit.Const.vqmHISTORY;
Line[index].DataSource_1.ApItemValueQuery.HistoricalRangeStart = DataIntervalBegin;
Line[index].DataSource_1.ApItemValueQuery.HistoricalRangeEnd = DataIntervalEnd;
Line[index].DataSource_1.ApItemValueQuery.Reload();
Line[index].DataSource_1.BeginReadAsync();]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="ce64927e-5fc6-4d38-8619-550b482f18b0" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5"/>
		</do>
		<do access-modifier="private" name="UpdateAllCharts" display-name="UpdateAllCharts" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[i: int4 = 0;
while (i < Chart.Length)
{
	if (Chart[i].Visible)
	{
		Chart[i].Update();
		Debug.Log("Chart[" + String.ToString(i) + "].Update()");
	}
	i += 1;
}]]>
			</body>
		</do>
		<object access-modifier="private" name="DataIntervalBegin" display-name="DataIntervalBegin" uuid="6a1893ce-e798-49fc-8ec4-2d060308eeb5" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="DataIntervalEnd" display-name="DataIntervalEnd" uuid="f426dbc1-1a0e-436f-bbb3-3d3c0210b6d9" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="EventParams" display-name="EventParams" uuid="bb22c049-f45a-4afc-b9b0-a8137d677f39" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="2"/>
		<object access-modifier="private" name="ShowError" display-name="ShowError" uuid="5812eab3-006d-4fc2-bb02-634f92b557c1" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="4b34b276-4d0b-40b9-a47c-a643686755f9" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="5">
					<init target="Icon" ver="5" value="2"/>
					<init target="Buttons" ver="5" value="0"/>
					<init target="Message" ver="5">
						<expr>
							<![CDATA[message]]>
						</expr>
					</init>
					<designed target="WindowCaption" value="Внимание" ver="5"/>
					<init target="pTheme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
			<object access-modifier="private" name="message" display-name="message" uuid="d0e104c3-2525-4a03-ad81-d07eeb69a35f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</object>
		<object access-modifier="private" name="ShowComplete" display-name="ShowComplete" uuid="c0df5bb0-9b7c-4fab-b719-2b339a3a6e01" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="3c034990-6639-4ead-8a5d-5acc26e53c2c" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="5">
					<init target="Icon" ver="5" value="0"/>
					<init target="Buttons" ver="5" value="0"/>
					<init target="Message" ver="5">
						<expr>
							<![CDATA[message]]>
						</expr>
					</init>
					<init target="pTheme" ver="5" ref="here.private.pTheme"/>
				</object>
			</do-on>
			<object access-modifier="private" name="message" display-name="message" uuid="32716ccc-981b-4b65-8d1f-b0f8ae831f96" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</object>
		<object access-modifier="private" name="pTheme" display-name="pTheme" uuid="45c3095b-8aa8-402e-9033-a13b4d6ad59f" base-type="Trends_Theme" base-type-id="3fbfa4c2-c742-4bec-94dc-d1bcb7ef25b6" ver="5" base-ref="true">
			<do-trace access-modifier="private" target="BackgroundColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.BackgroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="ForegroundColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.ForegroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="DisabledFontColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.DisabledFontColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="EditorBrushColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.EditorBrushColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="EditorFontColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.EditorFontColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="BorderColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.BorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="SelectionColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.SelectionColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="DisabledBorderColor" ver="5">
				<body>
					<![CDATA[here.init_Theme.DisabledBorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleFont" ver="5">
				<body>
					<![CDATA[here.init_Theme.TitleFont]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[here.init_Theme.Font]]>
				</body>
			</do-trace>
		</object>
		<do access-modifier="private" name="UpdateAdviseWarnings" display-name="UpdateAdviseWarnings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[warnings: string = "";
if (ApSource.ConnectionState == unit.Const.stADVISED_OK)
{
	i: int4 = 1;
	while (i <= unit.Const.MAX_LINES)
	{
		if (Params.Lines[i].Used && Line[i].ApItem.AdviseState == unit.Const.stNOADVISED && Params.Lines[i].TypeGraph != unit.Const.tgFILE_GRAPH)
		{
			if (warnings != "")
				warnings += "\n";

			warnings += Params.Lines[i].Tag + ": " + Line[i].ApItem.AdviseStateString;
		}
		i += 1;
	}
}
AdviseWarnings = warnings;]]>
			</body>
		</do>
		<do access-modifier="private" name="ItemsAdd" display-name="ItemsAdd" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<param access-modifier="private" name="path" display-name="" uuid="a160b5f5-6707-495b-98ed-584096600f19" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<body kind="om">
				<![CDATA[//Debug.Log("ItemsAdd: "+path);

i: int4 = Params.GetItemFree();
if (i > 0)
{
	// Получаем цвет графика, отличающийся от остальных
	usedColors: string = Params.GetUsedColors();
	color: uint4 = pSettings.ColorPalette.GetNext(usedColors);  

	Params.Lines[i].Used = true;
	Params.Lines[i].TypeGraph = typeGraph;
	Params.Lines[i].Tag = path;	
	Params.Lines[i].Description = description;
	Params.Lines[i].Unit = eu;//ед.измерения
	
	markerIndex: int4 = unit.Const.mrk.GetNext();
	Params.Lines[i].PointSymbol = unit.Const.mrk.MARKER_SYMBOL[markerIndex];
	Params.Lines[i].PointSymbolCode = unit.Const.mrk.MARKER_CODE[markerIndex];

	Params.Lines[i].numAxis = i;//номер оси Y для привязки
	Params.Axis[i].Ymin = LowRange;	// Восстанавливаем значения макисмума и минимума начальными значениями не зависимо от режима
	Params.Axis[i].Ymax = HighRange;
	Params.Axis[i].fixYmin = LowRange;	
	Params.Axis[i].fixYmax = HighRange;
	Params.Axis[i].ColorY = color;
	Params.Axis[i].bUserScale = false;
	Params.Lines[i].bVisible = true;
	Params.Lines[i].bSyncroColorMarkerLabels = SynchroColorMarker;
	Params.Lines[i].ColorMain = color;
	Params.Lines[i].WidthGood = GraphicThickness.Value;
	Params.Lines[i].StyleGood = unit.Const.slSOLID_LINE;
	Params.Lines[i].Interpolation = InterpolationLine;	
	Params.Lines[i].FileName = "";	
	Params.Lines[i].HostName = GetHostName();	
	Params.Lines[i].Port = GetAPSourcePort();	
	Params.Lines[i].nXColumn = nXColumn;	
	Params.Lines[i].nChart = nChart;		
	Params.Lines[i].AltUnit = "";
	Params.Lines[i].Ratio = 1;
	Params.Lines[i].Offset = 0;
	nCurrentMode:int4 = (ModeTimeSourceServer==0)?(unit.Const.tmSOURCE):(unit.Const.tmSERVER);	// Определяем номер колонки времени в соответсвии с выбранным режимом
	Params.Lines[i].nXColumn = nXColumn;
	// Если график не в текущем режиме- значит он дублирующий и не отображается в оперативном режиме
	// Помечаем график чтобы отображать его в легенде и чарте оперативного режима
	Params.Lines[i].bMainTime = nXColumn == nCurrentMode || !UseServerTime;
	Lines.SetDefaultStyle(i);

	// увеличиваем счетчик линий	
	Params.LinesCount = Params.LinesCount + 1;
	
	Lines.Add(i, typeGraph);
	Axis.LinkUpdate(GlobalRanges);
	UpdateYRanges(AutoRange);
}
return i;]]>
			</body>
			<param access-modifier="private" name="eu" display-name="" uuid="b27670de-ac7e-4823-84cd-36d9f729b65c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="description" display-name="" uuid="f21a1a66-0457-4daf-a136-47866caf641b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="nXColumn" display-name="" uuid="8dcf7f20-d029-423f-bde3-6e529b70ee60" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="typeGraph" display-name="" uuid="5fd0d286-9147-44d1-a2c4-efab47855b1c" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
			<param access-modifier="private" name="nChart" display-name="" uuid="9267b97c-2792-4fa1-9271-fec7b8028ff4" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="ItemsAddByJson" display-name="ItemsAddByJson" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<param access-modifier="private" name="json" display-name="" uuid="68e0f9df-06c9-4c1e-b580-3332584166fe" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<body kind="javascript">
				<![CDATA[//log("DoOnDrop:"+json);
var itemsData = JSON.parse(json).data;

var i = 0;
//var addedItems = [];
while (i < itemsData.length)
{
	var tag = itemsData[i].tag;
	if (tag !=undefined)		// поле tag должно быть обязательно
	{
		var itemIndex = AddItem(tag, itemsData[i].eunits, itemsData[i].description, nChart);
		if (itemIndex > 0)
		{
			// Переименование свойств в формат функции ConfigureGraphic
			itemsData[i].tag = undefined;
			if (itemsData[i].Color != undefined)
			{
				 itemsData[i].color = itemsData[i].Color;
				 itemsData[i].Color = undefined;
			}
			if (itemsData[i].Axis != undefined)
			{
				 itemsData[i].tagAxis = itemsData[i].Axis;
				 itemsData[i].Axis = undefined;
			}
			if (itemsData[i].AxisColor != undefined)
			{
				 itemsData[i].colorAxis = itemsData[i].AxisColor;
				 itemsData[i].AxisColor = undefined;
			}
			if (itemsData[i].LowRange != undefined)
			{
				 itemsData[i].lowRange = itemsData[i].LowRange;
				 itemsData[i].LowRange = undefined;
			}
			if (itemsData[i].HighRange != undefined)
			{
				 itemsData[i].highRange = itemsData[i].HighRange;
				 itemsData[i].HighRange = undefined;
			}
			var stringConfig = JSON.stringify(itemsData[i], null, 2);
			ConfigureGraphic(tag, stringConfig);
		}
	}
	i += 1;
}

// в историческом режиме загружаем данные добавленных графиков
if (ActiveMode == unit.Const.amHISTORY)
	LoadHistoricalData();]]>
			</body>
			<param access-modifier="private" name="nChart" display-name="" uuid="69767203-1e3c-43bc-bc97-d5409d46a50b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="RemoveItem" display-name="RemoveItem" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("RemoveItem. Index="+Str.ToString(index));

i:int4 = 1;
while (i < Line.Length)
{
	if (index==unit.Const.ALL || index==i)
	{
		Line[i].Visible = false;
		Line[i].ApItem.Path = "**";
		Line[i].zOrder = 0;
		Line[i].DataSource_1.Clear();
		Line[i].DataSource_1.CancelReadAsync();
		Line[i].DataSource_1.ApItemValueQuery.Active = false;
	}
	i += 1;
}
UpdateAdviseWarnings();
ConvertUnitsMenu.Update();
Axis.LinkUpdate(Params.bGlobalRanges);]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="b7baea2b-3823-4f40-8740-f98e334cab92" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="GetExportFileFilter" display-name="GetExportFileFilter" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="om">
				<![CDATA[filter: string = "Текстовый файл (*.csv)|*.csv|Книга Excel (*.xlsx)|*.xlsx";
if (Runtime.WorkMode != 1) // в WebViewer формат pdf не поддерживается
	filter += "|Файл Adobe PDF (*.pdf)|*.pdf";
return filter;]]>
			</body>
		</do>
		<do access-modifier="private" name="ResetZoomX" display-name="ResetZoomX" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// восстанавливаем интервал по оси времени
if (ActiveMode == unit.Const.amOPERATIVE)
{
	// в оперативном режиме переходим к текущему времени и запускаем проигрывание	
	ViewInterval.Restore();	
	OperativeStoredInterval.Restore();
	MoveToNow();
	SetPause(false);
}
else
{
	// в историческом режиме восстанавливаем диапазон данных
	SetTimeInterval(DataIntervalBegin, DataIntervalEnd);
	MiniTrend.MinTimeline = private.DataIntervalBegin;
	MiniTrend.MaxTimeline = private.DataIntervalEnd;
}
]]>
			</body>
		</do>
		<do access-modifier="private" name="GetHostName" display-name="GetHostName" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[let pApSrc = ApSource.ParentSource;
let i = 10;

while (pApSrc.Location=="" && i>0)
{
	pApSrc = pApSrc.ParentSource;
	i -= 1;
}

return pApSrc.Location;]]>
			</body>
		</do>
		<do access-modifier="private" name="GetAPSourcePort" display-name="GetAPSourcePort" ver="5" type="uint2" type-id="ae923ad8-8b75-4813-8121-36efe3cc8c12">
			<body kind="javascript">
				<![CDATA[let pApSrc = ApSource.ParentSource;
let i = 10;

while (pApSrc.Port==0 && i>0)
{
	pApSrc = pApSrc.ParentSource;
	i -= 1;
}

return pApSrc.Port;]]>
			</body>
		</do>
		<init target="pTheme" ver="5" ref="here.init_Theme"/>
		<object access-modifier="private" name="pPermissions" display-name="pPermissions" uuid="b0865380-bd89-4cc8-a4f8-9b5360595d1a" base-type="Trends_Permissions" base-type-id="083b63d1-3678-4da0-80a0-9c09d0076a3c" base-const="true" base-ref="true" ver="5" description=""/>
		<object access-modifier="private" name="pScreenKeyboard" display-name="pScreenKeyboard" uuid="1e1641ef-ab06-4242-be1c-3014b5b747cc" base-type="ScreenKeyboardOptions" base-type-id="0589bc8e-fbb2-4f0e-b5d2-f0d825538ef1" base-const="true" base-ref="true" ver="5" description=""/>
		<object access-modifier="private" name="ErrorMessages" display-name="ErrorMessages" uuid="48b0492e-4be8-46a7-aeaa-277b0cbb7be8" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<init target="pScreenKeyboard" ver="5" ref="here.init_ScreenKeyboard"/>
		<init target="pPermissions" ver="5" ref="here.init_Permissions"/>
		<object access-modifier="private" name="NotifyViewChanged" display-name="NotifyViewChanged" uuid="852532f9-54cd-40f3-926c-8270e64d9961" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[Timer.Active = true;]]>
				</body>
			</do-on>
			<object access-modifier="private" name="Timer" display-name="Timer" uuid="eccb53a9-ab51-4d62-8a81-fb9a4a059ebf" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="5">
				<designed target="Period" value="250" ver="5"/>
				<designed target="Active" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
					<body kind="om">
						<![CDATA[Active = false;
pOnViewChanged.Invoke();]]>
					</body>
				</do-on>
			</object>
		</object>
		<object access-modifier="private" name="pSettings" display-name="pSettings" uuid="05b03d29-810a-4b23-b7c6-a8699f1f3188" base-type="Trends_Settings" base-type-id="91daec58-54a8-4900-9b93-be8602b98694" base-const="true" base-ref="true" ver="5" description=""/>
		<init target="pSettings" ver="5" ref="here.init_Settings"/>
		<object access-modifier="private" name="pTemplates" display-name="pTemplates" uuid="d83f7b1b-a2d6-40fb-96e1-9dd1e4bb492e" base-type="Templates" base-type-id="020ae0f1-0abb-4c52-9c0e-0152917830ed" base-const="true" base-ref="true" ver="5" description=""/>
		<init target="pTemplates" ver="5" ref="here.init_Templates"/>
		<do access-modifier="private" name="GetExportPath" display-name="GetExportPath" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="om">
				<![CDATA[// Если путь не указан, то используем Export в папке с данными программы
if (pSettings.ExportFolder == "")
	return Files.CombinePath(unit.ProductInfo.GetProgramDataFolder(), "Export");
else return pSettings.ExportFolder;]]>
			</body>
		</do>
		<do access-modifier="private" name="GetExportPathRoot" display-name="GetExportPathRoot" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="om">
				<![CDATA[// Если fileSystemAccess = true, то пользователь может сменить этот путь на любой другой, иначе он ограничен папкой экспорта.
if (pPermissions.FileSystemAccess)
	return ""; // корневой путь произвольного доступа
else
	return GetExportPath();]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="Lines" display-name="Lines" uuid="f13d4102-8187-42de-9b61-6abebec0fbd7" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<do access-modifier="private" name="Add" display-name="Add" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("AddItem["+String.ToString(index)+"]:"+Params.Lines[index].Tag);
Line[index].ApItem.Path = Params.Lines[index].Tag;
Line[index].Tag = Params.Lines[index].Tag;
Line[index].Title = Params.Lines[index].Description;

// Наращиваем значение текущего уровня приоритета для того, что бы добавляемая линия отрисовывалсь поверх
// существующих. Максимальное значение ограничено только разрядностью переменной.
private.zOrderCount += 1;
Line[index].DataSource_1.ApItemValueQuery.Active = (type != unit.Const.tgFILE_GRAPH); 

Lines.SetChart(index, Params.Lines[index].nChart);
SelectedItem = index;
Lines.Update();

Lines.SetVisible(index, Params.Lines[index].bVisible);
ConvertUnitsMenu.Update();]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="ef874cb7-4462-4a7e-ac14-cf35dbb81796" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="type" display-name="" uuid="a0926122-0794-4724-ac78-872cfaa1a8e2" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
		<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[SetSelect(SelectedItem);

i: int4 = 1;
while (i < Line.Length)
{
	if (Params.Lines[i].Used)
	{
//		Line[i].Decor_ManualQuality.Color =	Params.Lines[i].ColorManual;
//		Line[i].Decor_ManualQuality.Active = Params.Lines[i].bUseColorManual;
		Line[i].PointSymbolCode =  Params.Lines[i].PointSymbolCode;
		Line[i].PointVisible =	ShowDataPoints || (Params.Lines[i].ItemCDT == unit.Const.cdt.STRING);
		Line[i].StringTagsYValue = Params.Lines[i].StringTagYValue;
		Line[i].drawingType = TypeConvert.ToUint4((Params.Lines[i].Interpolation)?(0):(1));
		Line[i].Unit = Params.Lines[i].AltUnit!="" ? Params.Lines[i].AltUnit : Params.Lines[i].Unit;
		Line[i].Ratio = Params.Lines[i].Ratio;
		Line[i].Offset = Params.Lines[i].Offset;
		if (ActiveMode == unit.Const.amOPERATIVE)
			Line[i].ColumnNumberTime = unit.Const.tmSOURCE;
		else	Line[i].ColumnNumberTime = Params.Lines[i].nXColumn;
		private.SetMarkerLabelVisible(i, Params.Lines[i].bShowMarkerLabels);
		SetColor(i, Params.Lines[i].ColorMain);
		Axis.SetColor(i, Params.Axis[i].ColorY);	
	}
	i += 1;
}

UpdateVisible(ActiveMode);]]>
			</body>
		</do>
		<do access-modifier="private" name="UpdateVisible" display-name="UpdateVisible" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[i: int4 = 1;
while (i < Line.Length)
{
	if (Params.Lines[i].Used)
	{	
		if (mode == unit.Const.amOPERATIVE)
			Line[i].Visible = Params.Lines[i].bVisible && Params.Lines[i].bMainTime && Params.Lines[i].TypeGraph != unit.Const.tgFILE_GRAPH;
		else Line[i].Visible = Params.Lines[i].bVisible;
	}
	i += 1;
}]]>
			</body>
			<param access-modifier="private" name="mode" display-name="" uuid="e4fa5353-fe67-4862-a4d5-cb0b917410ff" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="SetSelect" display-name="SetSelect" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (index != SelectedItem)	private.zOrderCount += 1;
SelectedItem = index;
Line[index].zOrder = private.zOrderCount;	

i:int4 = 1;
while (i < Line.Length)
{
	if (Params.Lines[i].Used)
	{
		lineWidthGood: float = Params.Lines[i].WidthGood;	
		lineStyleGood: uint4 = Params.Lines[i].StyleGood;
		if (index == i)		// Для выделенного графика
		{																																					
			// Увеличение при выделении
			lineWidthGood += DeltaLineWidth;

			// Привязка выделенной линии к реперам
			lineId:int4 = Line[i].ID;		// определяем id выделенной линии
			j:int4 = 0;
			while	(j < Chart.ControlLine.Length)
			{
				Chart[Params.Lines[i].nChart].ControlLine[j].SetLine(lineId);
				j += 1;
			}
			MiniTrend.LinkToChart(Params.Lines[i].nChart);
		}
		// при нулевом стиле линии точки не отображаются, поэтому
		// при выбранном нулевом стиле, стиль устанавливается в 1, а толщина линии обнуляется
		Line[i].LineWidth = (lineStyleGood!=unit.Const.slWITHOUT_LINE) ? lineWidthGood : 0;
		Line[i].LineBrushStyle =	(lineStyleGood!=unit.Const.slWITHOUT_LINE) ? lineStyleGood : unit.Const.slSOLID_LINE;
		Line[i].PointSize = TypeConvert.ToUint4(lineWidthGood <= 2 ? 15 : lineWidthGood * 5 + 5);
		DecorApply(i);
	}
	i += 1;
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="b0f11672-ff50-473f-b7aa-13079a97abf5" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="SetColor" display-name="SetColor" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[Line[index].Color = color;
Params.Lines[index].ColorMain = color;

i: int4 = 0;
while (i < Line.Decor.Length)
{
	if (Line[index].Decor[i].Active && Params.Lines[index].Decor.Style[i].LineColor == unit.Const.slUNDEFINED)
		Line[index].Decor[i].Color = color;

	i += 1;
}

if (Params.Lines[index].bSyncroColorMarkerLabels)
	SetLabelColor(index, color);
else
	SetLabelColor(index, unit.Const.clBLACK);]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="8e1abd41-f6f5-482c-80fe-47b3c0eb18f3" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="color" display-name="" uuid="73119b8a-fdc8-4836-82a8-db231eed7580" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
		<do access-modifier="private" name="LoadFile" display-name="LoadFile" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="om">
				<![CDATA[//Debug.Log("Lines.Load: "+fileName+", exindex="+String.ToString(exindex));
index: int4 = Params.GetItemFree();
if (index == 0)
{
	private.EventParams[0] = "Достигнут лимит на количество графиков (" + String.ToString(Line.Length - 1) + ").\r\n"+
			"Освободите поле графиков и повторите загрузку.";
	pOnError.Invoke();
	return false;
}
Params.nItem[exindex] = index;	// Запоминаем индекс графика, чтобы использовать после полной загрузки
	
if (Files.Exists(fileName))		// если файл для загрузки существует
{	
	if (exindex == 0)
	{
		IndexItemLoad = index;	
		private.ItemsAdd("", "", "", unit.Const.tmSOURCE, unit.Const.tgFILE_GRAPH, 0);
	}
	else
	{
		Params.Lines[index].Used = true;
		Params.CopyLineFromEx(index, exindex);
		Lines.Add(index, unit.Const.tgFILE_GRAPH);
		IndexItemLoad = 0;
	}
	
	Params.Lines[index].TypeGraph = unit.Const.tgFILE_GRAPH;
	Params.Lines[index].FileName = (private.LoadingFolder != "") ? private.LoadingFilePath : fileName;
	
	//	загружаем данные
	if (String.EndsWith(fileName, ".json"))
	{
		Line[index].DataSource_1.Load(fileName, "json");
		UploadFilesMask = Math.SetBit(UploadFilesMask, TypeConvert.ToUint1(index));
	}
	else if (String.EndsWith(fileName, ".csv"))
	{
		params: string = "{\"timeStampFormat\": \"" + private.pSettings.DateTimeFormats[0] + "\"}";
		Line[index].DataSource_1.LoadExtended(fileName, "csv", params);
		UploadFilesMask = Math.SetBit(UploadFilesMask, TypeConvert.ToUint1(index));
	}
	
	return true;
}
else
{
	private.EventParams[0] = "Файл не существует: " + fileName + ").\r\n";
	pOnError.Invoke();
	return false;
}]]>
			</body>
			<param access-modifier="private" name="fileName" display-name="" uuid="874db621-726d-43fb-9c75-cd140667f620" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="exindex" display-name="" uuid="18b9571c-e05f-4ccf-b897-a87a7caaa6c5" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="Save" display-name="Save" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("Lines.Save: "+folder);
Files.CreateRecursiveFolder(folder);
if (Files.Error.State)
{
	if (private.ExportFile != "")
	{
		private.EventParams[0] = private.ExportFile;
		private.EventParams[1] = Files.Error.Text;
		pOnDataSave.Invoke();
		
		private.ShowError.message = "Ошибка сохранения графиков в файл\n" + private.ExportFile + "\n" + Files.Error.Text;
		private.ShowError.Invoke();
	}
	else
	{
		private.EventParams[0] = Files.Error.Text;
		pOnError.Invoke();
	}
}
else
{
	// Завершение процедуры записи отслеживается по изменению количества готовых записанных файлов
	// признаком завершения является равенство количества запросов и количества записанных файлов.
	SaveFilesMask = 0; // Обнуляем маску запросов на запись файлов
	
	// сохраняем параметры графиков
	paramsPath: string = Files.CombinePath(folder, "00.json");
	private.ExportParams(paramsPath);
	
	// сохраняем графики в отдельные файлы
	f: int4 = 0;
	i: uint1 = 1;
	while (i < Line.Length)
	{
		if (Params.Lines[i].Used) 
		{
			f += 1; // увеличиваем номер файла
			filePath: string = Files.CombinePath(folder, String.ToString(f) + ".json");
			Line[i].DataSource_1.Save(filePath, "json");
			SaveFilesMask = Math.SetBit(SaveFilesMask, i);
		}
		i += 1;
	}
}]]>
			</body>
			<param access-modifier="private" name="folder" display-name="" uuid="64bdf917-f2ac-461a-a20f-adadbbba0c0b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="SetChart" display-name="SetChart" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("SetChart["+String.ToString(nChart)+"]-Line["+String.ToString(index)+"]");
Params.Lines[index].nChart = nChart;

// Включаем видимость нового чарта перед привязкой осей
if (!Chart[nChart].Visible)
	Chart[nChart].SetVisible(true);

// Переподключаем линии на оси нового чарта
Axis.LinkUpdate(GlobalRanges);

// указываем видимый диапазон
Chart[nChart].UpdateAxisXInterval(ViewInterval.Begin, ViewInterval.End);

MiniTrend.LinkToChart(nChart);

// При переносе линии на другой чарт необходима перепривязка CrossPoint к Линии,
// так как, Метод CrossPoint.SetLineID(int lineID) срабатывает, только если репер, к которому 
// относится CrossPoint, и линия привязаны к одной и той же оси. #28614
Chart[nChart].LinkCrossPoint();]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="57683cc5-a3a2-441d-849c-f44086583b5b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="nChart" display-name="" uuid="33eca9c5-3472-4df1-8ba4-3ac98bcf3364" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="SetCanonicalType" display-name="SetCanonicalType" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("ItemCDT[" + String.ToString(index) + "]=" + String.ToString(canonicalType));
if (Params.Lines[index].ItemCDT != canonicalType)
{
	Params.Lines[index].ItemCDT = canonicalType;

	if (canonicalType == unit.Const.cdt.STRING)
	{
		Line[index].LineWidth = 0;
		Line[index].PointVisible =  true;
		Params.Lines[index].StyleGood = unit.Const.slWITHOUT_LINE;
		i:int4 = 0;		
		while (i < Params.Lines.Decor.Style.Length)
		{
			Params.Lines[index].Decor.Style[i].LineStyle = unit.Const.slWITHOUT_LINE;
			i += 1;
		}
		private.SetMarkerLabelVisible(index, true);
		SetSelect(SelectedItem);		// Обновляем отображение стиля
	}
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="f3ab5d95-0549-4814-957b-296e37a5fe02" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			<param access-modifier="private" name="canonicalType" display-name="" uuid="a7251d4c-6af1-406e-8e42-d16b590dc657" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5"/>
		</do>
		<do access-modifier="private" name="SetVisible" display-name="SetVisible" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (index > 0 && index < Line.Length) 
{
	Params.Lines[index].bVisible = value;
	Line[index].Visible = value;
}
Axis.LinkUpdate(GlobalRanges);]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="f2db7db3-45b1-4b0b-b322-1f0aab26b834" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="value" display-name="" uuid="d0417357-4e60-4f6e-ba8a-48873d9ca770" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
		<do access-modifier="private" name="BeginReadRT" display-name="BeginReadRT" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<param access-modifier="private" name="index" display-name="" uuid="a5dbd3e3-66d2-494a-8e7f-aeb052386c32" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			<body kind="om">
				<![CDATA[// останавливаем и удаляем данные
Line[index].DataSource_1.CancelReadAsync();
Line[index].DataSource_1.Clear();

Line[index].DataSource_1.EnableRT(true);
Line[index].DataSource_1.ApItemValueQuery.Mode = unit.Const.vqmOPERATIVE;
Line[index].DataSource_1.ApItemValueQuery.OperativeInterval = OperativeStoredInterval.currentValue;  
Line[index].DataSource_1.ApItemValueQuery.Reload();	
Line[index].DataSource_1.BeginReadAsync();]]>
			</body>
		</do>
		<object access-modifier="private" name="UploadFilesMask" display-name="UploadFilesMask" uuid="857262d0-a1ce-4821-b2eb-13559d4a321a" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5"/>
		<object access-modifier="private" name="HistoryRequestMask" display-name="HistoryRequestMask" uuid="51659c87-16c3-4d05-896c-03081215a4f1" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="FinalUploadFiles" display-name="FinalUploadFiles" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("FinalUploadFiles");

// Если директория распаковки определена функцией LoadFromFile()
if (private.LoadingFolder != "")
{
	// удаляем директорию распаковки 
	Files.RemoveRecursive(private.LoadingFolder);		
	private.LoadingFolder = "";
}
if (IndexItemLoad > 0)
{
	// при загрузке одного файла без параметров определяем диапазон времени и значений
	Params.ExParams.Xmin = Variant.ToUint8(Line[IndexItemLoad].GetMinX(), 0);
	Params.ExParams.Xmax = Variant.ToUint8(Line[IndexItemLoad].GetMaxX(), 0);
	Params.ExParams.tHistRangeStart = Params.ExParams.Xmin;
	Params.ExParams.tHistRangeEnd = Params.ExParams.Xmax;
	Params.ExParams.Axis[IndexItemLoad].fixYmin = Variant.ToDouble(Line[IndexItemLoad].GetMinX(), 0);
	Params.ExParams.Axis[IndexItemLoad].fixYmax = Variant.ToDouble(Line[IndexItemLoad].GetMaxY(), 100);
	span:double = Params.ExParams.Axis[IndexItemLoad].fixYmax - Params.ExParams.Axis[IndexItemLoad].fixYmin;
	Params.ExParams.Axis[IndexItemLoad].fixYmin -= span * 0.1;
	Params.ExParams.Axis[IndexItemLoad].fixYmax += span * 0.1;
}
ActiveMode = unit.Const.amHISTORY;	 // Переключаемся в исторический режим
Axis.LinkUpdate(Params.ExParams.bGlobalRanges);
UpdateYRanges(Params.ExParams.bAutoRange);

// интервал времени и данных приводим к историческому интервалу
SetTimeInterval(Params.ExParams.tHistRangeStart, Params.ExParams.tHistRangeEnd);
private.UpdateDataInterval(Params.ExParams.tHistRangeStart, Params.ExParams.tHistRangeEnd);

Legend.Update();

// уведомляем о загрузке файла
if (private.ErrorMessages != "")
{
	private.EventParams[0] = private.ErrorMessages;
	pOnError.Invoke();
}
else
{
	private.EventParams[0] = private.LoadingFilePath;
	private.LoadingFilePath = "";
	pOnDataLoad.Invoke();
}]]>
			</body>
		</do>
		<object access-modifier="private" name="SaveFilesMask" display-name="SaveFilesMask" uuid="655763f5-f4bc-47b5-92e3-c69e15e226a7" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5"/>
		<init target="UploadFilesMask" ver="5" value="0"/>
		<init target="HistoryRequestMask" ver="5" value="0"/>
		<init target="SaveFilesMask" ver="5" value="0"/>
		<object access-modifier="private" name="HistoryNeedMask" display-name="HistoryNeedMask" uuid="52370462-a1c3-4515-9514-9e8ae77c3f9d" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5" description="" cardinal="1"/>
		<init target="HistoryNeedMask" ver="5" value="0"/>
		<object access-modifier="private" name="IndexItemLoad" display-name="IndexItemLoad" uuid="07fc415d-dd10-4f78-a561-0af10f6ea79b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<init target="IndexItemLoad" ver="5" value="0"/>
		<do access-modifier="private" name="SetDefaultStyle" display-name="SetDefaultStyle" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("SetDefaultStyles["+String.ToString(index)+"]");
i: int4 = 0;
while (i < private.pSettings.LineDecorators.Style.Length)
{
	if (private.pSettings.LineDecorators.Style[i].Title != "")
	{
		Params.Lines[index].Decor.Style[i].Title = private.pSettings.LineDecorators.Style[i].Title;
		Params.Lines[index].Decor.Style[i].ConditionColumn = private.pSettings.LineDecorators.Style[i].ConditionColumn;
		Params.Lines[index].Decor.Style[i].ConditionMin = private.pSettings.LineDecorators.Style[i].ConditionMin;
		Params.Lines[index].Decor.Style[i].ConditionMax = private.pSettings.LineDecorators.Style[i].ConditionMax;
		Params.Lines[index].Decor.Style[i].LineColor = private.pSettings.LineDecorators.Style[i].LineColor;
		Params.Lines[index].Decor.Style[i].LineWidth = private.pSettings.LineDecorators.Style[i].LineWidth;
		Params.Lines[index].Decor.Style[i].LineStyle = private.pSettings.LineDecorators.Style[i].LineStyle;
		Params.Lines[index].Decor.Style[i].Active = private.pSettings.LineDecorators.Style[i].Active;
	}
	i += 1;
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="6f194c4d-5f2a-4bc2-a813-adf3c3097d2a" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do access-modifier="private" name="DecorApply" display-name="DecorApply" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("DecorApply["+String.ToString(index)+"]");
i:int4 = 0;
j:int4 = 0;
while (i < Params.Lines.Decor.Style.Length)
{
	if (Params.Lines[index].Decor.Style[i].Title != "" )
	{
		Line[index].Decor[j].Title = Params.Lines[index].Decor.Style[i].Title;
		// Условие декорирования 
		Line[index].Decor[j].MinValue = Params.Lines[index].Decor.Style[i].ConditionMin;
		Line[index].Decor[j].MaxValue = Params.Lines[index].Decor.Style[i].ConditionMax;
		Line[index].Decor[j].ColumnNumber = Params.Lines[index].Decor.Style[i].ConditionColumn;
		Line[index].Decor[j].Active = Params.Lines[index].Decor.Style[i].Active;
		// цвет
		if (Params.Lines[index].Decor.Style[i].LineColor != unit.Const.slUNDEFINED)
			Line[index].Decor[j].Color = Params.Lines[index].Decor.Style[i].LineColor;
		else
			Line[index].Decor[j].Color = Params.Lines[index].ColorMain;
		// стиль
		lineStyle:uint4 = Params.Lines[index].StyleGood;
		if (Params.Lines[index].Decor.Style[i].LineStyle != unit.Const.slUNDEFINED)
			lineStyle = Params.Lines[index].Decor.Style[i].LineStyle;
		Line[index].Decor[j].LineBrushStyle = (lineStyle !=unit.Const.slWITHOUT_LINE) ? lineStyle : unit.Const.slSOLID_LINE;
		// толщина
		lineWidth:float = Params.Lines[index].WidthGood;	
		if (Params.Lines[index].Decor.Style[i].LineWidth != unit.Const.slUNDEFINED)
			lineWidth = Params.Lines[index].Decor.Style[i].LineWidth;
		// Увеличение при выделении
		if (index == SelectedItem)
			lineWidth += DeltaLineWidth;
		Line[index].Decor[j].LineWidth = (lineStyle !=unit.Const.slWITHOUT_LINE) ? lineWidth : 0;
		Line[index].Decor[j].PointSize = Line[index].PointSize;
		j += 1;
	}
	i += 1;
}
while (j < Line.Decor.Length)
{
	Line[index].Decor[j].Active = false;
	j += 1;
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="6e9a2795-36ac-42f6-998a-baf5fceb2023" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
	</object>
	<object access-modifier="private" name="Axis" display-name="Axis" uuid="fb02bf3d-c98e-4edd-9d55-22ca371ccfc1" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5" description="" cardinal="1">
		<do access-modifier="private" name="SetColor" display-name="SetColor" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[	n:int4  = 0;
	while (n < Chart.Length)
	{
		if (index>0 && index<Chart.Axis_Y.Length)
		{
			Chart[n].Axis_Y[index].Color = color;
		}
		n += 1;
	}

]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="93b3cfe3-4a1d-4335-a7c3-747b213d2ebd" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="color" display-name="" uuid="bba7a8a4-6ee3-4f77-a4e7-b2c93de1ac60" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
		<do access-modifier="private" name="LinkUpdate" display-name="LinkUpdate" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<param access-modifier="private" name="globalRanges" display-name="" uuid="3ea2c268-5f68-4e25-a89d-53af3f074759" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
			<body kind="javascript">
				<![CDATA[//Debug.Log("-AxisLinkUpdate.GlobalRanges = "+globalRanges);
Params.bGlobalRanges = globalRanges;
GlobalRanges = globalRanges;

if (globalRanges)
{						
	// Все линии привязаны к общей оси
	var isUsed = [];
	var i = 1;
	while (i < Line.Length)
	{	
		if (Params.Lines[i].Used)
		{
			let axisXId = Chart[Params.Lines[i].nChart].Axis_X.GetID();
			let axisYId = Chart[Params.Lines[i].nChart].Axis_Y[0].GetID();
			if (!(ActiveMode==unit.Const.amOPERATIVE && Params.Lines[i].TypeGraph==unit.Const.tgFILE_GRAPH))
				isUsed[Params.Lines[i].nChart] = true;
			Line[i].SetAxesByIds(axisXId, axisYId);
		}
		i += 1;
	}
	
	n = 0;
	while (n < Chart.Length)	// для всех полей чартов
	{
		if (Params.Charts[n].bVisible)
		{
			// общую ось включаем если есть графики
			Chart[n].Axis_Y[0].Visible = isUsed[n];
			// остальные выключаем
			var i = 1;
			while (i < Chart.Axis_Y.Length)
			{
				Chart[n].Axis_Y[i].Visible = false;
				i += 1;
			}
		}
		Chart[n].Update();
		n += 1;
	}
}
else
{
	var n = 0;
	while (n < Chart.Length)
	{
		if (Params.Charts[n].bVisible)
		{
			let axisXId = Chart[n].Axis_X.GetID();
			// Для каждой линии своя ось, общую ось выключаем
			Chart[n].Axis_Y[0].Visible = false;
			// Подготавливаем масcив флагов для определения привязанных осей
			var AxisVisible = [];	
			var i = 1;
			while (i < Chart.Axis_Y.Length)
			{
				AxisVisible[i] = false;
				i += 1;
			}
			// Привязываем линии к индивидуальным осям и запоняем массив 
			i = 1;
			while (i < Line.Length)
			{
				if (Params.Lines[i].Used && Params.Lines[i].nChart==n) 
				{
					if ((ActiveMode!=unit.Const.amOPERATIVE || Params.Lines[i].TypeGraph!=unit.Const.tgFILE_GRAPH))
					{
						// видимость оси как сумма видимости всех привязанных линий
						AxisVisible[Params.Lines[i].numAxis] |= Params.Lines[i].bVisible;
						// привязываем линию
						let axisYId = Chart[Params.Lines[i].nChart].Axis_Y[Params.Lines[i].numAxis].GetID();
						Line[i].SetAxesByIds(axisXId, axisYId);						
					}
				}
				i += 1;
			}	
			i = 1;
			while (i < Chart.Axis_Y.Length)
			{
				Chart[n].Axis_Y[i].Visible = AxisVisible[i];
				i += 1;
			}
			Chart[n].Update();
		}
		n += 1;
	}
	WidthUpdate();
}

]]>
			</body>
		</do>
		<do access-modifier="private" name="WidthUpdate" display-name="WidthUpdate" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("AxisWidthUpdate");
if (Params.bGlobalRanges)
{
	// Поиск максимальной ширины оси
	maxWidthLeft:uint4 = 0;
	n:int4 = 0;
	while (n < Chart.Length)
	{
		if (Params.Charts[n].bVisible)		
		{
			Chart[n].Axis_Y[0].CalcWidth = TypeConvert.ToUint4(Chart[n].Axis_Y[0].GetAxisWidthCalc());
			width:uint4 = Chart[n].Axis_Y[0].CalcWidth;
			if (width > maxWidthLeft)
				maxWidthLeft = width;
		}
		n += 1;
	}
	// Применение максимальной ширины ко всем чартам
	n = 0;
	while (n < Chart.Length)
	{
		Chart[n].Axis_Y[0].AxisWidth = TypeConvert.ToUint4(maxWidthLeft);
		Chart[n].Padding = "20,50,50,50";
		Chart[n].WidthLeftSide = 50;
		Chart[n].WidthRightSide = 50;
		n += 1;
	}
}
else
{
	// Поиск макисмальной суммы ширины осей слева и справа
	Chart.WidthLeftSide = 0;	//maxWidthLeft:uint4 = 0;
	Chart.WidthRightSide = 0; //maxWidthRight:uint4 = 0;
	n:int4 = 0;
	i:int4;
	sCalc:string;
	while (n < Chart.Length)
	{
		if (Params.Charts[n].bVisible)
		{
//			Chart[n].Update();
			sumLeft:uint4 = 0;
			sumRight:uint4 = 0;
			i = 1;
			while (i < Chart.Axis_Y.Length)
			{
				if (Chart[n].Axis_Y[i].Visible)
				{
					Chart[n].Axis_Y[i].CalcWidth = TypeConvert.ToUint4(Chart[n].Axis_Y[i].GetAxisWidthCalc());
					sCalc += String.ToString(Chart[n].Axis_Y[i].CalcWidth)+", ";
					if (Chart[n].Axis_Y[i].Align == 1)
					{
						sumLeft += Chart[n].Axis_Y[i].CalcWidth;
					}
					else
					{
						sumRight += Chart[n].Axis_Y[i].CalcWidth;
					}
				}
				i += 1;
			}
			if (sumLeft > Chart.WidthLeftSide)	Chart.WidthLeftSide = sumLeft;
			if (sumRight > Chart.WidthRightSide)	Chart.WidthRightSide = sumRight;
		}
		n += 1;
	}
//Debug.Log("-AxisWidthUpdate.widthCalc: "+sCalc);
	//  Распределение макисмальной ширины между индивидуальными осями
	n = 0;
	while (n < Chart.Length)
	{
		if (Params.Charts[n].bVisible)
		{
			sumLeft:uint4 = Chart.WidthLeftSide;
			sumRight:uint4 = Chart.WidthRightSide;
			iAxisLeft:int4 = 0;
			iAxisRight:int4 = 0;
			i = 1;
			// Для начала распределяем максимальную ширину по расчетным значениям
			while (i < Chart.Axis_Y.Length)
			{
				if (Chart[n].Axis_Y[i].Visible)
				{
					Chart[n].Axis_Y[i].AxisWidth = TypeConvert.ToUint4(Chart[n].Axis_Y[i].CalcWidth);
					if (Chart[n].Axis_Y[i].Align == 1)
					{
						sumLeft -= Chart[n].Axis_Y[i].CalcWidth;
						iAxisLeft = i;
					}
					else
					{
						sumRight -= Chart[n].Axis_Y[i].CalcWidth;
						iAxisRight = i;
					}
				}
				i += 1;
			}
			// Отступы справа и слева по умолчанию
			sPaddingRight:string = "50";
			sPaddingLeft:string = "50";
			// Если оси есть, то добавляем остаток максимума к последней оси на строне чарта
			// Если осей нету, то мксимальную ширину присваивам соответсвующему параметру отступа
			if (iAxisLeft > 0)	
				Chart[n].Axis_Y[iAxisLeft].AxisWidth = TypeConvert.ToUint4(Chart[n].Axis_Y[iAxisLeft].CalcWidth + sumLeft);
			else 	
				if (sumLeft > 0)
					sPaddingLeft = String.ToString(sumLeft);
			if (iAxisRight > 0)	
				Chart[n].Axis_Y[iAxisRight].AxisWidth = TypeConvert.ToUint4(Chart[n].Axis_Y[iAxisRight].CalcWidth + sumRight);
			else 
				if (sumRight > 0)
					sPaddingRight = String.ToString(sumRight);
			Chart[n].Padding = "20," + sPaddingRight + ",50," + sPaddingLeft;
		}
		n += 1;
	}
}]]>
			</body>
		</do>
		<do access-modifier="private" name="CopysParams" display-name="CopysParams" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// Настройки шкалы копируем на новую шкалу
if (!SynchronizeColor)
{
	Chart[nChart].Axis_Y[dest].Color = Chart[nChart].Axis_Y[src].Color;
	Params.Axis[dest].ColorY = Params.Axis[src].ColorY;
}
if (!Params.bAutoRange)
{
	Chart[nChart].Axis_Y[dest].Min = Chart[nChart].Axis_Y[src].Min;
	Chart[nChart].Axis_Y[dest].Max = Chart[nChart].Axis_Y[src].Max;
}]]>
			</body>
			<param access-modifier="private" name="src" display-name="" uuid="f2c67b26-9984-4e05-a489-c5cab3720465" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="dest" display-name="" uuid="3350b75c-8d91-4a00-bb75-80804bd14cd4" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="nChart" display-name="" uuid="98a31dd7-629f-4b5d-9bf8-154f65feea11" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
	</object>
	<object access-modifier="private" name="Repers" display-name="Repers" uuid="cf4fb14c-1560-447b-aee7-ced747f077b4" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="iActive" display-name="iActive" uuid="9c72ab03-47dc-4595-a40d-97df6bcb6769" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="iLastAdd" display-name="iLastAdd" uuid="e998a828-46d5-4c63-9638-cc37b07032e6" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="Add" display-name="Add" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[private.Initializer();
//Debug.Log("Add reper at time " + DateTime.ToString(time));

// Перебираем реперы в поисках свободного (невидимого)
iReper: int4 = 1;
while (iReper < Chart.ControlLine.Length && Chart.ControlLine[iReper].Visible)
	iReper += 1;

// Проверяем последний репер
if (iReper == (Chart.ControlLine.Length-1))			
{				
	if (Chart.ControlLine[iReper].Visible)	// если последний репер тоже уже установлен
	{
		iReper = Repers.iLastAdd + 1;
		if (iReper >= Chart.ControlLine.Length) 
			iReper = 1; // снова переходим к первому реперу и выбираем его для установки на новое место									
	}
}

Repers.iLastAdd = iReper;
Repers.iActive = iReper;

n:int4 = 0;
while (n < Chart.Length)
{
	Chart[n].ControlLine[iReper].Visible = true;
	Chart[n].ControlLine[iReper].Value = time;
	Chart[n].ControlLine[iReper].setActive(true);
	n += 1;
}

Legend.UpdateVQT();]]>
			</body>
			<param access-modifier="private" name="time" display-name="" uuid="27581523-ca52-41c5-b2d2-1d35b5133972" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		</do>
		<do access-modifier="private" name="RemoveAll" display-name="RemoveAll" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (CursorMode == unit.Const.cmADD_REPER)
	CursorMode = unit.Const.cmHAND_MOVE;

n: int4 = 0;
while (n < Chart.Length)
{	
	i:int4 = 1;
	while (i < Chart.ControlLine.Length ) 
	{
		Chart[n].ControlLine[i].Visible = false; // скрываем все реперы
		i += 1;
	}
	n += 1;
}
//	Debug.Log("RemoveRepers!");
Repers.iLastAdd = 0; // обнуляем индекс добавленного репера
Repers.iActive = 0; // обнуляем индекс активного репера

Legend.UpdateVQT();]]>
			</body>
		</do>
		<init target="iActive" ver="5" value="0"/>
		<init target="iLastAdd" ver="5" value="0"/>
		<do access-modifier="private" name="Remove" display-name="Remove" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// Удаляем реперную линию
if (index >= 0 && index < Chart.ControlLine.Length)	
{
	n: int4 = 0;
	while (n < Chart.Length)		// Для всех полей чарта
	{
		Chart[n].ControlLine[index].Visible = false; // Делаем указанную линию невидимой		
		n += 1;
	}
	
	// Если удаляется активная линия делаем активной другую линию
	if (index == iActive)
	{
		// находим индекс самой старшей видимой линии
		i: int4 = TypeConvert.ToInt4(Chart.ControlLine.Length - 1);
		while (i > 0 && Chart.ControlLine[i].Visible == false)
			i -= 1;

		if (i > 0)	// если видимые линии есть
		{
			iActive = i; // запоминаем индекс активного репера
		}
  		else			// если видимых линий нет
		{ 		 
	 		iLastAdd = 0; // обнуляем индекс добавленного репера
			iActive = 0; // обнуляем индекс активного репера
		}

		n = 0;
		while (n < Chart.Length)		// Для всех полей чарта
		{
			if (iActive > 0)
				Chart[n].ControlLine[i].setActive(true);  // Устанавливаем новую активную линию
			n += 1;
		}
	}
	
	Legend.UpdateVQT();
}]]>
			</body>
			<param access-modifier="private" name="index" display-name="" uuid="e0d58c6d-5a10-4bc3-ba76-2ab49c3d6908" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
	</object>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="3b7e796e-9751-4beb-a381-813ea1041bef" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<object access-modifier="private" name="Chart" display-name="Chart" uuid="da7c7838-ba58-47c0-9cfc-7a61ef2059c9" base-type="Chart" base-type-id="447c3e77-56f5-497c-950c-067da367ad6a" ver="5" cardinal="10">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Visible" value="false" ver="5"/>
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="Tooltip" value="" ver="5"/>
		<designed target="Width" value="800" ver="5"/>
		<designed target="Height" value="550" ver="5"/>
		<designed target="CursorPointSize" value="4" ver="5"/>
		<designed target="CursorLineWidth" value="1" ver="5"/>
		<designed target="BrushColor" value="4294967295" ver="5"/>
		<designed target="CursorColor" value="4288716964" ver="5"/>
		<designed target="CursorLineBrushStyle" value="2" ver="5"/>
		<designed target="ShowTimeLine" value="false" ver="5"/>
		<designed target="ShowLegend" value="false" ver="5"/>
		<designed target="Font" value=",8.25,-1,5,50,0,0,0,0,0" ver="5"/>
		<designed target="ZoomX" value="5" ver="5"/>
		<designed target="ZoomY" value="5" ver="5"/>
		<designed target="AutoUpdate" value="true" ver="5"/>
		<object access-modifier="private" name="Axis_X" display-name="Axis_X" uuid="2f9b9fc8-e185-48a3-92e3-26ae73a642df" base-type="Axis" base-type-id="790efceb-e3a3-4c3f-b766-9557ba52a4d3" ver="5">
			<designed target="Color" value="0xff323232" ver="5"/>
			<designed target="Type" value="1" ver="5"/>
			<designed target="Align" value="1" ver="5"/>
			<designed target="DataType" value="1" ver="5"/>
			<designed target="Ticks" value="7" ver="5"/>
			<designed target="Scale" value="0" ver="5"/>
			<designed target="ScaleLog" value="false" ver="5"/>
			<designed target="Unit" value="" ver="5"/>
			<designed target="UnitPos" value="1" ver="5"/>
			<designed target="Format" value="%.4g" ver="5"/>
			<designed target="FormatT" value="dd.MM.yyyy hh:mm:ss" ver="5"/>
			<designed target="Min" value="132702881234590000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
			<designed target="Max" value="116444736010300000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
			<designed target="AxisName" value="Время" ver="5"/>
			<designed target="AxisNamePos" value="2" ver="5"/>
			<designed target="Visible" value="true" ver="5"/>
			<designed target="Font" value="Tahoma,10,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="OnRangeChange">
				<body kind="om">
					<![CDATA[if (!here.private.bInit)
	return;

lb: uint8 = Variant.ToUint8(Axis_X.Min, 0); // Левая граница отображаемого интервала
rb: uint8 = Variant.ToUint8(Axis_X.Max, 0); // Правая граница отображаемого интервала

// выходим, если текущий интервал оси равен отображаемому интервалу времени
if (lb == ViewInterval.Begin && rb == ViewInterval.End) return;
//Debug.Log("Chart[" + String.ToString(Index) + "].Axis_X range changed: [" + DateTime.ToString(lb) + " .. " + DateTime.ToString(rb) + "]");

// обрабатываем масштабирование и перемещение оси, сделанное без использования минитрендов
if (!MiniTrend.bMousePressed)
{
	// синхронизируем изменившийся диапазон со всеми чартами
	SetTimeInterval(lb, rb);
}

if (ActiveMode == unit.Const.amOPERATIVE)
{
	// Текущее время
	now: uint8 = DateTime.UtcNow();

	if (!MiniTrend.bMousePressed)
	{
		// корректируем значение хранимого интервала в зависимости от левой границы отображаемого
		dataBegin: uint8 = now - OperativeStoredInterval.originalValue * unit.Const.dtONE_SECOND;
		if (dataBegin > lb)
		{
			// заданного хранимого интервала недостаточно, поэтому его нужно расширить
			newStoredInterval: uint4 = TypeConvert.ToUint4((now - lb) / unit.Const.dtONE_SECOND);
			OperativeStoredInterval.Update(newStoredInterval);			
		}
		else
		{
			// иначе возвращаем к заданному хранимому интервалу
			OperativeStoredInterval.Restore();
		}
	}

	// Ставим на паузу или снимаем с паузы в зависимости от положения текущего времени.
	// Делаем это с учетом сдвига отображения красной линии и защитного секундного интервала.
	if (rb < now - unit.Const.dtONE_SECOND)
	{
		//Debug.Log("Ставим на паузу, так как текущее время за пределами отображаемого интервала");
		SetPause(true);
	}
	else
	{
		// определяем правую границу для оперативного режима
		t2: uint8 = now;
		if (ShowRedLine)
			t2 += ViewInterval.currentValue * RedLineShift / 100;
		
		if (rb > t2 + unit.Const.dtONE_SECOND)
		{
			//Debug.Log("Снимаем с паузы, так как текущее время в пределах отображаемого интервала");
			SetPause(false);
		}
	}
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="OnClickValue">
				<body kind="om">
					<![CDATA[//Debug.Log("AxisX.OnClickValue = " + Variant.ToString(clickValue, "-"));
// Если клик направлен на Выделение репера
// отклонение точки клика от репера инициализируем максимальным числом = видимый диапазон 
interval:uint8 = Variant.ToUint8(Max - Min, 0);
// Длина оси = ширина чарта - размер полей
axislength:double = Chart[parent.Index].Width - Chart[parent.Index].WidthLeftSide - Chart[parent.Index].WidthRightSide;		
//Debug.Log("AxisX.Width = "+String.ToString(Chart[parent.Index].Width)+", Left="+String.ToString(Chart[parent.Index].WidthLeftSide)+", Right="+String.ToString(Chart[parent.Index].WidthRightSide));
dt:uint8 = Variant.ToUint8(interval/axislength*3, 0);	// максимальное отклонение точки клика от репера определяем как +-3рх #21407
clickMin:uint8 = Variant.ToUint8(clickValue-dt ,0);	// минимальная граница диапазона в который должен был попасть репер
clickMax:uint8 = Variant.ToUint8(clickValue+dt, 0);	// максимальная граница диапазона в который должен попасть репер
i:int4 = 1;		
selectedReper:bool = false;
dx:uint8 = interval;
while (i < ControlLine.Length)																			// перебираем реперы
{																													
	if (ControlLine[i].Visible)		// Если текущий репер видимый
	{					
		val:uint8 = Variant.ToUint8(ControlLine[i].Value, 0);	// точка репера
		if ((val<clickMax) && (val>clickMin))			// если точка репера попадает в границы диапазона +/-3px от точки клика
		{
			// вычисляем отклонение репера от точки клика
			vdx:uint8 = TypeConvert.ToUint8(Math.Abs(Variant.ToInt8(clickValue-val, 0)));	
			
			// если отклонение репера меньше отклонения текущего репера
			if (dx > vdx)
			{
				// делаем текущий репер активным
				Repers.iActive = i;																				
				n:int4 = 0;
				while (n < Chart.Length)
				{
					Chart[n].ControlLine[i].setActive(true);						
					n += 1;
				}
				
				dx = vdx; // запоминаем отклонение выбранного репера
				selectedReper = true;
			}
		}
	}
	i += 1;
}

if (selectedReper)
{
	Legend.UpdateVQT();
}
else	// если кликом не попали в репер
{
	//	Добавление репера
	if (here.CursorMode == unit.Const.cmADD_REPER)
	{
		Repers.Add(Variant.ToUint8(clickValue, 0));

		if (!ControlLineMultipleAdd)
			here.CursorMode = unit.Const.cmHAND_MOVE;
	}
	else
	{
		i = 0;
		while (i < Axis_Y.Length)		// для всех осей Y
		{				
			Chart[parent.Index].Axis_Y[i].Scale = unit.Const.scFIXED;	// отключаем автоматическое масштабирование
			i += 1;
		}	// возврат к автоматическому масштабированию произойдет при использовании кнопки HOME.
	}
}]]>
				</body>
			</do-on>
			<designed target="Zoom" value="10" ver="5"/>
			<do-trace access-modifier="private" target="FormatT" ver="5">
				<body>
					<![CDATA[ShowMilliseconds ? "dd.MM.yyyy hh:mm:ss.zzz" : "dd.MM.yyyy hh:mm:ss"]]>
				</body>
			</do-trace>
			<designed target="ShowUnit" value="false" ver="5"/>
			<designed target="AutoWidth" value="true" ver="5"/>
			<designed target="AxisWidth" value="35" ver="5"/>
			<do-trace access-modifier="private" target="Ticks" ver="5">
				<body>
					<![CDATA[TicksCountAxisX]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="Color" ver="5">
				<body>
					<![CDATA[private.pTheme.EditorFontColor]]>
				</body>
			</do-trace>
			<designed target="ShowBoundaryValues" value="false" ver="5"/>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[here.private.pTheme.AxisFont]]>
				</body>
			</do-trace>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="OnWheelMouse">
				<body kind="om">
					<![CDATA[private.chartMouseWheel = true;
private.tMouseWheelStart = DateTime.UtcNow();]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="Axis_Y" display-name="Axis_Y" uuid="4ade891f-526b-4262-9fe0-979fa4574726" base-type="Axis" base-type-id="790efceb-e3a3-4c3f-b766-9557ba52a4d3" ver="5" cardinal="31">
			<designed target="Color" value="0xff323232" ver="5"/>
			<designed target="Type" value="2" ver="5"/>
			<designed target="Align" value="1" ver="5"/>
			<designed target="DataType" value="0" ver="5"/>
			<designed target="Ticks" value="10" ver="5"/>
			<designed target="Scale" value="0" ver="5"/>
			<designed target="ScaleLog" value="false" ver="5"/>
			<designed target="Unit" value="" ver="5"/>
			<designed target="UnitPos" value="1" ver="5"/>
			<designed target="Format" value="%.5g" ver="5"/>
			<designed target="FormatT" value="dd.MM.yyyy hh:mm:ss" ver="5"/>
			<designed target="Min" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
			<designed target="Max" value="100" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
			<designed target="AxisName" value="" ver="5"/>
			<designed target="AxisNamePos" value="2" ver="5"/>
			<designed target="Visible" value="false" ver="5"/>
			<designed target="Font" value="Tahoma,10,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="Zoom" value="10" ver="5"/>
			<designed target="ShowUnit" value="true" ver="5"/>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="OnWheelMouse">
				<body kind="om">
					<![CDATA[//Debug.Log("Axis_Y OnMouseWheel: " + String.ToString(steps));

// отключаем автоматическое масштабирование
Axis_Y[0].Scale = unit.Const.scFIXED;  
Params.Charts[parent.Index].bUserScale = true;
Scale = unit.Const.scFIXED;
Params.Axis[Index].bUserScale = true;]]>
				</body>
			</do-on>
			<designed target="AutoWidth" value="false" ver="5"/>
			<designed target="AxisWidth" value="35" ver="5"/>
			<do-trace access-modifier="private" target="Ticks" ver="5">
				<body>
					<![CDATA[TicksCountAxisY]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="Color" ver="5">
				<body>
					<![CDATA[private.pTheme.EditorFontColor]]>
				</body>
			</do-trace>
			<designed target="ShowBoundaryValues" value="false" ver="5"/>
			<do-trace access-modifier="private" target="ShowUnit" ver="5">
				<body>
					<![CDATA[ShowEU]]>
				</body>
			</do-trace>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="OnRangeChange">
				<body kind="om">
					<![CDATA[//Debug.Log("OnRangeChange["+String.ToString(Index)+"]: " + String.ToString(Variant.ToDouble(this.Min, -1.1)) + " , " + String.ToString(Variant.ToDouble(this.Max, 1.1)));

// Синхронизация ширины осей для чартов
if (this.CalcWidth != this.GetAxisWidthCalc())
	Axis.WidthUpdate();]]>
				</body>
			</do-on>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[here.private.pTheme.AxisFont]]>
				</body>
			</do-trace>
			<object access-modifier="private" name="CalcWidth" display-name="CalcWidth" uuid="f49f0763-32d8-4ee9-8478-f4924ef1b191" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5" description="" cardinal="1"/>
			<do-trace access-modifier="private" target="Format" ver="5">
				<body>
					<![CDATA[here.private.pTheme.AxisFormat]]>
				</body>
			</do-trace>
		</object>
		<designed target="AlignLegend" value="0" ver="5"/>
		<designed target="Extrapolation" value="true" ver="5"/>
		<designed target="CursorMode" value="3" ver="5"/>
		<designed target="ActiveControllineColor" value="4294901760" ver="5"/>
		<designed target="ActiveControllineWidth" value="3" ver="5"/>
		<do-trace access-modifier="private" target="CursorMode" ver="5">
			<body>
				<![CDATA[here.CursorMode]]>
			</body>
		</do-trace>
		<designed target="MovePointLabels" value="true" ver="5"/>
		<designed target="EnableScaleAxisX" value="true" ver="5"/>
		<object access-modifier="private" name="ControlLine" display-name="ControlLine" uuid="96627a59-1561-42b8-b11a-b6a655adbe40" base-type="ControlLine" base-type-id="2e433efa-cce5-4c91-a032-e0721a75e119" ver="5" cardinal="21">
			<designed target="Color" value="0xff000000" ver="5"/>
			<designed target="LineWidth" value="1" ver="5"/>
			<designed target="Value" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
			<designed target="BrushStyle" value="2" ver="5"/>
			<designed target="BrushOpacity" value="1" ver="5"/>
			<designed target="ShowValues" value="false" ver="5"/>
			<designed target="BgValuesColor" value="4292006610" ver="5"/>
			<designed target="BgValuesOpacity" value="1" ver="5"/>
			<designed target="Visible" value="false" ver="5"/>
			<designed target="Format" value="%.4g" ver="5"/>
			<designed target="Font" value="Tahoma,10,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="Mode" value="0" ver="5"/>
			<object access-modifier="private" name="CrossPoint" display-name="CrossPoint" uuid="f71a6636-3d94-4440-9a43-fcb8213cedbe" base-type="CrossPoint" base-type-id="04cb0bc4-a63d-40a0-af0e-e212ca856e1a" ver="5" cardinal="31">
				<designed target="Color" value="0xff808080" ver="5"/>
				<designed target="BrushStyle" value="2" ver="5"/>
				<designed target="BrushOpacity" value="1" ver="5"/>
				<designed target="BgValuesColor" value="0xffd2d2d2" ver="5"/>
				<designed target="BgValuesOpacity" value="0.800000012" ver="5"/>
				<designed target="Visible" value="false" ver="5"/>
				<designed target="Font" value="Tahoma,10,-1,5,75,0,0,0,0,0,Полужирный" ver="5"/>
				<designed target="ToolTipText" value="" ver="5"/>
				<designed target="PointSize" value="1" ver="5"/>
				<do-trace access-modifier="private" target="PointSize" ver="5">
					<body>
						<![CDATA[here.ControlLineWidth.CrossPointSize]]>
					</body>
				</do-trace>
				<designed target="X" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
				<designed target="Y" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
				<do access-modifier="private" name="UpdateTooltip" display-name="UpdateTooltip" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[value: variant = GetValue(unit.Const.cpVALUE);
if (Variant.IsEmpty(value))
{
	ToolTipText = "";
}
else
{
	strValue: string = here.private.VariantToString(value, YAxisPrecision);
	quality: variant = GetValue(unit.Const.cpQUALITY);
	qualityStr: string = String.ToString(Variant.ToUint2(quality, 0));
	ToolTipText = strValue + " (" + qualityStr + ")";
}]]>
					</body>
				</do>
			</object>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="DataChanged">
				<body kind="om">
					<![CDATA[if (Visible)
{
	UpdatePointTooltips();
	
	if (Repers.iActive == Index)
		Legend.UpdateVQT();
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ChangeValue">
				<body kind="om">
					<![CDATA[if (Visible)
{
	UpdatePointTooltips();
	
	if (Repers.iActive == Index)
		Legend.UpdateVQT();
	
	// Синхронизируем данный репер на всех чартах
	timeValue: uint8 = Variant.ToUint8(Value, 0);
	n: int4 = 0;
	while (n < Chart.Length)
	{
		timeValueChart:uint8 = Variant.ToUint8(Chart[n].ControlLine[this.Index].Value, 0);
		if (n!=SelectedChart && timeValueChart!=timeValue)
		{
			Chart[n].ControlLine[this.Index].Value = timeValue;
		}
		n += 1;
	}
}]]>
				</body>
			</do-on>
			<designed target="ShowAxisValues" value="true" ver="5"/>
			<init target="Axis" ver="5" ref="Axis_X"/>
			<do access-modifier="private" name="UpdatePointTooltips" display-name="UpdatePointTooltips" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[for (i: int4 = 1; i < Line.Length; i += 1)
{
	if (Params.Lines[i].Used)
	{
		nChart: int4 = Params.Lines[i].nChart;
		if (nChart == Chart.Index)
			CrossPoint[i].UpdateTooltip();
	}
}]]>
				</body>
			</do>
		</object>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MousePress">
			<body kind="om">
				<![CDATA[mousePressTop = top;
private.chartMousePressed = true;
SelectedChart = TypeConvert.ToInt4(Index);]]>
			</body>
		</do-on>
		<object access-modifier="private" name="RedLine" display-name="RedLine" uuid="b3f9ede3-749c-4920-a169-2c1f9521c842" base-type="ControlLine" base-type-id="2e433efa-cce5-4c91-a032-e0721a75e119" ver="5" cardinal="1">
			<designed target="Color" value="0xffff0000" ver="5"/>
			<designed target="LineWidth" value="2" ver="5"/>
			<designed target="Value" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
			<designed target="BrushStyle" value="1" ver="5"/>
			<designed target="BrushOpacity" value="0.5" ver="5"/>
			<designed target="ShowValues" value="false" ver="5"/>
			<designed target="BgValuesColor" value="0xffd2d2d2" ver="5"/>
			<designed target="BgValuesOpacity" value="1" ver="5"/>
			<designed target="Visible" value="false" ver="5"/>
			<designed target="Format" value="%.4g" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<do-trace access-modifier="private" target="Visible" ver="5">
				<body>
					<![CDATA[ShowRedLine 
]]>
				</body>
			</do-trace>
			<designed target="Mode" value="0" ver="5"/>
			<designed target="ShowAxisValues" value="false" ver="5"/>
			<init target="Axis" ver="5" ref="Axis_X"/>
			<object access-modifier="private" name="CrossPoint" display-name="CrossPoint" uuid="1b3dc9ea-122b-412d-8e57-ea6edc1a4630" base-type="CrossPoint" base-type-id="04cb0bc4-a63d-40a0-af0e-e212ca856e1a" ver="5" cardinal="31">
				<designed target="Color" value="0xff808080" ver="5"/>
				<designed target="BrushStyle" value="2" ver="5"/>
				<designed target="BrushOpacity" value="1" ver="5"/>
				<designed target="BgValuesColor" value="0xffd2d2d2" ver="5"/>
				<designed target="BgValuesOpacity" value="0.800000012" ver="5"/>
				<designed target="Visible" value="false" ver="5"/>
				<designed target="Font" value="Tahoma,10,-1,5,75,0,0,0,0,0,Полужирный" ver="5"/>
				<designed target="ToolTipText" value="" ver="5"/>
				<designed target="PointSize" value="1" ver="5"/>
				<do-trace access-modifier="private" target="PointSize" ver="5">
					<body>
						<![CDATA[here.ControlLineWidth.CrossPointSize]]>
					</body>
				</do-trace>
				<designed target="X" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
				<designed target="Y" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
			</object>
		</object>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnWheelMouse">
			<body kind="om">
				<![CDATA[// переводим в режим пользовательского масштабирования
SetUserScale();

private.chartMouseWheel = true;
private.tMouseWheelStart = DateTime.UtcNow();]]>
			</body>
		</do-on>
		<designed target="ShowWinOptions" value="false" ver="5"/>
		<designed target="Padding" value="20,50,50,50" ver="5"/>
		<designed target="ZValue" value="0" ver="5"/>
		<designed target="ControlLineAxisLabelsLocation" value="2" ver="5"/>
		<do-trace access-modifier="private" target="BrushColor" ver="5">
			<body>
				<![CDATA[here.private.pTheme.ChartFieldColor]]>
			</body>
		</do-trace>
		<designed target="RightExtrapolationLimit" value="116444736000000000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
		<designed target="MinTimeline" value="116444736000000000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
		<designed target="MaxTimeline" value="116444736000000000" ver="5" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561"/>
		<do access-modifier="private" name="SetVisible" display-name="SetVisible" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//Debug.Log("-Chart_SetVisible["+String.ToString(Index)+"]="+String.ToString(visible));
Params.Charts[Index].bVisible = visible;
Visible = visible;]]>
			</body>
			<param access-modifier="private" name="visible" display-name="" uuid="e354b783-bde4-46ed-a927-9bdb9034189b" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
		</do>
		<do access-modifier="private" name="GetFirst" display-name="GetFirst" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[i:int4 = 0;
while (i < Chart.Length)
{
	if (Chart[i].Visible) return i;
	i += 1;
}
return -1;]]>
			</body>
		</do>
		<do access-modifier="private" name="GetFree" display-name="GetFree" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="om">
				<![CDATA[i:int4 = 0;
while (i < Chart.Length)
{
	if (!Chart[i].Visible) return i;
	i += 1;
}
return -1;]]>
			</body>
		</do>
		<object access-modifier="private" name="DragNDrop_1" display-name="DragNDrop_1" uuid="4dae03d7-f8d5-4cdb-a0fa-24d42fabce06" base-type="DragNDrop" base-type-id="c4ddb32f-3653-44c8-be57-3a595e10c2fb" ver="5">
			<designed target="DragEnabled" value="true" ver="5"/>
			<designed target="DropEnabled" value="true" ver="5"/>
			<designed target="Image" value="" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnDrop">
				<body kind="om">
					<![CDATA[
private.ItemsAddByJson(data.GetText(), TypeConvert.ToInt4(Index));
]]>
				</body>
			</do-on>
		</object>
		<do access-modifier="private" name="LinkCrossPoint" display-name="LinkCrossPoint" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// Привязка точек пересечения реперов к линиям графиков	
l:int4 = 1;
while (l < Line.Length)
{
	if (Params.Lines[l].nChart == Index)
	{
		Chart[Index].RedLine.CrossPoint[l].SetLineID(Line[l].ID);
		i:int4 = 0;
		while (i < Chart.ControlLine.Length)
		{
			Chart[Index].ControlLine[i].CrossPoint[l].SetLineID(Line[l].ID);
			i += 1;
		}
	}
	l += 1;
}]]>
			</body>
		</do>
		<object access-modifier="private" name="WidthLeftSide" display-name="WidthLeftSide" uuid="c0b30514-8cf1-4101-ac1a-f785ba23170b" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="WidthRightSide" display-name="WidthRightSide" uuid="7693c95b-74ac-4c32-9169-b58d2af8c9ec" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5" description="" cardinal="1"/>
		<init target="WidthLeftSide" ver="5" value="50"/>
		<init target="WidthRightSide" ver="5" value="50"/>
		<do-trace access-modifier="private" target="ActiveControllineWidth" ver="5">
			<body>
				<![CDATA[ControlLineSelectWidth]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="ActiveControllineColor" ver="5">
			<body>
				<![CDATA[ControlLineSelectColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="ZoomX" ver="5">
			<body>
				<![CDATA[TypeConvert.ToUint4(ZoomXEnable?5:0)]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="ZoomY" ver="5">
			<body>
				<![CDATA[TypeConvert.ToUint4(ZoomYEnable?5:0)]]>
			</body>
		</do-trace>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="MouseRelease">
			<body kind="om">
				<![CDATA[// переводим в пользовательский режим масштабирования, если сдвинули поле
if (private.chartMousePressed && Math.Abs(mousePressTop - top) > 5)
	SetUserScale();

private.chartMousePressed = false;

if (buttons == 2) // правая клавиша мыши
{
	private.EventParams[0] = String.ToString(TypeConvert.ToInt4(this.X) + here.ScreenX(left, top));
	private.EventParams[1] = String.ToString(TypeConvert.ToInt4(this.Y) + here.ScreenY(left, top));
	pOnMouseRightRelease.Invoke();
}]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="MouseLeave">
			<body kind="om">
				<![CDATA[// переводим в пользовательский режим масштабирования, если сдвинули поле
if (private.chartMousePressed && Math.Abs(mousePressTop - top) > 5)
	SetUserScale();

private.chartMousePressed = false;]]>
			</body>
		</do-on>
		<do access-modifier="private" name="UpdateAxisXInterval" display-name="UpdateAxisXInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// изменяем границы интервала оси только если это необходимо
lb: uint8 = Variant.ToUint8(Axis_X.Min, 0);
rb: uint8 = Variant.ToUint8(Axis_X.Max, 0);
if (lb != begin || rb != end)
{
	//Debug.Log("Chart[" + String.ToString(Index) + "].AxisX.SetInterval(" + DateTime.ToString(begin) + ", " + DateTime.ToString(end) + ")");
	Axis_X.SetInterval(begin, end);
}]]>
			</body>
			<param access-modifier="private" name="begin" display-name="" uuid="5cc8c617-145c-4795-b320-2a366297fa2d" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
			<param access-modifier="private" name="end" display-name="" uuid="d4d176b9-d539-4bee-ad7e-6d5609e777fe" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		</do>
		<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="MouseDoubleClick">
			<body kind="om">
				<![CDATA[private.ResetZoomX();
Params.ResetUserScaleForChart(Index);
UpdateYRanges(AutoRange);]]>
			</body>
		</do-on>
		<do access-modifier="private" name="SetUserScale" display-name="SetUserScale" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// для всех видимых осей Y чарта отключаем автоматическое масштабирование
// возврат к автоматическому масштабированию произойдет при использовании кнопки HOME.

if (Axis_Y[0].Visible)
{
	Axis_Y[0].Scale = unit.Const.scFIXED;	
	Params.Charts[Index].bUserScale = true;
}

i:int4 = 1;
while (i < Axis_Y.Length)
{
	if (Axis_Y[i].Visible)
	{
		Axis_Y[i].Scale = unit.Const.scFIXED;	
		Params.Axis[i].bUserScale = true;
	}
	i += 1;
}
//Debug.Log("Chart[" + String.ToString(Index) + "] в режиме пользовательского масштабирования");]]>
			</body>
		</do>
		<object access-modifier="private" name="mousePressTop" display-name="mousePressTop" uuid="e0498583-92a5-4847-8345-26e5a1b7eb02" base-type="float" base-type-id="730a70b7-31fd-42cf-860d-ba8faa618f9d" ver="5" description="" cardinal="1"/>
	</object>
	<object access-modifier="private" name="MiniTrend" display-name="MiniTrend" uuid="eebae86b-5e59-48c7-a574-c4f90b4df87e" base-type="MiniTrend" base-type-id="2a508563-364d-4472-b86f-4a1a2242c585" ver="5" description="" cardinal="1">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="Tooltip" value="" ver="5"/>
		<designed target="Width" value="800" ver="5"/>
		<designed target="Height" value="50" ver="5"/>
		<designed target="BrushColor" value="0xffffffff" ver="5"/>
		<designed target="MinTimeline" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
		<designed target="MaxTimeline" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
		<object access-modifier="private" name="SizeLimits" display-name="SizeLimits" uuid="281c6c9f-b0b9-4c15-87ee-5e528637a812" base-type="LayoutSizeLimits" base-type-id="10342c1f-560b-4160-9de5-7e2c08026f47" ver="5" description="" cardinal="1">
			<designed target="MinWidth" value="0" ver="5"/>
			<designed target="MinHeight" value="50" ver="5"/>
			<designed target="MaxWidth" value="16777215" ver="5"/>
			<designed target="MaxHeight" value="50" ver="5"/>
			<do-trace access-modifier="private" target="MaxHeight" ver="5">
				<body>
					<![CDATA[ShowMiniTrends ? 50 : 0]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="MinHeight" ver="5">
				<body>
					<![CDATA[ShowMiniTrends ? 50 : 0]]>
				</body>
			</do-trace>
		</object>
		<do-trace access-modifier="private" target="Visible" ver="5">
			<body>
				<![CDATA[ShowMiniTrends]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="BrushColor" ver="5">
			<body>
				<![CDATA[private.pTheme.EditorBrushColor]]>
			</body>
		</do-trace>
		<init target="Axis" ver="5" ref="Chart.Axis_X"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MousePress">
			<body kind="om">
				<![CDATA[bMousePressed = true;
//Debug.Log("MiniTrend mouse press");]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="MouseLeave">
			<body kind="om">
				<![CDATA[bMousePressed = false;
//Debug.Log("MiniTrend mouse leave");]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="MouseRelease">
			<body kind="om">
				<![CDATA[bMousePressed = false;
//Debug.Log("MiniTrend mouse release");]]>
			</body>
		</do-on>
		<object access-modifier="private" name="bMousePressed" display-name="bMousePressed" uuid="a8d42d2a-4367-456a-9966-3b6dfea1d756" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="nChart" display-name="nChart" uuid="f3b00638-600f-4109-812d-d4140ea52e2b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
		<do access-modifier="private" name="LinkToChart" display-name="LinkToChart" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<param access-modifier="private" name="newChart" display-name="" uuid="d6823a19-dc21-4895-b06a-983baf7de731" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<body kind="om">
				<![CDATA[// Привязка минитрендов к оси чарта
if (nChart != newChart)
{
	SetAxisById(Chart[newChart].Axis_X.GetID());
	nChart = newChart;
}
]]>
			</body>
		</do>
		<object access-modifier="private" name="DragNDrop_1" display-name="DragNDrop_1" uuid="feb2445f-2163-454f-b318-02d25c8a05ba" base-type="DragNDrop" base-type-id="c4ddb32f-3653-44c8-be57-3a595e10c2fb" ver="5">
			<designed target="DragEnabled" value="true" ver="5"/>
			<designed target="DropEnabled" value="true" ver="5"/>
			<designed target="Image" value="" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnDrop">
				<body kind="om">
					<![CDATA[
private.ItemsAddByJson(data.GetText(), 0);
]]>
				</body>
			</do-on>
		</object>
	</object>
	<object access-modifier="private" name="Splitter" display-name="Splitter" uuid="2438e26f-a7e6-4e9d-bdb6-ee52b8114cf1" base-type="VerticalSplitter" base-type-id="f7b3175e-374e-46fc-bdf9-e8330c5fa171" ver="5" description="" cardinal="1">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Width" value="800" ver="5"/>
		<designed target="Height" value="4" ver="5"/>
		<init target="init_Theme" ver="5" ref="here.init_Theme"/>
		<init target="Position" ver="5" value="150"/>
		<init target="Minimum" ver="5" value="20"/>
		<do-trace access-modifier="private" target="Visible" ver="5">
			<body>
				<![CDATA[ShowLegend]]>
			</body>
		</do-trace>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseRelease">
			<body kind="om">
				<![CDATA[Legend.Autosize = false;]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="Layout" display-name="Layout" uuid="ebe796f3-0ec7-4265-95b0-efd4f6875c47" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="5">
		<designed target="Orientation" value="2" ver="5"/>
		<designed target="Gap" value="0" ver="5"/>
	</object>
	<object access-modifier="private" name="Initializer" display-name="Initializer" uuid="39ce21ae-f1ca-472f-b828-f48a952deb00" base-type="Initializer" base-type-id="6db89679-9299-4993-ad1a-0d086cd1c7d2" ver="5" description="" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Initialized">
			<body kind="om">
				<![CDATA[private.Initializer();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="Files" display-name="Files" uuid="ca390ef4-3feb-4c76-8763-526e0ffd1645" base-type="FileSystem" base-type-id="34d744f9-7303-4077-a3f7-9c06c0945512" ver="5" description="" cardinal="1">
		<designed target="RootPath" value="/" ver="5"/>
		<init target="Error" ver="5">
			<object access-modifier="private" uuid="5ce0a2fc-af0b-4519-acb7-9ebffbe46c5b" base-type="FileSystemError" base-type-id="38147fa1-a364-43d4-bd0b-07ee8556c2f2" ver="5"/>
		</init>
	</object>
	<object access-modifier="private" name="Archiver_1" display-name="Archiver_1" uuid="9b9b7e34-db09-4bf3-a190-5681c1fb83b6" base-type="Archiver" base-type-id="3d5db667-b706-495b-a916-9785b07dd0ae" ver="5" description="" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="UnpackFinished">
			<body kind="om">
				<![CDATA[if (error != "")
{
	private.EventParams[0] = error;
	pOnError.Invoke();
}
else
{
	LoadFromFolder(private.LoadingFolder);
}]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="PackFinished">
			<body kind="om">
				<![CDATA[// уведомляем о том, как сохранение выполнено
if (error == "")
{
	private.ShowComplete.message = "Графики сохранены в файл\n" + private.ExportFile;
	private.ShowComplete.Invoke();
}
else
{
	private.ShowError.message = "Ошибка сохранения графиков в файл\n" + private.ExportFile + "\n" + error;
	private.ShowError.Invoke();
}

// уведомляем о завершении сохранения данных
private.EventParams[0] = private.ExportFile;
private.EventParams[1] = error;
pOnDataSave.Invoke();

Files.RemoveRecursive(private.ExportTrendsPath);
private.ExportTrendsPath = "";
private.ExportFile = "";]]>
			</body>
		</do-on>
		<designed target="CompressionLevel" value="1" ver="5"/>
	</object>
	<object access-modifier="private" name="Params" display-name="Params" uuid="9804fc81-39d3-40fe-b866-4be1f68a4ed9" base-type="Trends_Parameters" base-type-id="b3130c37-74d0-4745-864b-c3a1702c818e" ver="5">
		<object access-modifier="private" name="ExParams" display-name="ExParams" uuid="f51eff45-faec-44c1-a9e4-14f81b9b9098" base-type="Trends_Parameters" base-type-id="b3130c37-74d0-4745-864b-c3a1702c818e" ver="5"/>
		<object access-modifier="private" name="nItem" display-name="nItem" uuid="f0f02952-7732-48fa-b583-4fdf9e901212" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" cardinal="21"/>
		<init target="pExParams" ver="5" ref="this.ExParams"/>
	</object>
	<object access-modifier="private" name="Timer_of_ReadData" display-name="Timer_of_ReadData" uuid="0377029c-a76b-49fa-932c-9a0733554c3b" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="5">
		<designed target="Period" value="1000" ver="5"/>
		<designed target="Active" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
			<body kind="om">
				<![CDATA[// работаем только в оперативном режиме
if (ActiveMode == unit.Const.amHISTORY)
	return;

now: uint8 = DateTime.UtcNow();
SetRedLine(now);
if (DateTime.AddSeconds(private.tMouseWheelStart, 0.5) < now)
	private.chartMouseWheel = false;

if (!MiniTrend.bMousePressed && !private.chartMousePressed && !private.chartMouseWheel)
	private.UpdateOperativeTimeInterval(now, false);

Legend.UpdateMinMaxSize();]]>
			</body>
		</do-on>
		<init target="Period" ver="5" ref="DataUpdatePeriod"/>
	</object>
	<object access-modifier="private" name="ActiveMode" display-name="Режим чарта" uuid="90ac8767-24e3-42d6-a5ca-c2bc1db64c27" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5">
		<object access-modifier="private" name="oldValue" display-name="oldValue" uuid="43386bcd-0710-47af-9c6f-b8957451ac1a" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (oldValue != value)
{
	oldValue = value;	
	//Debug.Log("ActiveMode: " + String.ToString(value));

	if (value == unit.Const.amOPERATIVE)
	{
		// Оперативный режим
		MoveToNow();
		SetPause(false);
		private.RestartOperativeMode();		
	}
	else
	{
		// Исторический режим
		SetPause(true);		
		LoadHistoricalData();
	}
	
	Lines.SetSelect(SelectedItem);
	Lines.UpdateVisible(value);	

	Axis.LinkUpdate(Params.bGlobalRanges);
	Legend.Update();
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="AutoRange" display-name="Автоматическое определение диапазона значений для всех сигналов" uuid="c855d6e7-9d45-437c-b83b-665fb3eb7888" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (Params.bAutoRange == value)
	return;
	
//Debug.Log("AutoRange.ValueChanged = " + String.ToString(value));
UpdateYRanges(value);]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="GlobalRanges" display-name="Общий диапазон значений для всех сигналов" uuid="68f5240e-f500-41e5-a93b-ca1850634d28" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (Params.bGlobalRanges != Value)
{
//Debug.Log("AutoRange.ValueChanged = " + String.ToString(value));
	Axis.LinkUpdate(Value);
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ControlLineWidth" display-name="Ширина реперных линий" uuid="19387c85-8cc1-4193-be9d-eee9561bdaf4" base-type="notifying_float" base-type-id="bb7d05ee-cbf0-4c44-8740-1905239c8ead" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[i:int4 = 0;
n:int4 = 0;
while (n < Chart.Length)
{
	while (i < Chart.ControlLine.Length)
	{
		Chart[n].ControlLine[i].LineWidth = value;
		i += 1;
	}
	n += 1;
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="CrossPointSize" display-name="CrossPointSize" uuid="4ef1dcd1-bcf1-4ff5-b8b7-be877040e652" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5"/>
		<do-trace access-modifier="private" target="CrossPointSize" ver="5">
			<body>
				<![CDATA[TypeConvert.ToUint4(this.Value * 1.5) + 3]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="ControlLineSelectWidth" display-name="Ширина выделенной реперной линии" uuid="1724254d-535a-46c9-b033-098d04183664" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[n: int4 = 0;
while (n < Chart.Length)
{
	Chart[n].ActiveControllineWidth = value;
	n += 1;
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ControlLineColor" display-name="Цвет реперных линий" uuid="36798533-ddc9-4eee-b34b-06db2ce70b24" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[i:int4 = 0;
n:int4 = 0;
while (n < Chart.Length)
{
	while (i < Chart.ControlLine.Length)
	{
		Chart.ControlLine[i].Color = value;
		i += 1;
	}
	n += 1;
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ControlLineSelectColor" display-name="Цвет выделенной реперной линии" uuid="4535404a-57a1-4b65-be18-f6b1c81f700d" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[n:int4 = 0;
while (n < Chart.Length)
{
	Chart[n].ActiveControllineColor = value;
	n += 1;
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ControlLineMultipleAdd" display-name="Множественное добавление реперов" uuid="5a38a780-19ad-4bd3-8320-e35a10569725" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	<object access-modifier="private" name="ShowEU" display-name="Видимость единиц измерений" uuid="1671eec2-0bb0-44ac-92c6-bf3838269d68" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<object access-modifier="private" name="ShowMarkerLabels" display-name="Видимость выносок реперов" uuid="6cabe6d8-6a35-4978-8fd6-f57236e15873" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[//Debug.Log("ShowMarkerLabels.Value="+Str.ToString(Value));
i:int4 = 1;		
while (i < Chart.ControlLine.CrossPoint.Length)
{
	Params.Lines[i].bShowMarkerLabels = value;
	private.SetMarkerLabelVisible(i, value);
	i += 1;
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ShowDataPoints" display-name="Видимость точек на графиках" uuid="665bdf82-ee2c-4d3b-9d28-8dc849df6ed1" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[i: int4 = 1;
while (i < Line.Length)
{
	if (Params.Lines[i].Used)
		Line[i].PointVisible = ShowDataPoints || (Params.Lines[i].ItemCDT == unit.Const.cdt.STRING);
	i += 1;
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ShowMiniTrends" display-name="Видимость минитрендов" uuid="31ae2d75-1cfc-46b9-a9e2-72aecb99642a" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="ShowLegend" display-name="Видимость легенды" uuid="405c6e65-d3f6-4109-b84b-26d0d045bcfe" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<object access-modifier="private" name="ShowFullDescription" display-name="Показывать полное описание" uuid="b07919a4-7d9b-47ff-b790-2475cb05a058" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<object access-modifier="private" name="ShowRelativeTag" display-name="Показывать относительный тег" uuid="27c2ab8d-6989-478c-9b38-1ab78aa1e870" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<object access-modifier="private" name="MaxLineLegendShow" display-name="Максимальное количество строк в легенде" uuid="60602a66-5e8d-4acb-81c5-38ad65b5a09b" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5"/>
	<object access-modifier="private" name="DeltaLineWidth" display-name="Утолщение выделенного графика" uuid="83fd3b44-70bd-481a-a8b3-65b05f5a09a9" base-type="notifying_float" base-type-id="bb7d05ee-cbf0-4c44-8740-1905239c8ead" ver="5"/>
	<do access-modifier="private" name="GetEventParam" display-name="GetEventParam" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[if (numParam >= 0 && numParam < private.EventParams.Length)
	return private.EventParams[numParam];
else return "";]]>
		</body>
		<param access-modifier="private" name="numParam" display-name="" uuid="0f33cbb8-c77d-48e3-9b21-5ee496347070" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	</do>
	<do access-modifier="private" name="AddItem" display-name="AddItem" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
		<param access-modifier="private" name="path" display-name="" uuid="0b039dda-b7ed-4ee2-962f-db6ca1f2a96d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="om">
			<![CDATA[//Debug.Log("AddItem(" + path + ", " + eUnit + ", " + description + ")");
private.Initializer();  // инициализатор выполняется только один раз 

// Проверяем не повторяется ли сигнал
if (Params.TagIsUse(path))
	return 0;

// Номер столобца DataSource в заисимости от выбранного источника данных (3-сервер, 2-источник)
nXColumn: int4 = unit.Const.tmSOURCE;
if (UseServerTime)
	nXColumn = ModeTimeSourceServer == 0 ? unit.Const.tmSOURCE : unit.Const.tmSERVER;

// Если номер чарта не определен, ищем номер первого активного чарта
if (nChart<0 || nChart > Params.Charts.Length)
	nChart = Params.Charts.GetFirstActive();

itemIndex: int4 = private.ItemsAdd(path, eUnit, description, nXColumn, unit.Const.tgMAIN_GRAPH, nChart);
if (itemIndex > 0)
{
	Legend.Update();

	if (ShowRelativeTag)
		private.ServerAPI.ReadRelativeTag(path);
		
	if (ShowFullDescription)
		private.ServerAPI.ReadFullDescription(path);
}
//Debug.Log(String.ToString(itemIndex) + ": " + path);
return itemIndex;]]>
		</body>
		<param access-modifier="private" name="eUnit" display-name="" uuid="957d1a65-2dcf-4756-9f55-2221759e5e8e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="description" display-name="" uuid="7c56f811-9498-428c-8577-48ec4ab672d5" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="nChart" display-name="" uuid="9b47ad00-9766-43b4-a45a-af95d8ac9f79" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	</do>
	<do access-modifier="private" name="AddLevel" display-name="AddLevel" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
		<param access-modifier="private" name="tag" display-name="" uuid="163ee7de-1132-4f66-853f-c0193a68e587" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

// Проверяем не повторяется ли сигнал
if (Params.TagIsUse(tag))
	return -1;

nXColumn: int4 = ModeTimeSourceServer == 0 ? unit.Const.tmSOURCE : unit.Const.tmSERVER;
nChart:int4 = Params.Charts.GetFirstActive();

// Добавление графика уровня
index:int4 = private.ItemsAdd(tag, "", "", nXColumn, unit.Const.tgLEVEL, nChart);

// Установка стиля линии
if (lineStyle > 0 && lineStyle <= 5)
{
	Params.Lines[index].StyleGood = lineStyle;
	Lines.Update();
}
else	if (lineStyle != 0)	// При нуле сохраняются значения по умолчанию
{
	Debug.Log("Trends.AddLevel: Недопустимое значение в параметре lineStyle.");
}

return index ;]]>
		</body>
		<param access-modifier="private" name="lineStyle" display-name="" uuid="562e626e-3ed5-42df-8254-b82ae2f87925" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
	</do>
	<do access-modifier="private" name="RemoveItem" display-name="RemoveItem" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="tag" display-name="" uuid="7957033e-2998-4bbf-8897-e687172af8c9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

index: int4  = Params.GetIndexByPath(tag);
if (index > 0 && index <= unit.Const.MAX_LINES)
{
	RemoveItemByIndex(index);
}
else
{
	Debug.Log("Trends.RemoveItem: Указанный тэг не найден!");
}]]>
		</body>
	</do>
	<do access-modifier="private" name="RemoveItemByIndex" display-name="RemoveItemByIndex" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="index" display-name="" uuid="6851c646-1a4d-46ac-ad61-fef1a1703891" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

//Debug.Log("Remove " + String.ToString(index) + " item");
Params.ResetLine(index);
/*
nAxis:int4 = Params.Lines[index].numAxis;  // Определяем ось к которой привязан сигнал
bAxisHide:bool = true;												// собираемся скрыть ось к которой привязан график
i:int4 = 1;
while (i <= unit.Const.MAX_LINES)		// проверяем есть ли еще привязки к этой оси
{  
	if (Params.Lines[index].Used && i != index)
	{
		if (Params.Lines[index].numAxis == Params.Lines[i].numAxis) // Если нашелся привязанный график
			bAxisHide = false;		// ось скрывать не будем
	}
	i += 1;
}//*/

private.RemoveItem(index);
//if (bAxisHide)	
//	Chart.Axis_Y[nAxis].Visible = false;

Params.LinesCount -= 1;

Legend.Update();

//Debug.Log("Item[" + String.ToString(index) + "] removed");]]>
		</body>
	</do>
	<do access-modifier="private" name="Clear" display-name="Clear" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

Params.LinesCount = 0;

i:int4 = 1;
while (i < unit.Const.MAX_LINES)
{
	Params.ResetLine(i);
	i += 1;
}

private.RemoveItem(unit.Const.ALL);

Legend.Clear();]]>
		</body>
	</do>
	<do access-modifier="private" name="SetLabelColor" display-name="SetLabelColor" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[n:int4 = 0;
while (n < Chart.Length)
{
	i:int4 = 0;
	while (i < Chart.ControlLine.Length)
	{
		Chart[n].ControlLine[i].CrossPoint[index].Color = color;
		i += 1;
	}
	n += 1;
}
]]>
		</body>
		<param access-modifier="private" name="index" display-name="" uuid="5628bbc8-0378-4ea1-887e-1a0426eb47ca" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<param access-modifier="private" name="color" display-name="" uuid="2a69ac43-9e31-498b-9321-fcf0c5ad440a" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
	</do>
	<do access-modifier="private" name="SetPause" display-name="SetPause" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[if (private.bPlayStatus != !bPause)
{
	private.bPlayStatus = !bPause;
	//Debug.Log("SetPause: " + String.ToString(bPause));
	
	i: int4 = 1;
	while (i < Line.Length)
	{
		if (Params.Lines[i].Used && Params.Lines[i].TypeGraph != unit.Const.tgFILE_GRAPH && Params.Lines[i].bMainTime)
		{	
			Line[i].DataSource_1.EnableRT(private.bPlayStatus);
		}
		i += 1;
	}
	Timer_of_ReadData.Active = private.bPlayStatus;
}]]>
		</body>
		<param access-modifier="private" name="bPause" display-name="" uuid="3c4efc41-4ae4-47e2-b407-81d784e02292" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	</do>
	<do access-modifier="private" name="SetRedLine" display-name="SetRedLine" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//Debug.Log("SetRedLine to " + DateTime.ToString(time));
n: int4 = 0;
while (n < Chart.Length)
{
	// смещаем положение текущего времени
	if (Params.Charts[n].bVisible)
		Chart[n].RedLine.Value = time;

	n += 1;
}
Params.tRedLine = time;]]>
		</body>
		<param access-modifier="private" name="time" display-name="" uuid="8e8882b6-9e12-4204-a4c4-27c366a6f2bf" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
	</do>
	<object access-modifier="private" name="ShowMilliseconds" display-name="Показывать миллисекунды" uuid="69621bd1-4fc6-430c-b8eb-897583ded131" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<object access-modifier="private" name="SynchroColorMarker" display-name="Синхронизировать цвет графика и выноски" uuid="42f38e87-d469-4c7f-b8d9-b8ac9fc48f3b" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<init target="DeltaLineWidth" ver="5" value="1"/>
	<init target="ShowEU" ver="5" value="true"/>
	<init target="ShowMarkerLabels" ver="5" value="true"/>
	<init target="ShowDataPoints" ver="5" value="false"/>
	<init target="ShowMilliseconds" ver="5" value="false"/>
	<init target="SynchroColorMarker" ver="5" value="false"/>
	<init target="ControlLineWidth" ver="5" value="1.5"/>
	<init target="ControlLineSelectWidth" ver="5" value="2"/>
	<init target="ControlLineColor" ver="5" value="0xff000000"/>
	<init target="ControlLineSelectColor" ver="5" value="0xffff0000"/>
	<object access-modifier="private" name="TicksCountAxisX" display-name="Количество делений на оси X" uuid="002f2cf0-92f0-49e0-b169-cf944b5f4aeb" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5"/>
	<object access-modifier="private" name="TicksCountAxisY" display-name="Количество делений на оси Y" uuid="9ca8d14e-ef24-4b33-8c09-571c5b3d3d65" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5"/>
	<init target="TicksCountAxisX" ver="5" value="7"/>
	<init target="TicksCountAxisY" ver="5" value="11"/>
	<do-trace access-modifier="private" target="PenColor" ver="5">
		<body>
			<![CDATA[private.pTheme.BorderColor]]>
		</body>
	</do-trace>
	<object access-modifier="private" name="ViewInterval" display-name="Видимый интервал времени, мин" uuid="0e3bfd50-1dbc-4692-ae7d-465b8dd162ef" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[newValue: uint8 =  value * unit.Const.dtONE_MINUTE; // перевод из минут
if (originalValue == newValue)
	return;

// запоминаем значение, чтобы иметь возможность его восстановить
originalValue = newValue;

// обновляем интервал
Update(originalValue);]]>
			</body>
		</do-on>
		<object access-modifier="private" name="originalValue" display-name="originalValue" uuid="d1330ba7-fb65-491e-9082-7528b63abc06" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		<object access-modifier="private" name="currentValue" display-name="currentValue" uuid="88b8111c-9ef2-4588-9b88-8db763b8226c" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		<do access-modifier="private" name="Restore" display-name="Restore" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[Update(originalValue);]]>
			</body>
		</do>
		<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// выходим, если текущее значение не изменилось
if (currentValue == value)
	return;

//Debug.Log("Update view time interval from " + String.ToString(currentValue) + " to "  +String.ToString(value));
// запоминаем новое текущее значение
currentValue = value;]]>
			</body>
			<param access-modifier="private" name="value" display-name="" uuid="9c9a9d7f-970e-47db-8315-bd2f994ddb1e" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		</do>
		<object access-modifier="private" name="Begin" display-name="Начало видимого интервала времени" uuid="78a76f12-ccfc-4e4a-8caa-cfc83413e809" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="End" display-name="Конец видимого интервала времени" uuid="b6a982e2-1db5-4053-b0b8-bacffa2d08be" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="DifferentFromDataInterval" display-name="DifferentFromDataInterval" uuid="6ef8f583-40b2-4c04-949b-075dc1802dfe" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
		<do-trace access-modifier="private" target="DifferentFromDataInterval" ver="5">
			<body>
				<![CDATA[Begin < private.DataIntervalBegin - unit.Const.dtONE_SECOND ||
End > private.DataIntervalEnd + unit.Const.dtONE_SECOND]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="OperativeStoredInterval" display-name="Хранимый интервал оперативного режима, мин" uuid="54624895-41a5-47e4-b177-ad1a72a8f727" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[newValue: uint4 =  value * 60; // перевод минут в секунды
if (originalValue == newValue)
	return;

// запоминаем значение, чтобы иметь возможность его восстановить
originalValue = newValue;

// обновляем интервал
Update(originalValue);]]>
			</body>
		</do-on>
		<object access-modifier="private" name="originalValue" display-name="originalValue" uuid="4073b035-c17e-45b2-b4b9-ae5036faa2b8" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<object access-modifier="private" name="currentValue" display-name="currentValue" uuid="000698eb-4030-4359-981f-7c0ac3e50918" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// выходим, если текущее значение не изменилось
if (currentValue == value)
	return;

//Debug.Log("Update operative stored interval from " + String.ToString(currentValue) + " to "  +String.ToString(value));
// запоминаем новое текущее значение
currentValue = value;

if (ActiveMode == unit.Const.amOPERATIVE)
	private.RestartOperativeMode();]]>
			</body>
			<param access-modifier="private" name="value" display-name="" uuid="1ccad8be-7056-4a31-88d5-2a49e9db9f0c" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
		<do access-modifier="private" name="Restore" display-name="Restore" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[Update(originalValue);]]>
			</body>
		</do>
		<init target="originalValue" ver="5" value="600"/>
		<init target="currentValue" ver="5" value="600"/>
	</object>
	<do access-modifier="private" name="Zoom" display-name="Zoom" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[if (factor <= 0)
	return;

// Если включен вертикальный зум
if (ZoomYEnable)
{
	i: int4 = 1;
	while (i < Line.Length)
	{
		if (Params.Lines[i].Used)
		{
			nChart: int4 = Params.Lines[i].nChart;
			nAxis: int4 = Params.bGlobalRanges ? 0 : Params.Lines[i].numAxis;
			minY: double = Variant.ToDouble(Chart[nChart].Axis_Y[nAxis].Min, 0);
			maxY: double = Variant.ToDouble(Chart[nChart].Axis_Y[nAxis].Max, 0);
			if (maxY > minY)
			{
				deltaY: double = (maxY - minY) * (factor - 1) / 2;
				minY -= deltaY;
				maxY += deltaY;
				//Debug.Log("Chart[" + String.ToString(i) + "].Zoom.Y min=" + String.ToString(minY) + ", max=" + String.ToString(maxY) + ", delta=" + String.ToString(deltaY));
				Chart[nChart].Axis_Y[nAxis].Scale = unit.Const.scFIXED;
				Chart[nChart].Axis_Y[nAxis].SetInterval(minY, maxY);
			}
		}
		i += 1;
	}
	Params.SetUserScale(true);
}

// Если включен горизонтальный зум
if (ZoomXEnable)
{	
	if (ViewInterval.currentValue > 0)
	{		
		if (factor > 1)
		{
			deltaX: uint8 = TypeConvert.ToUint8(ViewInterval.currentValue * (factor - 1) / 2);
			SetTimeInterval(ViewInterval.Begin - deltaX, ViewInterval.End + deltaX);
		}
		else if (factor < 1)
		{
			deltaX: uint8 = TypeConvert.ToUint8(ViewInterval.currentValue * (1 - factor) / 2);
			SetTimeInterval(ViewInterval.Begin + deltaX, ViewInterval.End - deltaX);
		}
	}
}]]>
		</body>
		<param access-modifier="private" name="factor" display-name="" uuid="1a3a162f-a22e-4807-ab6e-3c473b4285a0" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
	</do>
	<do access-modifier="private" name="SetTimeInterval" display-name="SetTimeInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="begin" display-name="" uuid="98620a53-c10e-4f98-bf92-3d233e6b04ba" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
		<param access-modifier="private" name="end" display-name="" uuid="2a78f062-d9f8-4e08-ad3c-25a1b0c49d13" base-type="timestamp" base-type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa" ver="5"/>
		<body kind="om">
			<![CDATA[if (end > begin)
{
	//Debug.Log("SetTimeInterval: " + DateTime.ToString(begin) + " - " + DateTime.ToString(end));
	
	// запоминаем интервал
	ViewInterval.Update(end - begin);
	ViewInterval.Begin = begin;
	ViewInterval.End = end;
	
	for(n: int4 = 0; n < Chart.Length; n += 1)
	{
		if (Params.Charts[n].bVisible)
			Chart[n].UpdateAxisXInterval(begin, end);
	}
}]]>
		</body>
	</do>
	<do access-modifier="private" name="LoadHistoricalData" display-name="LoadHistoricalData" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//Debug.Log("LoadHistoricalData: " + DateTime.ToString(ViewInterval.Begin) + " - " + DateTime.ToString(ViewInterval.End));
private.UpdateDataInterval(ViewInterval.Begin, ViewInterval.End);

Lines.HistoryRequestMask = 0;
Lines.HistoryNeedMask = 0;

for (i: uint1 = 1; i < Line.Length; i += 1)
{
	if (Params.Lines[i].Used && Params.Lines[i].TypeGraph != unit.Const.tgFILE_GRAPH)
	{
		if (Line[i].ApItem.Advised)
			private.HistoryRequest(i);
		else
			Lines.HistoryNeedMask = Lines.HistoryNeedMask | (1 << i);
		
		if (!private.Timer_ValueQuery.Active)
			private.Timer_ValueQuery.Active = true;
	}
}]]>
		</body>
	</do>
	<do access-modifier="private" name="CancelHistoryRequest" display-name="CancelHistoryRequest" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[i: int4 = 1;
while (i < Line.Length)
{
	Line[i].DataSource.CancelReadAsync();
	i += 1;
}
Lines.HistoryRequestMask = 0;]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateYRanges" display-name="UpdateYRanges" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[// запоминаем режим автоподстройки
AutoRange = autoRange;
Params.bAutoRange = autoRange;
//Debug.Log("UpdateYRanges.AutoRange="+String.ToString(autoRange));
i:int4 = 0;
n:int4 = 0;
while (n < Chart.Length)
{
	if (Params.Charts[n].bVisible)
	{
		i = 0;
		while (i < Chart.Axis_Y.Length)
		{
			bUserScale: bool = i == 0 ? Params.Charts[n].bUserScale : Params.Axis[i].bUserScale;
			if (!bUserScale)	// Если не включен режим ручного масштабирования для оси
			{		
				// устанавливаем режим автоподстройки у оси
				Chart[n].Axis_Y[i].Scale = autoRange ? unit.Const.scAUTO : unit.Const.scFIXED;
				
				// если автоподстройка отключена, то задаем интервал по оси	
				if (!autoRange)
					Chart[n].Axis_Y[i].SetInterval(Params.Axis[i].fixYmin, Params.Axis[i].fixYmax);
			}
			i += 1;	
		}
		Chart[n].Update();
	}
	n += 1;
}
]]>
		</body>
		<param access-modifier="private" name="autoRange" display-name="" uuid="3e0f6bac-ea89-4d2d-9a5d-6e9c13057cbd" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	</do>
	<do access-modifier="private" name="SetYRange" display-name="SetYRange" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//Debug.Log("SetYRange["+Str.ToString(index)+"]=("+Str.ToString(min)+","+Str.ToString(max)+")");
if (index == 0)
	Params.Charts[nChart].bUserScale = true;
else
	Params.Axis[index].bUserScale = true;

Chart[nChart].Axis_Y[index].Scale = unit.Const.scFIXED;
Chart[nChart].Axis_Y[index].SetInterval(min, max);]]>
		</body>
		<param access-modifier="private" name="nChart" display-name="" uuid="d940a292-ec45-4ab8-9821-e6cc9c7094cc" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<param access-modifier="private" name="index" display-name="" uuid="4950e9c5-4383-4d3f-bfa1-4853754cd544" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<param access-modifier="private" name="min" display-name="" uuid="de3b890f-70ad-49f1-afe5-5d44e21710e0" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
		<param access-modifier="private" name="max" display-name="" uuid="c8081e7f-bc24-427a-8c89-0cd8ae357c3b" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
	</do>
	<do access-modifier="private" name="ZoomOff" display-name="ZoomOff" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[
n:int4 = 0;
while (n < Chart.Length)
{
	Chart[n].ZoomX = 0;
	Chart[n].ZoomY = 0;
	Chart[n].Axis_X.Zoom = 0;
	i:int4 = 0;
	while (i < Chart.Axis_Y.Length)
	{
		Chart[n].Axis_Y[i].Zoom = 0;
		i += 1;
	}
	Chart[n].Enabled = false;
	n += 1;
} // */
MiniTrend.Enabled = false;]]>
		</body>
	</do>
	<object access-modifier="private" name="UseServerTime" display-name="Загружать метку времени сервера" uuid="1a168c73-1517-4188-82d3-67d5febcda06" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	<object access-modifier="private" name="ModeTimeSourceServer" display-name="Режим времени Источник-Сервер" uuid="81bac197-49b6-46df-88f3-2d3bae65f654" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	<object access-modifier="private" name="YAxisPrecision" display-name="Точность отображения значений" uuid="17bbb09e-8796-4fee-8cc2-c628052b454d" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5"/>
	<object access-modifier="private" name="SelectedItem" display-name="SelectedItem" uuid="a644e701-df41-4473-8838-f7548b401a13" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	<object access-modifier="private" name="ShowRedLine" display-name="Показывать красную линию" uuid="003bbbb0-b4ff-4dba-b92e-39d37d49cab9" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" cardinal="1"/>
	<object access-modifier="private" name="RedLineShift" display-name="Сдвиг красной линии, %" uuid="67b8aee6-f539-43fd-84cd-48086ed0595c" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="AdviseWarnings" display-name="AdviseWarnings" uuid="df2ac561-09d5-4849-83b7-57b87a20b962" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="pOnMouseRightRelease" display-name="pOnMouseRightRelease" uuid="9fdd9dec-6e25-4496-b18c-627f622c80c0" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="pOnLegendMouseRightRelease" display-name="pOnLegendMouseRightRelease" uuid="69460211-a56a-48ee-85c8-a6de52bcb433" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-сonst="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnSettingsChanged" display-name="pOnSettingsChanged" uuid="b49ef3c8-6ff3-4236-bed4-f6a673efdc49" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-сonst="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnViewChanged" display-name="pOnViewChanged" uuid="dd15eaf4-0225-484a-918b-2138ca4fdc28" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-сonst="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnHistoryLoad" display-name="pOnHistoryLoad" uuid="0a6aad16-cf6e-4455-b39c-0592296559b9" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="pOnDataLoad" display-name="pOnDataLoad" uuid="56aa896c-8615-40a2-8e2e-00df6e0512c1" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="pOnDataSave" display-name="pOnDataSave" uuid="fb1f55b2-16cb-4b4b-8df9-324be1fd4825" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnScreenSave" display-name="pOnScreenSave" uuid="0b92dcff-850b-4d68-9256-392678357aab" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnTableExport" display-name="pOnTableExport" uuid="acb9f69c-2dda-4f29-8856-4c7917f4189c" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnSaveSignalList" display-name="pOnSaveSignalList" uuid="50c3b020-58f1-41b4-baa3-dda056dc7daf" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnDoPrintSettings" display-name="pOnDoPrintSettings" uuid="8f99c8b3-000b-43bd-9cfd-c99a73b6a6fc" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnPrint" display-name="pOnPrint" uuid="6581b8a8-e75b-4423-8c9e-00aebe2f692d" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pOnError" display-name="pOnError" uuid="a3479681-c56d-4fb2-a90b-e7af3647997d" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="Line" display-name="Line" uuid="6917d238-728c-4c93-8096-948eeef57d27" base-type="Line" base-type-id="3337f550-4fea-4eff-8ef4-2e7b87f33711" ver="5" description="" cardinal="31">
		<designed target="Color" value="4278190335" ver="5"/>
		<designed target="Title" value="" ver="5"/>
		<designed target="Unit" value="" ver="5"/>
		<designed target="LineWidth" value="1" ver="5"/>
		<designed target="PointSize" value="1" ver="5"/>
		<designed target="LineBrushStyle" value="1" ver="5"/>
		<designed target="BrushOpacity" value="1" ver="5"/>
		<designed target="PointSymbolCode" value="0" ver="5"/>
		<designed target="PointVisible" value="false" ver="5"/>
		<designed target="PointSymbolFont" value="" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="zOrder" value="100" ver="5"/>
		<designed target="drawingType" value="0" ver="5"/>
		<designed target="ColumnNumberTime" value="2" ver="5"/>
		<designed target="ColumnNumberValue" value="0" ver="5"/>
		<designed target="StringTagsYValue" value="0" ver="5" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409"/>
		<designed target="SortByServerTimeColumn" value="false" ver="5"/>
		<designed target="ShowActiveControllineLabels" value="false" ver="5"/>
		<designed target="Tag" value="" ver="5"/>
		<object access-modifier="private" name="DataSource_1" display-name="DataSource_1" uuid="b4d4d022-6a88-4757-b84e-1e9c2d4d0fea" base-type="DataSource" base-type-id="22b9b931-37d6-455b-b200-df50e9527bc8" ver="5" description="" cardinal="1">
			<designed target="LengthReserved" value="4194304" ver="5"/>
			<designed target="LoadColumns" value="true" ver="5"/>
			<designed target="Sort" value="true" ver="5"/>
			<designed target="SortColumnNumber" value="2" ver="5"/>
			<object access-modifier="private" name="ApItemValueQuery" display-name="ApItemValueQuery" uuid="87282283-6574-4d10-9b61-376d2334970c" base-type="ApItemValueQuery" base-type-id="66ce99c8-b124-42cf-b541-4299b9f17462" ver="5" description="" cardinal="1">
				<designed target="Mode" value="2" ver="5"/>
				<designed target="HistoricalRangeStart" value="0" ver="5"/>
				<designed target="HistoricalRangeEnd" value="0" ver="5"/>
				<designed target="Active" value="true" ver="5"/>
				<designed target="OperativeInterval" value="300" ver="5"/>
				<designed target="OperativeBufferSize" value="0" ver="5"/>
				<designed target="PreloadHistoricalData" value="true" ver="5"/>
				<init target="Item" ver="5" ref="ApItem"/>
			</object>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="ReadFinished">
				<body kind="om">
					<![CDATA[if (rowsRead > 0)
{
	//Debug.Log("DataSource[" + String.ToString(parent.Index) + "] readed " + String.ToString(rowsRead) + ", errorCode=" + String.ToString(errorCode));
	Legend.UpdateItemMinMaxSize(parent.Index);
}

index:uint1 = TypeConvert.ToUint1(parent.Index);
if (Math.TestBit(Lines.HistoryRequestMask, index))
{
	if (ActiveMode == unit.Const.amHISTORY)
	{	
		// Для графиков загруженных из истории
		private.Timer_ValueQuery.Active = false; 
		private.Timer_ValueQuery.Active = true; // Перезапускаем таймер
	
		if (errorCode != 3)
		{
			if (errorCode > 0)
			{ 
				error: string = message;
				if (error == "") error = "Ошибка чтения данных (код ошибки " + String.ToString(errorCode) + ")";
				private.QueryError[parent.Index] = Params.Lines[parent.Index].Tag+ ": " + error;
				//Debug.Log(String.ToString(errorCode) + " - " + QueryError[index]);	
			}
			Lines.HistoryRequestMask = Math.ClearBit(Lines.HistoryRequestMask, index);
			// Если все запросы на загрузку истории выполнены
			if (Lines.HistoryRequestMask == 0)
			{
				pOnHistoryLoad.Invoke();
			}			
		}
	}
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="SaveFinished">
				<body kind="om">
					<![CDATA[//Debug.Log("SaveFinished["+String.ToString(parent.Index)+"].rowsSave="+String.ToString(rowsSave) + ", errorCode=" + String.ToString(errorCode));
if (errorCode == 1)
{
	// прерываем обработку загруженных файлов, чтобы не показывать все остальные ошибки
	Lines.SaveFilesMask = 0;
		
	if (private.ExportFile != "")
	{
		error: string = "Код ошибки " + String.ToString(errorCode);
		private.EventParams[0] = private.ExportFile;
		private.EventParams[1] = error;
		pOnDataSave.Invoke();
		
		private.ShowError.message = "Ошибка сохранения графиков в файл\n" + private.ExportFile + "\n" + error;
		private.ShowError.Invoke();
	}
	else
	{
		// результ сохранения - ошибка
		private.EventParams[0] = "Не удалось сохранить файл с данными в " + private.ExportTrendsPath;
		pOnError.Invoke();
	}
}
else if (Lines.SaveFilesMask > 0)
{
	Lines.SaveFilesMask = Math.ClearBit(Lines.SaveFilesMask, TypeConvert.ToUint1(parent.Index));
	
	if (Lines.SaveFilesMask == 0)
	{
		if (private.ExportFile != "")
		{
			// запускаем архивирование
			Archiver_1.AsyncPack(private.ExportTrendsPath, private.ExportFile);
		}
		else
		{
			// сохранение выполнялось в папку, просто уведомляем об окончании сохранения
			private.EventParams[0] = "";
			private.EventParams[1] = "";
			pOnDataSave.Invoke();
		}
	}
}


]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="LoadFinished">
				<body kind="om">
					<![CDATA[//Debug.Log("DataSource[" + String.ToString(parent.Index) + "] loaded" + ", errorCode=" + String.ToString(resultOfExecution));
Legend.UpdateItemMinMaxSize(parent.Index);

index:uint1 = TypeConvert.ToUint1(parent.Index);
if (Math.TestBit(Lines.UploadFilesMask, index))
{
	if (resultOfExecution != 3)
	{
		// Для графиков загруженных из файла
		if (resultOfExecution > 0)
		{
			if (private.ErrorMessages != "")
				private.ErrorMessages += ", ";
			private.ErrorMessages += "Ошибка загрузки из файла: " + GetDescriptionByCode(resultOfExecution) ;
			RemoveItemByIndex(index);
		}
		Lines.UploadFilesMask = Math.ClearBit(Lines.UploadFilesMask, index);		
		
		// Если все запросы на загрузку файлов выполнены
		if (Lines.UploadFilesMask == 0)
		{
			Lines.FinalUploadFiles();
		}
	}
}
]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="ApItem" display-name="ApItem" uuid="d91f98b0-d5a2-4516-9292-70be39ec64a3" base-type="ApItem" base-type-id="9bc9fdb8-ccbc-45af-b711-95945c17a630" ver="5" description="" cardinal="1">
			<init target="Path" ver="5" value="**"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnAdviseStateChanged">
				<body kind="om">
					<![CDATA[index: uint1 = TypeConvert.ToUint1(parent.Index);
if (Params.Lines[index].Used)
{
	//Debug.Log(Params.Lines[index].Tag + " AdviseState=" + String.ToString(adviseState)+", CanonicalType="+String.ToString(CanonicalType));
	if (adviseState == unit.Const.stADVISED_OK)
	{
		Lines.SetCanonicalType(index, CanonicalType);

		if (ActiveMode == unit.Const.amOPERATIVE && Params.Lines[index].bMainTime)
			Lines.BeginReadRT(index);
			
		if (Math.TestBit(Lines.HistoryNeedMask, index))	
			private.HistoryRequest(index);
	}
	
	if (adviseState == unit.Const.stADVISED_OK || adviseState == unit.Const.stNOADVISED)
		private.UpdateAdviseWarnings();
}]]>
				</body>
			</do-on>
			<init target="Source" ver="5" ref="initApSource"/>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="OnDescriptionChanged">
				<body kind="om">
					<![CDATA[line: int8 = parent.Index;
if (description != "" && Params.Lines[line].Description == "")	// Если пользователь не задал описание
{
	//Debug.Log("Item[" + String.ToString(line) + "].Description=" + description);
	Params.Lines[line].Description = description;
	Line[line].Title = description;
	
	Legend.UpdateItem(line);
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="OnUnitsChanged">
				<body kind="om">
					<![CDATA[line: int8 = parent.Index;
if (units != "" && Params.Lines[line].Unit == "")	// Если пользователь не задал ед.измерения
{
	//Debug.Log("Item[" + String.ToString(line) + "].EUnit=" + units);
	
	Params.Lines[line].Unit = units;  // Берем ед.изм. из сигнала
	Line[line].Unit = units;
	
	Legend.UpdateItem(line);
	UpdateYRanges(AutoRange);
	ConvertUnitsMenu.Update();
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="OnVqtChanged">
				<body kind="om">
					<![CDATA[if (!Variant.IsEmpty(value))
{
	//Debug.Log("ApItem[" + String.ToString(parent.Index) + "] changed to " + ValueAsString);
	Legend.UpdateItemVQT(parent.Index);
}]]>
				</body>
			</do-on>
		</object>
		<init target="DataSource" ver="5" ref="DataSource_1"/>
		<init target="AxisX" ver="5" ref="Chart.Axis_X"/>
		<init target="AxisY" ver="5" ref="Chart.Axis_Y"/>
		<init target="Visible" ver="5" value="false"/>
		<object access-modifier="private" name="Decor" display-name="Decor" uuid="74e45dcd-75ce-481c-8c3c-484bf0426d4b" base-type="Decorator" base-type-id="19ba127f-e7de-450c-a26c-2c82fabcb98c" ver="5" cardinal="10">
			<designed target="Color" value="0xff0000ff" ver="5"/>
			<designed target="Title" value="" ver="5"/>
			<designed target="LineWidth" value="1" ver="5"/>
			<designed target="PointSize" value="1" ver="5"/>
			<designed target="LineBrushStyle" value="2" ver="5"/>
			<designed target="Active" value="false" ver="5"/>
			<designed target="MinValue" value="216" ver="5"/>
			<designed target="MaxValue" value="216" ver="5"/>
			<designed target="ColumnNumber" value="1" ver="5"/>
			<designed target="zOrder" value="100" ver="5"/>
		</object>
		<designed target="Ratio" value="1" ver="5"/>
		<designed target="Offset" value="0" ver="5"/>
	</object>
	<param access-modifier="private" name="init_Theme" display-name="Тема оформления" uuid="9638431a-0073-4454-bbcb-9a572899dedf" base-type="Trends_Theme" base-type-id="3fbfa4c2-c742-4bec-94dc-d1bcb7ef25b6" base-const="true" base-ref="true" ver="5"/>
	<param access-modifier="private" name="init_ScreenKeyboard" display-name="Вызов экранной клавиатуры" uuid="049cef34-4ba8-48e8-a2c0-dc3f89fb167d" base-type="ScreenKeyboardOptions" base-type-id="0589bc8e-fbb2-4f0e-b5d2-f0d825538ef1" ver="5" description="" cardinal="1" base-ref="true">
		<init target="Enabled" ver="5" value="false"/>
	</param>
	<param access-modifier="private" name="init_Permissions" display-name="Разрешения" uuid="2c37c1a7-d9b7-4b8c-9954-01eaba052642" base-type="Trends_Permissions" base-type-id="083b63d1-3678-4da0-80a0-9c09d0076a3c" base-const="true" base-ref="true" ver="5" description=""/>
	<param access-modifier="private" name="init_Settings" display-name="Настройки" uuid="a9a2ebfe-5cf5-4acd-b9f3-387c814e5726" base-type="Trends_Settings" base-type-id="91daec58-54a8-4900-9b93-be8602b98694" base-const="true" base-ref="true" ver="5" description=""/>
	<param access-modifier="private" name="init_Templates" display-name="Шаблоны" uuid="caf58bed-8a30-4572-9de8-429adfadc982" base-type="Templates" base-type-id="020ae0f1-0abb-4c52-9c0e-0152917830ed" base-const="true" base-ref="true" ver="5" description=""/>
	<param access-modifier="private" name="initApSource" display-name="initApSource" uuid="455d68a1-aeeb-4e53-af18-21959daabe92" base-type="ApSource" base-type-id="966603da-f05e-4b4d-8ef0-919efbf8ab2c" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="SelectedChart" display-name="SelectedChart" uuid="e8e249c1-25d6-4aa2-9448-7f15ffc0ff71" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	<init target="RedLineShift" ver="5" value="1"/>
	<param access-modifier="private" name="DataUpdatePeriod" display-name="Период обновления данных, мс" uuid="f43abf5c-ca96-4af1-a20f-31924354555f" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	<init target="DataUpdatePeriod" ver="5" value="1000"/>
	<do access-modifier="private" name="LoadFromFile" display-name="LoadFromFile" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//Debug.Log("LoadFromFile: "+filePath);
private.ErrorMessages = "";
private.LoadingFilePath = filePath;
//	Загрузка архива
if (String.EndsWith(filePath, ".zip") || String.EndsWith(filePath, ".avz"))
{
	j: int4 = String.LastIndexOf(filePath, ".");
	private.LoadingFolder = String.SubString(filePath, 0, j);
	Archiver_1.AsyncUnpack(filePath, private.LoadingFolder);
}
//	Загрузка одиночного файла
else if (String.EndsWith(filePath, ".csv"))
{
	Params.ExParams.bGlobalRanges = GlobalRanges;
	Params.ExParams.bAutoRange = AutoRange;
	Lines.LoadFile(filePath, 0);
}]]>
		</body>
		<param access-modifier="private" name="filePath" display-name="" uuid="7ada1f6b-0b8c-449d-aad2-03ce73633f6c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="LoadFromFolder" display-name="LoadFromFolder" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[//Debug.Log("LoadFromFolder: "+folderPath);
Lines.UploadFilesMask = 0;
private.ErrorMessages = "";

paramsPath: string = Files.CombinePath(folderPath, "00.json");
if (Files.Exists(paramsPath))
{
	Params.ExParams.LoadFromFile(paramsPath);
}
else 
{
	// Если директория распаковки определена функцией LoadFromFile()
	if (private.LoadingFolder != "")
	{
		// удаляем директорию распаковки 
		Files.RemoveRecursive(private.LoadingFolder);		
		private.LoadingFolder = "";
	}
	private.EventParams[0] = "";
	pOnDataLoad.Invoke();
	return false;
}
	
// Добавление графиков
i: int4 = 1;
while (i <= Params.ExParams.LinesCount)
{
	linePath: string = Files.CombinePath(folderPath, String.ToString(i) + ".json");
	if (Lines.LoadFile(linePath, i))
		Params.LinesCount += 1; 
	i += 1;
}

// параметры общей оси		
Params.Axis[0].fixYmin = Params.ExParams.Axis[0].fixYmin;
Params.Axis[0].fixYmax = Params.ExParams.Axis[0].fixYmax;	

// Определяем диапазон Y[0] для всех чартов
n:int4 = 0;
while (n < Chart.Length)
{
	if (Params.ExParams.Axis[0].Yscale==unit.Const.scFIXED || Params.ExParams.Charts[n].bUserScale)
	{
		SetYRange(n, 0, Params.ExParams.Charts[n].Y0min, Params.ExParams.Charts[n].Y0max);
	}
	n += 1;
}

// Определяем привязку индивидуальных осей
i = 1;
while (i <= Params.ExParams.LinesCount)		
{		 		
	iItem: int4 = Params.nItem[i];
	Params.Lines[iItem].numAxis = Params.nItem[Params.ExParams.Lines[i].numAxis];
	if (Params.Lines[iItem].numAxis == 0)
		Params.Lines[iItem].numAxis = iItem;
	Lines.SetChart(iItem, Params.ExParams.Lines[i].nChart);
	if (Params.ExParams.Axis[i].Yscale==unit.Const.scFIXED || Params.ExParams.Axis[i].bUserScale)
	{
		SetYRange(Params.Lines[iItem].nChart, iItem, Params.ExParams.Axis[i].Ymin, Params.ExParams.Axis[i].Ymax);
	}
	i += 1;
}


return true;]]>
		</body>
		<param access-modifier="private" name="folderPath" display-name="" uuid="8d4477f0-b119-4b03-aab3-d1876dc9f351" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="SaveToFile" display-name="SaveToFile" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[// Используем имя файла без расширения для создания временнной папки 
j: int4 = String.LastIndexOf(filePath, ".");											
exportFolder: string = String.SubString(filePath, 0, j);

private.ExportFile = filePath; // Сохраняем имя файла для формирования конечного файл архива
private.ExportTrendsPath = exportFolder;
Lines.Save(exportFolder);]]>
		</body>
		<param access-modifier="private" name="filePath" display-name="" uuid="ec676840-851d-4856-a142-2db8b78eda4c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="SaveToFolder" display-name="SaveToFolder" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[private.ExportFile = ""; // Обнуляем имя файла чтобы не формировать конечный файл архива
private.ExportTrendsPath = exportFolder;
Lines.Save(exportFolder);]]>
		</body>
		<param access-modifier="private" name="exportFolder" display-name="" uuid="f68a8b96-1d01-4d38-b0db-d3b5bc93e553" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<object access-modifier="private" name="CursorMode" display-name="CursorMode" uuid="e6bd7588-8f2b-4751-a982-2febfa19b296" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5"/>
	<init target="CursorMode" ver="5" value="2"/>
	<do access-modifier="private" name="MoveToNow" display-name="MoveToNow" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[// переместить отображаемый интервал по оси X к текущему времени
now: uint8 = DateTime.UtcNow();
SetRedLine(now);
private.UpdateOperativeTimeInterval(now, true);]]>
		</body>
	</do>
	<object access-modifier="private" name="ZoomYEnable" display-name="ZoomYEnable" uuid="8291e26b-d194-454d-9f83-bd8cc1a7e62b" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[here.private.NotifyViewChanged.Invoke();

if (!ZoomXEnable && !ZoomYEnable && CursorMode == unit.Const.cmZOOM)
	CursorMode = unit.Const.cmHAND_MOVE;]]>
			</body>
		</do-on>
	</object>
	<init target="ZoomYEnable" ver="5" value="true"/>
	<object access-modifier="private" name="ZoomXEnable" display-name="ZoomXEnable" uuid="9d906521-4346-4e0a-a1d5-7cd20c874fa3" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[here.private.NotifyViewChanged.Invoke();

if (!ZoomXEnable && !ZoomYEnable && CursorMode == unit.Const.cmZOOM)
	CursorMode = unit.Const.cmHAND_MOVE;]]>
			</body>
		</do-on>
	</object>
	<init target="ZoomXEnable" ver="5" value="true"/>
	<object access-modifier="private" name="Converter" display-name="Converter" uuid="0060d73a-1277-4678-a1e5-9a55600e76fa" base-type="Converter" base-type-id="9846118d-6c33-44f8-8ff4-f502280dd5c0" ver="5" description="" cardinal="1"/>
	<do access-modifier="private" name="SetGraphicColor" display-name="SetGraphicColor" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="tag" display-name="" uuid="0e3baae5-0288-47b5-b111-0656706d5107" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="R" display-name="" uuid="9f01edb4-a9ec-4430-8aa2-b6d688827eb3" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<body kind="javascript">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

var color = 0xff000000;
color = color + ((R & 0x000000ff) << 16) + ((G & 0x000000ff) << 8) + (B & 0x000000ff);
//log("GraphColor="+((R & 0x000000ff) << 16)+"_ "+color);
return SetGraphicColorU4(tag, color);
]]>
		</body>
		<param access-modifier="private" name="G" display-name="" uuid="239ae443-e81e-4603-bb61-a7eaabc5db98" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<param access-modifier="private" name="B" display-name="" uuid="9a5fb47e-4bdf-4ee5-9a4f-a7f868dad64d" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
	</do>
	<do access-modifier="private" name="SetGraphicColorU4" display-name="SetGraphicColorU4" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="tag" display-name="" uuid="5cc08129-c372-475e-8538-e21face7b476" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="color" display-name="" uuid="e76a6a6e-45e8-43a1-9d4c-93bc0fc76e63" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

index: int4 = Params.GetIndexByPath(tag);
result: bool = false;
if (index > 0)
{
	Lines.SetColor(index, color);
	Params.Lines[index].ColorMain = color;	
	Legend.UpdateItem(index);
	result = true;
}
return result;]]>
		</body>
	</do>
	<do access-modifier="private" name="SetAxisColor" display-name="SetAxisColor" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="tag" display-name="" uuid="f0a18163-a3d7-4ea7-b797-9fcad0a0fd13" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="R" display-name="" uuid="09c3924b-4585-4b88-b9c2-0be504576d09" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<body kind="javascript">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

var color = 0xff000000;
color = color + ((R & 0x000000ff) << 16) + ((G & 0x000000ff) << 8) + (B & 0x000000ff);
return SetAxisColorU4(tag, color);
]]>
		</body>
		<param access-modifier="private" name="G" display-name="" uuid="70f36481-1b79-4448-bc8a-28c20d1e34f0" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<param access-modifier="private" name="B" display-name="" uuid="78f8bb68-50d3-4d71-bc40-b08078a121b2" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
	</do>
	<do access-modifier="private" name="SetAxisColorU4" display-name="SetAxisColorU4" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

result: bool = false;
index: int4 = Params.GetIndexByPath(axisName);
if (index >= 0)		// Если ось с указанным тегом найдена
{
	nAxis: int4 = Params.Lines[index].numAxis;
	Params.Axis[index].ColorY = color;
	Axis.SetColor(nAxis, color);
	result = true;
}
Legend.UpdateItem(index);
return result;

]]>
		</body>
		<param access-modifier="private" name="axisName" display-name="" uuid="79de29cb-e978-4dbb-96bc-0eb4e9e9a800" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="color" display-name="" uuid="07df73a5-1472-48ab-8e6f-10fbad69105b" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
	</do>
	<do access-modifier="private" name="SetGraphicThickness" display-name="SetGraphicThickness" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="tag" display-name="" uuid="44e93b27-4918-4c4c-8a4f-0add65d097dc" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="value" display-name="" uuid="172845c7-848d-4a6a-9267-8bba532c1815" base-type="float" base-type-id="730a70b7-31fd-42cf-860d-ba8faa618f9d" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

index: int4 = Params.GetIndexByPath(tag);
if (index > 0)
{
	Params.Lines[index].WidthGood = value;
	Lines.Update();
	Legend.UpdateItem(index);
	return true;
}
else
	return false;]]>
		</body>
	</do>
	<do access-modifier="private" name="SetGraphicAxis" display-name="SetGraphicAxis" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="tag" display-name="" uuid="bc26e564-019e-4b7a-994f-edc3b8790fa8" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="axisTag" display-name="" uuid="b6f9cdbb-cd3a-4d54-8fd6-1aa2ac27b8d3" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer();		// инициализатор выполняется только один раз 

//Debug.Log("SetGraphicAxis. Tag="+tag+" ,axisTag="+axisTag);
if (axisTag!="" && tag!="")
{
	n0:int4 = 0; 
	i:int4 = 1;
	nAxis:int4 = 0;											// индекс графика к которому мы привязыаемся
	while (i < Line.Length)
	{
		if (Params.Lines[i].Tag == axisTag) nAxis = i;
		if (Params.Lines[i].Tag == tag) n0 = i;
		i += 1;
	}
	if (nAxis==0 || n0==0)
	{
		Debug.Log("Trends.SetGraphicAxis. Тэг  для одного из параметров не найден!");
		return;
	}	
//	Debug.Log("SetGraphicAxis. nAxis="+Str.ToString(nAxis)+", n0="+Str.ToString(n0)+", nChart="+Str.ToString(Params.Lines[n0].nChart));

	Params.Lines[n0].numAxis = nAxis;     // запоминем индекс новой шкалы для данного графика
}
Axis.LinkUpdate(Params.bGlobalRanges);]]>
		</body>
	</do>
	<do access-modifier="private" name="SetOperativInterval" display-name="SetOperativInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="nMinutes" display-name="" uuid="19cffc07-0e00-4437-9c93-ed3973007747" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5"/>
		<param access-modifier="private" name="nUpdateRate" display-name="" uuid="b27c6c13-5b32-4624-9c01-b40e5f7c0c21" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<body kind="om">
			<![CDATA[private.Initializer(); // инициализатор выполняется только один раз 

Timer_of_ReadData.Period = nUpdateRate;
ViewInterval = TypeConvert.ToUint4(nMinutes);]]>
		</body>
	</do>
	<do access-modifier="private" name="SetIndividualRange" display-name="SetIndividualRange" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[private.Initializer(); // инициализатор выполняется только один раз 

index:int4 = Params.GetIndexByPath(tag);
if (index <= 0)
{
	Debug.Log("Trends.SetIndividualRange. Указанный тег не найден в списке графиков.");
	return;
}

// проверяем чтобы максимум был больше минимума, иначе ошибка!
if (highRange > lowRange)
{
	// получаем индекс оси, к которой привязан график
	axisIndex: int4 = Params.Lines[index].numAxis;
	Params.Axis[axisIndex].fixYmax = highRange;
	Params.Axis[axisIndex].fixYmin = lowRange;
	UpdateYRanges(Params.bAutoRange);
}
else
{
	Debug.Log("Trends.SetIndividualRange: Ошибка установки диапазона значений");
}]]>
		</body>
		<param access-modifier="private" name="tag" display-name="" uuid="ffdb078b-6620-4421-833d-151b9db289ec" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="lowRange" display-name="" uuid="786d36fb-8f8e-429b-bfd2-027d12e9e021" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
		<param access-modifier="private" name="highRange" display-name="" uuid="9de49e85-ab7d-4f00-8304-2a8498a67846" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
	</do>
	<init target="ViewInterval" ver="5" value="10"/>
	<do access-modifier="private" name="SetGraphicMarkerLabelVisible" display-name="SetGraphicMarkerLabelVisible" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 

private.SetMarkerLabelVisible(Params.GetIndexByPath(tag), value);]]>
		</body>
		<param access-modifier="private" name="tag" display-name="" uuid="642799f3-29c0-48c2-8093-ca7642687b3f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="value" display-name="" uuid="367193a9-d67c-4ac9-bfc6-25f73013f415" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	</do>
	<do access-modifier="private" name="LoadSignalsList" display-name="LoadSignalsList" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[if (Files.Exists(filePath))
{
	error: string = Params.ExParams.LoadFromFile(filePath);
	if (error == "")  // Загружаем параметры списка сигналов в набор переменных private.ExParams
	{
		// перед загрузкой удаляем все графики
		Clear();

		if (Params.ExParams.LinesCount > 0)
		{
			i:int4 = 1;
			while (i <= Params.ExParams.LinesCount)
			{
				// добавляем график сигнала
				//Debug.Log("Add " + Params.ExParams.Lines[i].Tag + " from signal list");
				index: int4 = private.ItemsAdd(
					Params.ExParams.Lines[i].Tag, 
					Params.ExParams.Lines[i].Unit, 
					Params.ExParams.Lines[i].Description,
					Params.ExParams.Lines[i].nXColumn, 
					Params.ExParams.Lines[i].TypeGraph,
					Params.ExParams.Lines[i].nChart);

				if (index > 0)
				{					
					Params.nItem[i] = index;
					// Заменяем параметры по умолчанию параметрами загруженными из файла
					Params.CopyLineFromEx(index, i);
				}

				i += 1;
			}
			Lines.Update();
			
			// Обновляем номера осей для привязки, с учетом новых индексов графиков
			i = 1;
			while (i <= Params.ExParams.LinesCount)
			{
				axisIndex: int4 =  Params.nItem[Params.ExParams.Lines[i].numAxis];
				index: int4 = Params.nItem[i];
				if (index != 0)
				{
					if (axisIndex != 0)
						Params.Lines[index].numAxis = axisIndex;
					else Params.Lines[index].numAxis = index;
					
					// восстанавливаем диапазон значений для индивидуальной оси
					if (Params.ExParams.Axis[i].Yscale==unit.Const.scFIXED || Params.ExParams.Axis[i].bUserScale)
					{
						SetYRange(Params.Lines[index].nChart, axisIndex, Params.ExParams.Axis[i].Ymin, Params.ExParams.Axis[i].Ymax);
					}
				}
				i += 1;
			}

			// восстанавливаем диапазон значений общих осей
			n: int4 = 0;
			while (n < Params.ExParams.Charts.Length)
			{
				if (Params.ExParams.Charts[n].bUserScale)
				{
					SetYRange(n, 0, Params.ExParams.Charts[n].Y0min, Params.ExParams.Charts[n].Y0max);
				}	
				n += 1;
			}
			Legend.Update();
		}
		
		// Обновляем привязку осей
		Axis.LinkUpdate(Params.ExParams.bGlobalRanges);
		
		// восстанавливаем режим масштабирования, не изменяя диапазонов осей, так они были загружены из файла
		Params.bAutoRange = Params.ExParams.bAutoRange;
		AutoRange = Params.ExParams.bAutoRange;
		return true;
	}
	else
	{
		private.EventParams[0] = "Не удалось загрузить " + filePath + ".\n" + error;
		pOnError.Invoke();
		return false;
	}
}
else
{
	private.EventParams[0] = "Файл '" + filePath + "'  не найден.";
	pOnError.Invoke();
	return false;
}]]>
		</body>
		<param access-modifier="private" name="filePath" display-name="" uuid="2c77a2a3-1670-4b71-b07a-1b05f6293ca5" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="SaveSignalsList" display-name="SaveSignalsList" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз

folder: string = Files.ParentPath(filePath);
Files.CreateRecursiveFolder(folder);

error: string = private.ExportParams(filePath);
if (error == "")
{
	private.ShowComplete.message = "Список сигналов сохранен в файл\n" + filePath;
	private.ShowComplete.Invoke();
}
else
{
	here.private.ShowError.message = error;
	here.private.ShowError.Invoke();
}

private.EventParams[0] = filePath;
private.EventParams[1] = error;
pOnSaveSignalList.Invoke();
return error == "";]]>
		</body>
		<param access-modifier="private" name="filePath" display-name="" uuid="3ac8d6fe-3bcc-4a17-9119-721fd706d106" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<init target="OperativeStoredInterval" ver="5" value="10"/>
	<designed target="Flip" value="0" ver="5"/>
	<do access-modifier="private" name="FitToScreen" display-name="FitToScreen" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 
//Debug.Log("FitToScreen");

private.ResetZoomX();

// восстанавливаем интервал по оси значений
Params.SetUserScale(false);
UpdateYRanges(Params.bAutoRange);]]>
		</body>
	</do>
	<do access-modifier="private" name="ConfigureGraphic" display-name="ConfigureGraphic" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="tag" display-name="" uuid="95ee7392-e08e-4bcd-8481-78dfc5fd43d6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="sJsonConfiguration" display-name="" uuid="c647b89e-6bbb-4261-ab5f-64d70caee768" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="javascript">
			<![CDATA[private.Initializer();  // инициализатор выполняется только один раз 
//log("ConfigureGraphic:"+sJsonConfiguration);

var result = false;
var index = Params.GetIndexByPath(tag);

if (index >= 0)		
{
	var Config = JSON.parse(sJsonConfiguration);

	if (Config.description != null)
	{
		Params.Lines[index].Description = Config.description;
		Line[index].Title = Config.description;
	}
	if (Config.unit != null)
	{
		Params.Lines[index].Unit = Config.unit;
		Line[index].Unit = Config.unit;
	}
	if (Config.thicknessGood != null)
		Config.thickness = Config.thicknessGood;
	if (Config.thickness != null)
	{
		Params.Lines[index].WidthGood = Config.thickness;
	}
	if (Config.thicknessBad != null)
	{
		let istyle = Params.Lines[index].Decor.GetIndexByTitle("Плохое качество");
		Params.Lines[index].Decor.Style[istyle].LineWidth = Config.thicknessBad;
	}
	if (Config.brushStyleGood != null)
		Config.brushStyle = Config.brushStyleGood;
	if (Config.brushStyle != null)
	{
		if (Config.brushStyle>=0 && Config.brushStyle<=5)
			Params.Lines[index].StyleGood = Config.brushStyle;
		else
			log("Trends.ConfigureGraphic: Недопустимое значение в параметре brushStyle.");
	}
	if (Config.brushStyleBad != null)
	{
		if (Config.brushStyleBad>=0 && Config.brushStyleBad<=5)
		{
			let istyle = Params.Lines[index].Decor.GetIndexByTitle("Плохое качество");
			Params.Lines[index].Decor.Style[istyle].LineStyle = Config.brushStyleBad;
		}
		else
			log("Trends.ConfigureGraphic: Недопустимое значение в параметре brushStyleBad.");
	}
	if (Config.color != null)
	{
		Params.Lines[index].ColorMain = Config.color;
	}
	if (Config.colorManual != null)
	{
		let istyle = Params.Lines[index].Decor.GetIndexByTitle("Ручной ввод");
		Params.Lines[index].Decor.Style[istyle].LineColor = Config.colorManual;
			// Флаг использования цвета ручного ввода устанавливается автоматически, если цвет не совпадает с основным цветом
		Params.Lines[index].Decor.Style[istyle].Active = (Config.colorManual != Params.Lines[index].ColorMain);
	}
	if (Config.useColorManual != null)
	{
		let istyle = Params.Lines[index].Decor.GetIndexByTitle("Ручной ввод");
		Params.Lines[index].Decor.Style[istyle].Active = Config.useColorManual;
	}
	if (Config.synchroColorMarker != null)
	{
		Params.Lines[index].bSyncroColorMarkerLabels = Config.synchroColorMarker;
	}
	if (Config.markerLabelVisible != null)
	{
		Params.Lines[index].bShowMarkerLabels = Config.markerLabelVisible;
	}
	if (Config.tagAxis != null)
	{
		SetGraphicAxis(tag, Config.tagAxis);
	}
	if (Config.colorAxis != null)
	{
		var nAxis = Params.Lines[index].numAxis;
		Params.Axis[nAxis].ColorY = Config.colorAxis;
	}
	if (Config.lowRange!=null && Config.highRange!=null)
	{
		SetIndividualRange(tag, Config.lowRange, Config.highRange);
	}
	if (Config.pointSymbol != null)
	{
		if (Config.pointSymbol>=0 && Config.pointSymbol<=7)
		{
			Params.Lines[index].PointSymbol = unit.Const.mrk.MARKER_SYMBOL[Config.pointSymbol];
			Params.Lines[index].PointSymbolCode = unit.Const.mrk.MARKER_CODE[Config.pointSymbol];
		}
		else
			log("Trends.ConfigureGraphic: Недопустимое значение в параметре pointSymbol.");
	}
	if (Config.typeStringYValue != null)
	{
		Params.Lines[index].StringTagYValue = Config.typeStringYValue;
	}
	if (Config.interpolation != null)
	{
		Params.Lines[index].Interpolation = Config.interpolation;
	}
	if (Config.nChart != null)
	{
		Lines.SetChart(index, Config.nChart);
	}
	if (Config.LineDecorators != null)
	{
		let error = Params.Lines[index].Decor.FromJSON(JSON.stringify(Config.LineDecorators));
		if (error != "")	
			log("Trends.ConfigureGraphic.LineDecorators: " + error);
	}
	if (Config.visible != null)
	{
		Lines.SetVisible(index, Config.visible);
	}
	if (Config.convertUnit)
	{
		let indexes = [];
		indexes.push(index);
		ConvertUnits(Config.convertUnit, JSON.stringify(indexes));
	}
		
	Lines.Update();
	Legend.UpdateItem(index);
	result = true;
}
return result;
]]>
		</body>
	</do>
	<object access-modifier="private" name="LowRange" display-name="Нижний предел значений по Y" uuid="46d5cf1c-130d-4583-8064-3c17dbfcb7bf" base-type="notifying_double" base-type-id="3f905fb7-7738-4619-b402-5a91f136d4bd" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (oldValue != value)
{
	oldValue = value;
	if (private.bInit)
	{
		Params.Axis[0].fixYmin = Value;
		UpdateYRanges(Params.bAutoRange);
	}
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="oldValue" display-name="oldValue" uuid="d966d95d-1e9c-4f28-8ebb-6273bc18c28f" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
	</object>
	<init target="LowRange" ver="5" value="0"/>
	<object access-modifier="private" name="HighRange" display-name="Верхний предел значений по Y" uuid="cae3c978-ef58-47f3-b8bf-451648c6ee2c" base-type="notifying_double" base-type-id="3f905fb7-7738-4619-b402-5a91f136d4bd" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (oldValue != value)
{
	oldValue = value;
	if (private.bInit)
	{
		Params.Axis[0].fixYmax = Value;
		UpdateYRanges(Params.bAutoRange);
	}
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="oldValue" display-name="oldValue" uuid="29806e69-7e7c-499c-b0c5-7b7156be01ee" base-type="double" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="5"/>
	</object>
	<init target="HighRange" ver="5" value="100"/>
	<object access-modifier="private" name="GraphicThickness" display-name="Толщина графиков" uuid="1acc558e-f468-4627-9053-493d2d9360cc" base-type="notifying_float" base-type-id="bb7d05ee-cbf0-4c44-8740-1905239c8ead" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[i:int4 = 1;
while (i < Line.Length)
{
	Params.Lines[i].WidthGood = value;
	i += 1;
}

Lines.Update();]]>
			</body>
		</do-on>
	</object>
	<init target="GraphicThickness" ver="5" value="1"/>
	<object access-modifier="private" name="InterpolationLine" display-name="Режим интерполяции" uuid="9038a836-6187-4c08-a48d-1c533bb74d81" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	<init target="InterpolationLine" ver="5" value="false"/>
	<object access-modifier="private" name="SynchronizeColor" display-name="Синхронизировать цвет графика и оси" uuid="3f56caed-d6bb-448c-a5c5-17e9d624b950" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<init target="SynchronizeColor" ver="5" value="true"/>
	<init target="AutoRange" ver="5" value="true"/>
	<init target="GlobalRanges" ver="5" value="true"/>
	<init target="ModeTimeSourceServer" ver="5" value="0"/>
	<init target="ShowMiniTrends" ver="5" value="true"/>
	<init target="ControlLineMultipleAdd" ver="5" value="false"/>
	<object access-modifier="private" name="ShowOpenDialog" display-name="ShowOpenDialog" uuid="ee0ba1c1-0bf2-490f-899c-901bd2f348f1" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
			<object access-modifier="private" uuid="7e814168-6fde-4796-ae54-3d18c14e5ceb" base-type="OpenFileDialog" base-type-id="41505bc5-e0a8-4d93-b1a9-de842aaf215b" ver="5">
				<init target="FileTypeFilter" ver="5" value="Список сигналов (*.jtsl)|*.jtsl|Список сигналов (*.json)|*.json|Архив с данными (*.avz)|*.avz|Архив с данными (*.zip)|*.zip|Файл с данными (*.csv)|*.csv"/>
				<init target="OnComplete" ver="5" ref="OpenFile"/>
				<init target="Result" ver="5" ref="DialogResult"/>
				<init target="DefaultFileType" ver="5" ref="FileType"/>
				<init target="OnEditSettings" ver="5" ref="ShowFileSettingsDialog"/>
				<do-trace access-modifier="private" target="EditSettingsAllowed" ver="5">
					<body>
						<![CDATA[this.BottomPanel.FileType.SelectedIndex == 4]]>
					</body>
				</do-trace>
				<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
				<init target="ChangeFolderAllowed" ver="5">
					<expr>
						<![CDATA[here.private.pPermissions.FileSystemAccess]]>
					</expr>
				</init>
				<init target="CreateFolderAllowed" ver="5">
					<expr>
						<![CDATA[here.private.pPermissions.FileSystemAccess]]>
					</expr>
				</init>
				<init target="DefaultPath" ver="5">
					<expr>
						<![CDATA[here.private.GetExportPath()]]>
					</expr>
				</init>
				<init target="RootPath" ver="5">
					<expr>
						<![CDATA[here.private.GetExportPathRoot()]]>
					</expr>
				</init>
			</object>
		</do-on>
		<object access-modifier="private" name="OpenFile" display-name="OpenFile" uuid="530057b7-070b-4839-b18e-cea08442f805" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[if (DialogResult.FileType == unit.Const.ftJTSL || DialogResult.FileType == unit.Const.ftJSON)
{
	// Загрузка списка сигналов
	LoadSignalsList(DialogResult.FilePath);
}
else if (DialogResult.FileType==unit.Const.ftAVZ || DialogResult.FileType==unit.Const.ftZIP || DialogResult.FileType==unit.Const.ftCSV)
{
	// Загрузка данных из файла
	LoadFromFile(DialogResult.FilePath);
}

// запоминаем выбор типа файла
if (FileType != DialogResult.FileType)
{
	FileType = DialogResult.FileType;
	pOnViewChanged.Invoke();
}

// запоминаем папку экспорта
if (private.pSettings.ExportFolder != DialogResult.FolderPath)
{
	private.pSettings.ExportFolder = DialogResult.FolderPath;
	pOnSettingsChanged.Invoke();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="FileType" display-name="FileType" uuid="3bbf8512-13da-499f-aaa9-855e8fbd2b5c" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<object access-modifier="private" name="DialogResult" display-name="DialogResult" uuid="2d330a37-92d5-41f4-8ba4-63aca75d4065" base-type="FileDialogResult" base-type-id="602926f1-7d01-4d50-a5c0-d8fd35eadc74" ver="5"/>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="Invoked">
			<body kind="om">
				<![CDATA[Files.CreateRecursiveFolder(private.GetExportPath());]]>
			</body>
		</do-on>
		<object access-modifier="private" name="ShowFileSettingsDialog" display-name="ShowFileSettingsDialog" uuid="5f500b76-f632-4181-b971-fa742b2d9476" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
				<object access-modifier="private" uuid="f630a07e-5463-476c-bf6c-7b9e8b9512c1" base-type="Trends_OpenFileSettings" base-type-id="e5694de9-ff21-400b-aede-1c9fde7450ea" ver="5">
					<init target="pSettings" ver="5" ref="here.private.pSettings"/>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
					<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
					<init target="pOnComplete" ver="5" ref="here.pOnSettingsChanged"/>
				</object>
			</do-on>
		</object>
	</object>
	<object access-modifier="private" name="ShowSaveDialog" display-name="ShowSaveDialog" uuid="fe08c1d3-d503-46d9-8211-ad295031cb9f" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
			<object access-modifier="private" uuid="a22a94cd-4ee7-42e7-a8f0-7fbbc3df481b" base-type="SaveFileDialog" base-type-id="d69a91c3-89e9-4e7b-994e-9242dbc5e095" ver="5">
				<init target="EditSettingsAllowed" ver="5" value="false"/>
				<init target="OnComplete" ver="5" ref="SaveFile"/>
				<init target="FileTypeFilter" ver="5" value="Список сигналов (*.jtsl)|*.jtsl|Архив с данными (*.avz)|*.avz"/>
				<init target="Result" ver="5" ref="DialogResult"/>
				<init target="DefaultFileType" ver="5" ref="FileType"/>
				<init target="DefaultFileName" ver="5">
					<expr>
						<![CDATA[ActiveMode == 0 && FileType == 1 ? "trends" + DateTime.ToString(DateTime.Now(), "%d_%m_%Y_%H_%M_%S") + ".avz" : ""]]>
					</expr>
				</init>
				<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
				<init target="ChangeFolderAllowed" ver="5">
					<expr>
						<![CDATA[here.private.pPermissions.FileSystemAccess]]>
					</expr>
				</init>
				<init target="CreateFolderAllowed" ver="5">
					<expr>
						<![CDATA[here.private.pPermissions.FileSystemAccess]]>
					</expr>
				</init>
				<init target="RootPath" ver="5">
					<expr>
						<![CDATA[here.private.GetExportPathRoot()]]>
					</expr>
				</init>
				<init target="DefaultPath" ver="5">
					<expr>
						<![CDATA[here.private.GetExportPath()]]>
					</expr>
				</init>
			</object>
		</do-on>
		<object access-modifier="private" name="SaveFile" display-name="SaveFile" uuid="071db690-4dec-4e50-8a1d-390387e7f1e8" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[if (DialogResult.FileType == 0)
{	
	// Сохранение списка сигналов
	SaveSignalsList(DialogResult.FilePath);
}
else if (DialogResult.FileType == 1)
{								
	// Сохранение данных
	SaveToFile(DialogResult.FilePath);
}

// запоминаем выбор типа файла
if (FileType != DialogResult.FileType)
{
	FileType = DialogResult.FileType;
	pOnViewChanged.Invoke();
}

// запоминаем папку экспорта
if (private.pSettings.ExportFolder != DialogResult.FolderPath)
{
	private.pSettings.ExportFolder = DialogResult.FolderPath;
	pOnSettingsChanged.Invoke();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="FileType" display-name="FileType" uuid="1e89f1a6-296a-43ee-aba9-f1e4447ed10c" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<object access-modifier="private" name="DialogResult" display-name="DialogResult" uuid="73f25b32-18c6-42f4-acc5-58bbfef28ee0" base-type="FileDialogResult" base-type-id="602926f1-7d01-4d50-a5c0-d8fd35eadc74" ver="5"/>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="Invoked">
			<body kind="om">
				<![CDATA[Files.CreateRecursiveFolder(private.GetExportPath());]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="Enabled" ver="5">
			<body>
				<![CDATA[Params.LinesCount > 0]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="ShowExportDialog" display-name="ShowExportDialog" uuid="22851447-2afe-4282-b505-1d4485bd7173" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
			<object access-modifier="private" uuid="53e39b5f-fee8-4bbe-b5e8-f13c19fa173b" base-type="SaveFileDialog" base-type-id="d69a91c3-89e9-4e7b-994e-9242dbc5e095" ver="5">
				<init target="OnComplete" ver="5" ref="StartExport"/>
				<init target="Result" ver="5" ref="DialogResult"/>
				<init target="FileTypeFilter" ver="5">
					<expr>
						<![CDATA[here.private.GetExportFileFilter()]]>
					</expr>
				</init>
				<init target="DefaultFileType" ver="5" ref="FileType"/>
				<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
				<init target="ChangeFolderAllowed" ver="5">
					<expr>
						<![CDATA[here.private.pPermissions.FileSystemAccess]]>
					</expr>
				</init>
				<init target="CreateFolderAllowed" ver="5">
					<expr>
						<![CDATA[here.private.pPermissions.FileSystemAccess]]>
					</expr>
				</init>
				<init target="RootPath" ver="5">
					<expr>
						<![CDATA[here.private.GetExportPathRoot()]]>
					</expr>
				</init>
				<init target="DefaultPath" ver="5">
					<expr>
						<![CDATA[here.private.GetExportPath()]]>
					</expr>
				</init>
			</object>
		</do-on>
		<object access-modifier="private" name="FileType" display-name="FileType" uuid="13d1a585-0903-4786-bab5-2d724e055c7b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="DialogResult" display-name="DialogResult" uuid="1ac72d1a-a432-41cf-9535-fcd1a650ce53" base-type="FileDialogResult" base-type-id="602926f1-7d01-4d50-a5c0-d8fd35eadc74" ver="5"/>
		<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="Invoked">
			<body kind="om">
				<![CDATA[Files.CreateRecursiveFolder(private.GetExportPath());]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="Enabled" ver="5">
			<body>
				<![CDATA[Params.LinesCount > 0]]>
			</body>
		</do-trace>
		<object access-modifier="private" name="StartExport" display-name="StartExport" uuid="87cc4c20-3377-4535-bb93-eca065c83a2f" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[Exporter.StartExport(DialogResult.FilePath);

// запоминаем выбор типа файла
if (FileType != DialogResult.FileType)
{
	FileType = DialogResult.FileType;
	pOnViewChanged.Invoke();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="Exporter" display-name="Exporter" uuid="229ba288-9734-4c39-a63f-788b2fc51e79" base-type="Trends_Exporter" base-type-id="0ef355d8-dbf1-4bae-bc8a-c8cbf5f0598e" ver="5" description="" cardinal="1">
			<init target="init_Chart" ver="5" ref="Chart"/>
			<init target="pChart" ver="5" ref="here"/>
			<object access-modifier="private" name="Finished" display-name="Finished" uuid="8ea53973-b8b6-4a98-a50f-3e24be3ef34b" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[filePath: string = Exporter.GetEventParam(0);
error: string = Exporter.GetEventParam(1);

here.private.EventParams[0] = filePath;
here.private.EventParams[1] = error;
here.pOnTableExport.Invoke();

// уведомляем о том, как сохранение выполнено
if (error == "")
{
	here.private.ShowComplete.message = "Табличные данные сохранены в файл\n" + filePath;
	here.private.ShowComplete.Invoke();
}
else
{
	here.private.ShowError.message = "Ошибка сохранения табличных данных в файл\n" + filePath + "\n" + error;
	here.private.ShowError.Invoke();
}]]>
					</body>
				</do-on>
			</object>
			<init target="pExportFinished" ver="5" ref="Finished"/>
			<init target="pTheme" ver="5" ref="here.init_Theme"/>
		</object>
	</object>
	<object access-modifier="private" name="ShowPrintDialog" display-name="ShowPrintDialog" uuid="5be65705-d062-4654-8a39-4f3fa8de61ff" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
			<object access-modifier="private" uuid="ee567c1f-a7ac-4673-a340-7e0afb373fb1" base-type="Trends_Print" base-type-id="9ea85c57-5943-4aa2-a7c6-3e8b12cba954" ver="5">
				<init target="pOnPrint" ver="5" ref="here.pOnPrint"/>
				<init target="pOnPrintPreview" ver="5" ref="here.pOnDoPrintSettings"/>
				<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				<init target="pChart" ver="5" ref="here"/>
				<init target="pOnClosed" ver="5" ref="here.pOnSettingsChanged"/>
				<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
				<init target="pPermissions" ver="5" ref="here.private.pPermissions"/>
				<init target="pSettings" ver="5" ref="here.private.pSettings"/>
				<init target="pTemplates" ver="5" ref="here.private.pTemplates"/>
			</object>
		</do-on>
	</object>
	<object access-modifier="private" name="OpenDataTable" display-name="OpenDataTable" uuid="023f2aae-21af-4c1d-b534-ca009ab0ad22" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
			<object access-modifier="private" uuid="6b466609-7f2f-4c0d-9c8d-b482fad6e5c7" base-type="Trends_Table" base-type-id="2eaa655b-e7df-43ce-a704-693e19fb182e" ver="5">
				<init target="init_Chart" ver="5" ref="here"/>
				<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
				<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
				<init target="pSettings" ver="5" ref="here.private.pSettings"/>
				<init target="pPermissions" ver="5" ref="here.private.pPermissions"/>
				<init target="pTemplates" ver="5" ref="here.private.pTemplates"/>
			</object>
		</do-on>
		<do-trace access-modifier="private" target="Enabled" ver="5">
			<body>
				<![CDATA[Params.LinesCount > 0]]>
			</body>
		</do-trace>
		<object access-modifier="private" name="Settings" display-name="Settings" uuid="72bb962f-5f83-4223-a06b-a297c6b63827" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
	</object>
	<do access-modifier="private" name="ConvertUnits" display-name="ConvertUnits" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[//Debug.Log("Convert " + itemIndexes + " lines to " + altUnit);

var selItems;
if (itemIndexes == "")
{
	// если индексы линий не указаны, то применяем функцию ко всем используемым линиям
	let i = 1;
	selItems = [];
	while (i < unit.Const.MAX_LINES)
	{
		if (Params.Lines[i].Used)	
			selItems.push(i);
		i += 1;
	}
}
else
	selItems = JSON.parse(itemIndexes);

if (altUnit != "")
{
	let unitConvert = JSON.parse(private.pSettings.UnitConversion);
	for (let i in unitConvert)
	{
		// ищем преобразование к целевым единицам
		if (unitConvert[i].dstUnit == altUnit)
		{
			for (let j of selItems)
			{		
				//	если предобразование подходит для исходных единиц		
				if (Params.Lines[j].Unit == unitConvert[i].srcUnit)
				{
					Params.Lines[j].AltUnit = altUnit;
					Params.Lines[j].Ratio = unitConvert[i].Ratio ?? 1;
					Params.Lines[j].Offset = unitConvert[i].Offset ?? 0;
				}
			}
		}
	}
}

// если целевые единицы измерения не заданы или совпадают с исходными единицами, то сбрасываем коэффициенты
for (let j of selItems)
{
	if (Params.Lines[j].AltUnit != "" && (altUnit == "" || Params.Lines[j].Unit == altUnit))
	{
		Params.Lines[j].AltUnit = "";
		Params.Lines[j].Ratio = 1;
		Params.Lines[j].Offset = 0;
	}
}

Lines.Update();
Legend.Update();
ConvertUnitsMenu.Update();]]>
		</body>
		<param access-modifier="private" name="altUnit" display-name="" uuid="bb24b294-3902-436f-831a-efaf49e2204d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="itemIndexes" display-name="" uuid="9b6a2592-13a5-4c83-854b-085b73c2ad83" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<object access-modifier="private" name="ConvertUnitsMenu" display-name="ConvertUnitsMenu" uuid="aea1ace9-c74b-4087-8318-4c34df71d751" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1">
		<do access-modifier="private" name="Get" display-name="Get" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var selItems;
if (itemIndexes == "")
{
	// если индексы линий не указаны, то применяем функцию ко всем используемым линиям
	let i = 1;
	selItems = [];
	while (i < unit.Const.MAX_LINES)
	{
		if (Params.Lines[i].Used)	
			selItems.push(i);
		i += 1;
	}
}
else
	selItems = JSON.parse(itemIndexes);

let unitConvert = JSON.parse(private.pSettings.UnitConversion);

let dstUnits = new Map();
let bNeedSetDefault = false;

// Определяем потребность в элементах таблицы преобразования и элементе востановления
for (let i of selItems)
{
	let originalUnit = Params.Lines[i].Unit;
	if (originalUnit != "")
	{
		if (Params.Lines[i].AltUnit != "")	
			bNeedSetDefault = true;
	
		// к исходной единице измерения можно вернуться
		let active = dstUnits.get(originalUnit) ?? false;
		dstUnits.set(originalUnit, active || Params.Lines[i].AltUnit != "");
	
		for (let j in unitConvert)
		{
			if (unitConvert[j].srcUnit == originalUnit)
			{
				// можно преобразовать к другой единице, если уже не преобразовано
				let active = dstUnits.get(unitConvert[j].dstUnit) ?? false;
				dstUnits.set(unitConvert[j].dstUnit, active || unitConvert[j].dstUnit != Params.Lines[i].AltUnit);
			}
		}
	}
}

// Формирование списка элементов преобразования
let menuItems = [];
for (const [unit, active] of dstUnits)		
	menuItems.push({ 'id': "convert_" + unit, 'title': unit, 'active': active });

// Добавление элемента восстановления исходных единиц
if (bNeedSetDefault)
{
	menuItems.push({ 'title': "-" });
	menuItems.push({ 'id': "convert_", 'title': "Исходные единицы измерения" });
}

return JSON.stringify(menuItems);]]>
			</body>
			<param access-modifier="private" name="itemIndexes" display-name="" uuid="fdaa5cab-619c-4365-bf69-b2c62b9013fa" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// обновляем меню конвертации единиц измерения
Value = Get("");]]>
			</body>
		</do>
	</object>
	<init target="ConvertUnitsMenu" ver="5" value="[]"/>
	<object access-modifier="private" name="Legend" display-name="Legend" uuid="8f431254-6314-463a-a070-f6128f928cba" base-type="Trends_Legend" base-type-id="12a9628e-5f57-42ef-afe7-6a7cf5b34b8d" ver="5">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="54" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Width" value="800" ver="5"/>
		<designed target="Height" value="150" ver="5"/>
		<object access-modifier="private" name="SwitchVisible" display-name="SwitchVisible" uuid="22829e54-5736-4ebf-ad2b-edf195f90bab" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[here.ShowLegend = !here.ShowLegend;]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="RowsChanged" display-name="RowsChanged" uuid="c39406c6-dfec-4d4d-9750-68790e0f9e96" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[UpdateHeight();]]>
				</body>
			</do-on>
		</object>
		<init target="pOnRowsChanged" ver="5" ref="RowsChanged"/>
		<do-trace access-modifier="private" target="ShowMilliseconds" ver="5">
			<body>
				<![CDATA[here.ShowMilliseconds]]>
			</body>
		</do-trace>
		<object access-modifier="private" name="Autosize" display-name="Autosize" uuid="96dfe16b-244c-402e-b184-217e4feadd1d" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
		<init target="Autosize" ver="5" value="true"/>
		<do-trace access-modifier="private" target="ShowRelativeTag" ver="5">
			<body>
				<![CDATA[here.ShowRelativeTag]]>
			</body>
		</do-trace>
		<init target="init_Theme" ver="5" ref="here.init_Theme"/>
		<init target="init_ScreenKeyboard" ver="5" ref="here.init_ScreenKeyboard"/>
		<init target="pChart" ver="5" ref="here"/>
		<object access-modifier="private" name="DoOnMouseRightRelease" display-name="DoOnMouseRightRelease" uuid="4e1fa62e-f0b8-4cd7-aee8-2f248ab42734" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[here.private.EventParams[0] = parent.GetEventParam(0);
here.private.EventParams[1] = parent.GetEventParam(1);
here.pOnLegendMouseRightRelease.Invoke();]]>
				</body>
			</do-on>
		</object>
		<init target="pOnMouseRightRelease" ver="5" ref="DoOnMouseRightRelease"/>
		<object access-modifier="private" name="DragNDrop_1" display-name="DragNDrop_1" uuid="6bfe4742-ff30-4562-90b7-cf12db9579ec" base-type="DragNDrop" base-type-id="c4ddb32f-3653-44c8-be57-3a595e10c2fb" ver="5">
			<designed target="DragEnabled" value="true" ver="5"/>
			<designed target="DropEnabled" value="true" ver="5"/>
			<designed target="Image" value="" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnDrop">
				<body kind="om">
					<![CDATA[
here.private.ItemsAddByJson(data.GetText(), 0);
]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="OpenGraphicSettings" display-name="OpenGraphicSettings" uuid="cc64b598-14ee-4d28-9cbe-90506bf173cd" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="1890904f-e895-4fad-8e4e-180999dd03f7" base-type="Trends_GraphicSettings" base-type-id="7f88133f-deaf-4376-a13d-a52efda68de5" ver="5">
					<init target="pOnComplete" ver="5" ref="OnComplete"/>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
					<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
					<init target="pChart" ver="5" ref="here"/>
					<init target="pColorDialogResult" ver="5" ref="ColorDialogResult"/>
				</object>
			</do-on>
			<object access-modifier="private" name="OnComplete" display-name="OnComplete" uuid="a4072568-342b-4232-a970-143c89f26648" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[if (here.private.pSettings.CustomColors != ColorDialogResult.CustomColors)
{
	here.private.pSettings.CustomColors = ColorDialogResult.CustomColors;
	pOnSettingsChanged.Invoke();
}

UpdateItem(SelectedItem);]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="ColorDialogResult" display-name="ColorDialogResult" uuid="2e64873c-0704-47c1-bb42-8789ef2f826d" base-type="ColorDialogResult" base-type-id="b51f78e4-f30c-411b-9a81-b57ef602013a" ver="5" description="" cardinal="1"/>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[ColorDialogResult.CustomColors = here.private.pSettings.CustomColors;]]>
				</body>
			</do-on>
		</object>
		<init target="pOnDoubleClick" ver="5" ref="OpenGraphicSettings"/>
		<object access-modifier="private" name="SizeLimits" display-name="SizeLimits" uuid="f1ee6f37-c658-4636-a6b5-6145bf441ff7" base-type="LayoutSizeLimits" base-type-id="10342c1f-560b-4160-9de5-7e2c08026f47" ver="5" description="" cardinal="1">
			<designed target="MinWidth" value="0" ver="5"/>
			<designed target="MinHeight" value="150" ver="5"/>
			<designed target="MaxWidth" value="16777215" ver="5"/>
			<designed target="MaxHeight" value="150" ver="5"/>
			<do-trace access-modifier="private" target="MinHeight" ver="5">
				<body>
					<![CDATA[Splitter.Position]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="MaxHeight" ver="5">
				<body>
					<![CDATA[Splitter.Position]]>
				</body>
			</do-trace>
		</object>
		<do-trace access-modifier="private" target="Visible" ver="5">
			<body>
				<![CDATA[ShowLegend]]>
			</body>
		</do-trace>
		<do access-modifier="private" name="UpdateHeight" display-name="UpdateHeight" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (Autosize)
{
	lines: int4 = View.GetRowCount();
	if (lines < 1)
		lines = 1;	
	else if (MaxLineLegendShow > 0 && lines > MaxLineLegendShow)
		lines = MaxLineLegendShow;
		
	legendHeight: double = (View.HeaderHeight + 2) + lines * (View.RowHeight + 2) + 18;
		
	if (Splitter.Position != legendHeight)
	{
		Splitter.Position = legendHeight;
		//Debug.Log("Legend auto update height to " + String.ToString(Splitter.Position) + " for " + String.ToString(lines) + " lines");
	}
}]]>
			</body>
		</do>
		<init target="pOnViewChanged" ver="5" ref="here.private.NotifyViewChanged"/>
	</object>
	<init target="ShowLegend" ver="5" value="false"/>
	<init target="MaxLineLegendShow" ver="5" value="4"/>
	<init target="ShowFullDescription" ver="5" value="false"/>
	<init target="ShowRelativeTag" ver="5" value="false"/>
	<object access-modifier="private" name="ChartPrint" display-name="ChartPrint" uuid="23abe4a1-7aa8-4892-b582-96f9fcb348af" base-type="Print" base-type-id="da4ac71d-92b8-427c-9ef0-5c6cb681ae96" ver="5" description="" cardinal="1">
		<designed target="Area" value="0" ver="5"/>
	</object>
	<do access-modifier="private" name="ShowPrintPreview" display-name="ShowPrintPreview" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[pOnDoPrintSettings.Invoke();
ChartPrint.PrintPreviewDialog();
]]>
		</body>
	</do>
	<do access-modifier="private" name="Print" display-name="Print" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[pOnPrint.Invoke();
ChartPrint.Print();]]>
		</body>
	</do>
	<object access-modifier="private" name="SaveScreenshot" display-name="SaveScreenshot" uuid="aba641a5-c043-42df-8f98-8fc2770f4949" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
			<body kind="om">
				<![CDATA[// Делаем скриншот трендов и легенды
if (Screenshot.ShotRegion(here.ScreenX(0, 0), here.ScreenY(0, 0), TypeConvert.ToInt4(here.Width), TypeConvert.ToInt4(here.Height)))
{
	// Предлагаем сохранить
	ShowSaveDialog.Invoke();
}
else
{
	private.EventParams[0] = "Не удалось подготовить текущее изображение";
	pOnError.Invoke();
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="ShowSaveDialog" display-name="ShowSaveDialog" uuid="8ca6dc11-9105-4c8f-b9a1-dac4b8a0ebe7" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
				<object access-modifier="private" uuid="e29c750d-e5b3-40f2-980d-bf6f9d4e3c0f" base-type="SaveFileDialog" base-type-id="d69a91c3-89e9-4e7b-994e-9242dbc5e095" ver="5">
					<init target="EditSettingsAllowed" ver="5" value="false"/>
					<init target="OnComplete" ver="5" ref="SaveFile"/>
					<init target="FileTypeFilter" ver="5" value="PNG (*.png)|*.png"/>
					<init target="Result" ver="5" ref="DialogResult"/>
					<init target="init_Theme" ver="5" ref="here.private.pTheme"/>
					<init target="init_ScreenKeyboard" ver="5" ref="here.private.pScreenKeyboard"/>
					<init target="ChangeFolderAllowed" ver="5">
						<expr>
							<![CDATA[here.private.pPermissions.FileSystemAccess]]>
						</expr>
					</init>
					<init target="CreateFolderAllowed" ver="5">
						<expr>
							<![CDATA[here.private.pPermissions.FileSystemAccess]]>
						</expr>
					</init>
					<init target="RootPath" ver="5">
						<expr>
							<![CDATA[here.private.GetExportPathRoot()]]>
						</expr>
					</init>
					<init target="DefaultPath" ver="5">
						<expr>
							<![CDATA[here.private.GetExportPath()]]>
						</expr>
					</init>
				</object>
			</do-on>
			<object access-modifier="private" name="DialogResult" display-name="DialogResult" uuid="41a4d9a6-83b9-47ed-b489-989fc597c5b7" base-type="FileDialogResult" base-type-id="602926f1-7d01-4d50-a5c0-d8fd35eadc74" ver="5"/>
			<object access-modifier="private" name="SaveFile" display-name="SaveFile" uuid="45214c74-3e72-4cac-a159-3fb7d6e7b6ef" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[filePath: string = DialogResult.FilePath.Value;
error: string;

if (!Screenshot.Save(filePath))
	error = "Не удалось сохранить в файл";
	
Screenshot.Clear();

// запоминаем папку экспорта
if (private.pSettings.ExportFolder != DialogResult.FolderPath)
{
	private.pSettings.ExportFolder = DialogResult.FolderPath;
	pOnSettingsChanged.Invoke();
}

// уведомляем о том, как сохранение выполнено
if (error == "")
{
	private.ShowComplete.message = "Текущее изображение сохранено в файл\n" + filePath;
	private.ShowComplete.Invoke();
}
else
{
	private.ShowError.message = "Не удалось сохранить текущее изображение в файл\n" + filePath;
	private.ShowError.Invoke();
}

NotifyResult(filePath, error);]]>
					</body>
				</do-on>
			</object>
			<do access-modifier="private" name="NotifyResult" display-name="NotifyResult" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[private.EventParams[0] = filePath;
private.EventParams[1] = error;
pOnScreenSave.Invoke();]]>
				</body>
				<param access-modifier="private" name="filePath" display-name="" uuid="3ee4fb84-459f-4eff-92de-228429620287" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				<param access-modifier="private" name="error" display-name="" uuid="1847fa2d-6e94-4e3f-8b8c-766610579f9e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</do>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[Files.CreateRecursiveFolder(here.private.GetExportPath());]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="Screenshot" display-name="Screenshot" uuid="0a9806f3-f20f-4499-b274-e8858f1af8fb" base-type="Screenshot" base-type-id="ee8cdf0b-f2a3-445d-94f7-d61c8ba6f853" ver="5"/>
	</object>
</type>

