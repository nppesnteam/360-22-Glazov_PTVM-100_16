<object access-modifier="private" name="Alarms_Tools" display-name="Alarms_Tools" uuid="b4eed7e3-cdcc-4def-b039-80126c758594" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5" description="" cardinal="1">
	<do access-modifier="private" name="JSONstringForFilter" display-name="JSONstringForFilter" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[//Функция преобразует исходную строк в формат JSON: проводит поиск по шаблонам и составляет массив элементов, затем применяется обратная польская запись для определения порядка действий;
//filterType == 0 - на выходе строка будет в формате фильтра отображения, 1 - фильтра запроса;
//source: различаются форматы строки для severity и для time. Все остальные идут как строка символов (например, message);

//Алгоритм следующий:
//1.входная строка делится на аргументы и логические элементы по шаблону elementPattern(логические элементы)
//2.формируется массив из этих элементов, в котором пользовательские лог.операции приводятся к единому формату, преобразуются аргументы в зависимости от типа поля
//3.проверяется наличие ошибок в получившемся массиве
//4.формируется польская запись: определяются веса лог.операций и сортировка массива в соотвествии с аргументами и весами
//5.формируется json-строка из объектов, представляющих из себя массив логической операции, элементами которого являются аргументы. Массивы могут быть вложенными.

// Если строка пустая, выходим
inputString = inputString.trim(); // Удаляем лишние пробелы из входной строки
if (inputString.trim() == "")
	return "";

var resultArray = []; //Массив с аргументами и лог.операторами в формате польской записи
var operatorArray = []; //Массив с лог.операторами с сортировкой по приоритету следования
var gravityPrev = 0;
var gravity = 0;
var prevPrevElem = '';
var prevElem = '';
var commonArray = []; //Массив с элементами, состоящими из элементов входной строки
var elementPattern;
var signPattern;
var argumentPattern;
var formatPattern;
var commonArrayStr;
var operatorPattern;
var tempArray = [];
var stringMode; //Формат выходной строки

try
{
	// Инициализируем шаблон на поиск операторов, чисел и операндов
	switch (source)
	{
		case "severity":
			elementPattern = /(\s*ИЛИ\s*)|(\s*И\s*)|(\s*AND\s*)|(\s*OR\s*)|(\s*\&\s*)|(\s*\|\s*)|(\s*<>\s*)|(\s*!=\s*)|\s*[(]\s*|\s*[)]\s*/gi;//Все доступные пользователю логические операции
			operatorPattern = /^([(]|[)]|[&]|[|]|[!=]|[<>])$/;//Представление логических операций внутри скрипта
			signPattern = /([><=]+)/g;//Знаковые выражения ==, >, <, <=, >=
			argumentPattern = /(-?[0-9]+)/g;//Значение аргумента со знаком
			formatPattern = /^[><=]*-?[0-9]+$/;
			stringMode = 1;
			break;
		case "time":
			elementPattern = /(\s*ИЛИ\s*)|(\s*И\s*)|(\s*AND\s*)|(\s*OR\s*)|(\s*\&\s*)|(\s*\|\s*)|\s*[(]\s*|\s*[)]\s*/gi;
			operatorPattern = /^([(]|[)]|[&]|[|])$/;
			signPattern = /([><=]+)/;
			argumentPattern = /((0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.]\d{4}\s([01]\d|2[0-3])(:[0-5]\d){2}(\.[0-9]{3})+)/;
			formatPattern = /(.*)/;
			stringMode = 2;
			break;
		default:
			elementPattern = /([""]{2}.*?[^"]{1}[^"]{1}[""]{2})|[)]\s*((ИЛИ)|(И)|(НЕ)|(NOT)|(\!)|(\|)|(\&))\s*[(]|( ИЛИ )|( И )|(\s*НЕ )|(\s*NOT )|( \& )|( \| )|(\s*\! )|( \& )|( \| )|[(]|[)]|( )/gi;
			operatorPattern = /^([(]|[)]|[&]|[|]|[!])$/;
			signPattern = /([=]*)/g;
			argumentPattern = /(.*)/;
			formatPattern = /(.*)/;
			stringMode = 0;
			break;
	}
	var arrayPattern = /object/;//Шаблон массива

	// Парсим входную строку по elementPattern и формируем массив всех составляющих строки
	let temp = inputString.replace(/\s\s+/g,' ');//Сокращаем лишние пробелы в строке до одного пробела
	temp = temp.replace(elementPattern,'^$&^'); //Формируем строку, в которых выделены логические операторы, """" и скобки
	commonArray = temp.split("^"); //Формируем массив элементов из полученной строки разделением по ^

	// Преобразуем элементы массива в единую запись (обработка значений времени, числовых и строковых)
	for (let i = 0; i < commonArray.length; i++)
	{
		let index = 0;
		if (commonArray[i] != " ") commonArray[i] = commonArray[i].trim();
		
		if (commonArray[i] == "") index = 1;
		if (/^(И|AND|\&)$/i.test(commonArray[i]) || commonArray[i] == " ") index = 2;
		if (/^(ИЛИ|OR|\|)$/i.test(commonArray[i])) index = 3;
		if (/^(НЕ|NOT)$/i.test(commonArray[i]) && stringMode == 0) index = 4;
		if (/^(!=|<>)$/.test(commonArray[i]) && stringMode == 1) index = 5;
		if (/^([)]|[(])$/.test(commonArray[i])) index = 6;

		switch (index)
		{
			case 1://Удаление пустых элементов
				commonArray.splice(i,1);
				i--;
				break;
			case 2://Обработка логического И
				commonArray[i] = "&";
				break;
			case 3://Обработка логического ИЛИ
				commonArray[i] = "|";
				break;
			case 4://Обработка логического НЕ
				commonArray[i] = "!";
				if (commonArray[i-1] == ")")//Если за скобкой нет логической операции & или |, то по умолчанию добавляем &
				{
					commonArray.splice(i,0,"&");
					i++;
				}
				break;
			case 5://Обработка отрицания для числовых значений
				commonArray[i] = "!";
				if (commonArray[i+1] != "(" && commonArray[i+1] != "") commonArray[i+1] = "==" + commonArray[i+1]; //Добавляем аргументу знак ==
				break;
			case 6:
				break;
			default://Обработка аргумента
				//Только для строковых полей. Избавляемся от ковычек и добавляем к аргументу **
				if (stringMode == 0)
				{
					if (/^"".*""$/.test(commonArray[i])) commonArray[i] = commonArray[i].replace(/^""|""$/g, "");//Избавляемся от двойных ковычек
					if (!operatorPattern.test(commonArray[i])) commonArray[i] = `*${commonArray[i]}*`;//Добавляем аргументам **
					if (commonArray[i-1] == ")")
					{
						commonArray.splice(i,0,"&");
						i++;
					}
				}
				//Только для полей времени. Приводим к единому формату (дата + часы:минуты:секунды.мс). Парсим точное совпадение
				if (stringMode == 2)
				{	
					let addDate = "";
					//Приводим к единому формату (дата + часы:минуты:секунды.мс)
					if (!(argumentPattern.test(commonArray[i])))	
					{
						//Предполагается, что не указаны мс
						addDate = ".000";
						//Проверка, указаны ли секунды
						if (!/(0[1-9]|[12][0-9]|3[01])[- \.](0[1-9]|1[012])[.]\d{4}\s([0-1]\d|2[0-3])(:[0-5]\d){2}/.test(commonArray[i])) addDate = ":00" + addDate;
						//Проверка, указаны ли часы - минуты
						if (!/(0[1-9]|[12][0-9]|3[01])[- \.](0[1-9]|1[012])[.]\d{4}\s([0-1]\d|2[0-3])(:[0-5]\d){1}/.test(commonArray[i])) addDate = " 00:00" + addDate;
						commonArray[i] = commonArray[i] + addDate;
					}
			
					 //Добавляем аргументу знак ==
					if (!(signPattern.test(commonArray[i]))) commonArray[i] = "==" + commonArray[i];
					//Приведение выражения ==21.02.2018 10:50:06.123 к виду : >=21.02.2018 10:50:06.123 И <21.02.2018 10:50:07.124;
					if (/^(={2})\d/.test(commonArray[i]))
					{
						let newDate;
						let timeValue = commonArray[i].replace(signPattern,"");
						//В зависимости от указания формата значения, прибавляем свой отрезок времени
						if (addDate == "") newDate = DataTimeAdd(timeValue, "ms");
						if (addDate == ".000") newDate = DataTimeAdd(timeValue, "sec");
						if (addDate == ":00.000") newDate = DataTimeAdd(timeValue, "min");
						if (addDate == " 00:00:00.000") newDate = DataTimeAdd(timeValue, "day");
						commonArray[i] = ">=" + timeValue;
						commonArray.splice(i+1,0,"&");
						commonArray.splice(i+2,0,"<" + newDate);
						i = i + 2;
					}
				}
				break;
		}
	}

	// На этом этапе парсинг строки окончен. Необходимо представить строку в виде польской записи
	// Проходим поэлементно массив для формирования польской записи
	for (let i = 0; i < commonArray.length; i++)
	{	
		//Если элемент - логический оператор
		if (operatorPattern.test(commonArray[i]))
		{
			gravity = GravityValue(commonArray[i]);
			//В случае, если "("
			if (gravity == 4) 
			{
				operatorArray.push(commonArray[i]);
				continue;
			}
	
			//В случае, если ")" - скобка закрылась
			if (gravity == 5)
			{
				let bracketIndex = operatorArray.lastIndexOf("(", operatorArray.length-1)
				//Операторы, что были в скобках, записываем в результирующий массив
				while (operatorArray.length - 1 != bracketIndex)resultArray.push(operatorArray.pop());
				operatorArray.pop();
			}
		
			//В случае, если предыдущий оператор имеет больший вес - записываем в результирующий массив кроме случае с ()
			if (operatorArray.length != null) gravityPrev = GravityValue(operatorArray[operatorArray.length-1]);
			while (gravityPrev >= gravity && gravityPrev != 4 && gravityPrev != 5 && operatorArray.length != 0)
			{
				resultArray.push(operatorArray.pop());
				gravityPrev = GravityValue(operatorArray[operatorArray.length-1]);
			}
			
			//")" - не записываем
			if (gravity != 5) operatorArray.push(commonArray[i]);
		}
		else resultArray.push(commonArray[i]);
		
		//Если массив кончился - записываем остатки операндов в результирующий массив
		if (i == commonArray.length - 1)
		{
			while (operatorArray.length != 0)
			{
				resultArray.push(operatorArray.pop());
			}
		}
	}
	
	// Формирование JSON-строки
	var jsonStr = "";
	for (let i = 0; i < resultArray.length; i++)
	{
		// Если всего один элемент в массиве, то выводим только это условие
		if (resultArray.length == 1)
			if (!arrayPattern.test(resultArray[i]))
			{
				let expr = MakeExpression(resultArray[i]);
				if (expr != null)
					jsonStr = JSON.stringify(expr);
			}
		
		// Если условий несколько
		if (operatorPattern.test(resultArray[i]) && resultArray.length > 1)
		{
			let operator = resultArray[i].match(/[&]|[|]|[!]/);
			if (operator != null)
			{
				operator = operator[0];
				if (operator == "!")
				{
					operator = "NOT";
					
					//В случае, если есть отрицание, применяем к скобкам или выражению
					if (!arrayPattern.test(resultArray[i-1]))
						prevElem = MakeExpression(resultArray[i-1]);
					else prevElem = resultArray[i-1];
					
					let notExpression = {'NOT': prevElem};					
					resultArray.splice(i-1, 2, notExpression);
					i-= 1;
					
					// записываем выражение в виде строки
					jsonStr = JSON.stringify(notExpression);
				}
				else
				{
					if (operator == "&")
						operator = "AND";
					else if (operator == "|")
						operator = "OR";
					
					// Считываем элемент i-2 и i-1, если это не объекты - преобразуем
					if (!arrayPattern.test(resultArray[i-2]))
						prevPrevElem = MakeExpression(resultArray[i-2]);
					else prevPrevElem = resultArray[i-2];
					if (!arrayPattern.test(resultArray[i-1]))
						prevElem = MakeExpression(resultArray[i-1]);
					else prevElem = resultArray[i-1];
					
					// Создаем объект с именем оператора, который является массивом и заполняем его
					var objectInfo = {};					
					objectInfo[`${operator}`] = [];
					objectInfo[objectInfo[`${operator}`].push(prevPrevElem)];
					objectInfo[objectInfo[`${operator}`].push(prevElem)];
		
					// Заменяем элементы i-2 и i-1 на полученное выражение
					resultArray.splice(i-2, 3, objectInfo);
					i-= 2;
					
					// записываем объект в виде строки					
					jsonStr = JSON.stringify(objectInfo);
				}
			}
		}
	}
	
	if (jsonStr == "" || jsonStr == "null")
		return "Error: Проверьте корректность введенных данных";
	
	//log(jsonStr);
	return jsonStr;
}
catch(err)
{
	//throw err;
	return "Error: " + err.toString();
}

// Функция опеределения веса оператора
function GravityValue(gravity)
{
	switch(gravity)
	{
		case '&':
			gravity = 2;
			break;
		case '|':
			gravity = 1;
			break;
		case '(':
			gravity = 4;
			break;
		case ')':
			gravity = 5;
			break;
		case '!':
			gravity = 3;
			break;
	}
	return gravity;
}
	
// Фукнция получения выражения вида^
// ">": { "data": 10 }" - фильтр отображения
// ">": { "severity": 10 }" - фильтр запроса
// Выбор формата выходного выражения. filterType = 0 - фильтр отображения, 1 - фильтр запроса
function MakeExpression(str)
{
	// проверяем формат
	if (!formatPattern.test(str))
		throw "неверный формат";
	// определяем операцию сравнения
	let operator = str.match(signPattern);
	if (operator == null) operator = "==";
	else if (operator[0] == "=") operator = "=="; // заменяем оператор равенства
	else operator = operator[0];

	// определяем аргумент
	let argument = str.match(argumentPattern);
	if (argument != null)
		argument = argument[0];
	else
	{
		if (stringMode == 1)			
			throw str + " не является числом";
		else if (stringMode == 2)
			throw str + " не является временем";
		else argument = "";
	}
	
	let expression = {};
	switch (stringMode)
	{
		case 1:// Важность
			if (filterType == 0)
				expression = {[operator]: {"data":parseInt(argument)}};
			else expression = {[operator]: {[source]:parseInt(argument)}};
			break;
			
		case 2:// Дата
			// перед нахождением выражения здесь надо преобразовать строку времени в запись вида мм-дд-гг ч:м:с:мс
			argument = StringToDateTime(argument);
			if (filterType == 0)
				expression = {[operator]: {"data":argument}};
			else expression = {[operator]: {[source]:argument}};
			break;
		default://Символы
			if (filterType == 0)
			{
				if (isFormatted)
					expression = {text:argument.toString().trim()};
				else expression = {data:argument.toString().trim()};
			}
			else
				expression = {[source]:argument.toString().trim()};
			break;
	}
	return expression;
}]]>
		</body>
		<param access-modifier="private" name="inputString" display-name="" uuid="cbb85557-a2ef-4e65-9198-bb6312a5379b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
		<param access-modifier="private" name="source" display-name="" uuid="674fdfa3-0ac3-480d-bf88-c078c0b5c027" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
		<param access-modifier="private" name="filterType" display-name="" uuid="ebe6b531-293d-4d55-a649-37f4fda08241" base-type="int1" base-type-id="756a0a23-7e63-4a13-8a35-e8a38909e5ed" ver="3"/>
		<param access-modifier="private" name="isFormatted" display-name="" uuid="26e3e7e2-f8e0-4900-a851-860dce4c2cab" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
	</do>
	<do access-modifier="private" name="DataTimeAdd" display-name="DataTimeAdd" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[//Функция прибавления временного отрезка на 1 у.е.
data: uint8 = DateTime.Parse(inputString);
ms: uint2 = 0;
msString: string;

if (offsetMode == "ms") data = DateTime.AddMSeconds(data, 1);
if (offsetMode == "sec") data = DateTime.AddSeconds(data, 1);
if (offsetMode == "min") data = DateTime.AddMinutes(data, 1);
if (offsetMode == "day") data = DateTime.AddDays(data, 1);

ms = DateTime.MSecond(data);//Для вывода мс
if (ms < 10) msString = ".00";
else if (ms < 100) msString = ".0";
else msString = ".";
msString = String.Concat(msString, String.ToString(ms));

resultStr: string = DateTime.ToString(data);
resultStr = String.Concat(resultStr, msString);
return resultStr;]]>
		</body>
		<param access-modifier="private" name="inputString" display-name="" uuid="5471358b-8538-4c3e-ab6b-26e6bcf0bbac" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		<param access-modifier="private" name="offsetMode" display-name="" uuid="ce07fc9c-5279-46f8-8c4a-737c41551837" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
	</do>
	<do access-modifier="private" name="StringToDateTime" display-name="StringToDateTime" ver="5" type="uint8" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561">
		<body kind="om">
			<![CDATA[str: string = inputString;
time: uint8 = DateTime.Parse(str);
time = DateTime.ToUtc(time);//перевод времени в формат utc
return time;]]>
		</body>
		<param access-modifier="private" name="inputString" display-name="" uuid="f5911c3f-9255-43dc-86c3-fe2f457ea3e1" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
	</do>
	<do access-modifier="private" name="ValidatePath" display-name="ValidatePath" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" form-by-id="true">
		<body kind="javascript">
			<![CDATA[filePath = filePath.trim();
if (filePath == "")
	return "Путь не может быть пустым";

var regex;
if (File.Exists("/opt/")) // проект запущен на ОС Linux?
	regex = /^\/.+[^\/]\/?$/;
else regex = /^[a-z]:\\([^<>:"\/\\|?*]+\\?)*$/i;

var error = (regex.test(filePath)) ? "" : "Неверный формат пути";
//log("ValidatePath '" + filePath + "' - " + error);
return error;]]>
		</body>
		<param access-modifier="private" name="filePath" display-name="" uuid="a676acc3-5a18-4415-8581-25167cb9d7eb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
	</do>
	<object access-modifier="private" name="File" display-name="File" uuid="ecbaa4a5-6070-4960-aa18-3e69996ac4c0" base-type="FileSystem" base-type-id="34d744f9-7303-4077-a3f7-9c06c0945512" ver="2">
		<designed target="RootPath" value="/" ver="3"/>
		<init target="Error" ver="5">
			<object access-modifier="private" uuid="6e219c00-0169-476d-a394-36599a649560" base-type="FileSystemError" base-type-id="38147fa1-a364-43d4-bd0b-07ee8556c2f2" ver="5"/>
		</init>
	</object>
	<do access-modifier="private" name="GapInversion" display-name="GapInversion" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[//Функция реверса интервалов важностей
var numberArray = [];
var tempArray = [];
var informArray = [];
var commonArray = [];
var count = 1;

//Инициализируем шаблоны
//Элемент как диапазон
var gapPattern = /\d+\s?[-]\s?\d+/;

//Переопределяем, если проверка прошла, образуем массив элементов и проверяем дальше
commonArray = str.split(",");

//Проверка на верную запись диапазона чисел, запись его чисел в виде элемента массива
for (let i = 0; i < commonArray.length; i++)
{
	if (gapPattern.test(commonArray[i])) //Если элемент - диапазон чисел, то проверяем его и формируем массив
	{
		tempArray = commonArray[i].match(/\d+/g);
		while (parseInt(tempArray[0]) <= parseInt(tempArray[1]))
		{
			numberArray.push(parseInt(tempArray[0]));
			tempArray[0] = parseInt(tempArray[0])+1;
		}
	}
	else numberArray.push(parseInt(commonArray[i]));
	tempArray = [];
}

//Дальше идет генерация важностей информационных сообщений
//Заполняем значения важности информационных сообщения
for (let i = 1; i < 1001; i++)
{
	informArray.push(i);
}

//Оставляем в массие все, что не входит в входной массив
informArray = informArray.filter(x=>!numberArray.includes(x));

//Запись элементов в виде диапазона, если они образуют арифметическую прогрессию(сокращение записи)
if (informArray != null)
{
	for (let i = 0; i < informArray.length; i++)
	{
		while (parseInt(informArray[i])+count == parseInt(informArray[i+count]))
		{
			count++;
		}
		if (count > 2)
		{
			informArray[i] = informArray[i] + "-" + informArray[i+count-1];
			informArray.splice(i+1,count-1);
		}
		count = 1;
	}
}

return informArray.toString();
]]>
		</body>
		<param access-modifier="private" name="str" display-name="" uuid="dba05eb8-dd5d-4620-9f9b-e5ef1ca18d67" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="SeverityJSONtoString" display-name="SeverityJSONtoString" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[//Функция преобразования JSON объекта в строку для важностей: например, 1,2-5
//Умеет парсить, например, это:
//{"OR":[{"severity":8},{"AND":[{">=":{"severity":100}},{"<=":{"severity":150}}]}]}
//{"severity":100}
//{"AND":[{">=":{"severity":100}},{"<=":{"severity":105}}]}
var obj = inputStr;
var strOut = "";
if (obj != "") obj = JSON.parse(obj); //Проверяем наличие в JSON-строке элементов
else return strOut;

if (obj.OR != undefined)
{
	for (let i = 0; i < obj.OR.length; i++)
	{
		if (obj.OR[i].AND != undefined)
		{
			for (let j = 0; j < obj.OR[i].AND.length; j++)
			{
				if (strOut != "") strOut += ",";
				if (obj.OR[i].AND[j][">="] != undefined) 
				{
					strOut += obj.OR[i].AND[j][">="]["severity"] + "-" + obj.OR[i].AND[j+1]["<="]["severity"];
					j++;
				}
			}
		}
		else
		{
			if (strOut != "") strOut += ",";
		 	strOut += obj.OR[i].severity;
		}
	}
}
if (obj.AND != undefined)
{
	for (let j = 0; j < obj.AND.length; j++)
	{
		if (strOut != "") strOut += ",";
		if (obj.AND[j].severity != undefined) strOut += obj.AND[j].severity;
		if (obj.AND[j][">="] != undefined) 
		{
			strOut += obj.AND[j][">="]["severity"] + "-" + obj.AND[j+1]["<="]["severity"];
			j++;
		}
	}
}

if (obj.severity != undefined && obj.severity != 0) strOut += obj.severity; //Если в JSON-строке только одно число
//log(strOut);
return strOut;
]]>
		</body>
		<param access-modifier="private" name="inputStr" display-name="" uuid="ceaa44b0-2fe7-4ad9-b386-71f5a5679ae2" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
	</do>
	<do access-modifier="private" name="GapToJSON" display-name="GapToJSON" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[//Функция преобразует gap строку (5,50-60) в формат JSON
//определяются логические операторы и происходит поэтапное формирование логических выражений из элементов массива и происходит формирование строки в JSON формате

//Если пустая строка, то возвращаем "0" для того, чтобы в очередь не попадали значения //иначе на выходе будет тоже пусто и в очереди не будет фильтра?
//if (inputString == "") return '{"severity": 0 }';

//Шаблон диапазона
var gapPattern = /\d+[-]\d+/;

//Заполняем массив символами строки
var commonArray = inputString.split(",");

//Фукнция получения выражения вида ">": { "severity": 10 }"
function MakeExpression(str,gap)
{
	let argument = str.match(/\d+/g);
	let expression = {};
	//Если имеем дело с диапазоном
	if (argument==null || argument.length==0) expression = {'severity':0};
	else if (gap != "") expression = {[gap]: {'severity':parseInt(argument[0])}};
	else expression = {'severity':parseInt(argument[0])};
	return expression
}

//Если элемент всего один и не диапазон
if (commonArray.length == 1 && !gapPattern.test(commonArray[0])) 
	return JSON.stringify(MakeExpression(commonArray[0],""));

var objectInfo = {};
var tempArray = [];
//Формирование JSON-строки
for (let i = 0; i < commonArray.length; i++)
{
	let tempObject = {};
	tempObject[`AND`] = [];
	if (gapPattern.test(commonArray[i]))
	{
		tempArray = commonArray[i].match(/\d+/g);
		tempObject[`AND`].push(MakeExpression(tempArray[0],">="));
		tempObject[`AND`].push(MakeExpression(tempArray[1],"<="));
		if (commonArray.length > 1)
		{
			if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
			objectInfo[`OR`].push(tempObject);
		}
		else objectInfo = tempObject;
	}
	else
	{
		if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
		objectInfo[`OR`].push(MakeExpression(commonArray[i],""));
	}
}

//записываем объект в виде строки
return JSON.stringify(objectInfo);
]]>
		</body>
		<param access-modifier="private" name="inputString" display-name="" uuid="baf2176c-6cb4-4e8c-98ca-0b20f4885df6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="BuildJsonFilterFromAdvanced" display-name="BuildJsonFilterFromAdvanced" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[
// Формирование JSON-строки
jsonFilter: string;
if (ColumnID == "group" || ColumnID == "ack" || ColumnID == "active" || ColumnID == "ack_required" || ColumnID == "kind")//фильтрация по отображаемому тексту
{
	jsonFilter = Alarms_Tools.JSONstringForFilter(FilterExpr,"message",0,true);
}
else if (ColumnID == "severity" || ColumnID == "quality" || ColumnID == "value" || ColumnID == "cookie" || ColumnID == "object_id")//фильтрация по числовому значению
{
	jsonFilter = Alarms_Tools.JSONstringForFilter(FilterExpr,"severity",0,false);
}
else if (ColumnID == "time" || ColumnID == "active_time" || ColumnID == "prev_active_time" || ColumnID == "deactive_time" || ColumnID == "ack_time")//фильтрация по времени
{ 
	jsonFilter = Alarms_Tools.JSONstringForFilter(FilterExpr,"time",0,false);
}
else//message,source,actor_id,ack_comment,area_path //фильтрация по строковому значению
	jsonFilter = Alarms_Tools.JSONstringForFilter(FilterExpr,"message",0,false);

return jsonFilter;]]>
		</body>
		<param access-modifier="private" name="ColumnID" display-name="" uuid="79a75199-b354-4645-97f7-897433e0c458" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="FilterExpr" display-name="" uuid="c9e9d3e4-468e-4974-8b3a-90bce30f31ab" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Flip" value="0" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="100" ver="5"/>
	<designed target="Height" value="100" ver="5"/>
	<designed target="RoundingRadius" value="0" ver="5"/>
	<designed target="PenColor" value="4278190080" ver="5"/>
	<designed target="PenStyle" value="1" ver="5"/>
	<designed target="PenWidth" value="1" ver="5"/>
	<designed target="BrushColor" value="4278190080" ver="5"/>
	<designed target="BrushStyle" value="0" ver="5"/>
	<object access-modifier="private" name="TestTable" display-name="TestTable" uuid="baa330ba-95e4-4bbd-8853-524c37a7f99d" base-type="Table" base-type-id="c65ff4dc-f22b-47d3-9333-72c4e4e5f662" ver="3">
		<designed target="X" value="0" ver="3"/>
		<designed target="Y" value="0" ver="3"/>
		<designed target="Rotation" value="0" ver="3"/>
		<designed target="Scale" value="1" ver="3"/>
		<designed target="Visible" value="false" ver="3"/>
		<designed target="Enabled" value="true" ver="3"/>
		<designed target="Width" value="10" ver="3"/>
		<designed target="Height" value="10" ver="3"/>
		<designed target="HeaderHeight" value="21" ver="3"/>
		<designed target="HeaderVisible" value="false" ver="3"/>
		<designed target="RowHeight" value="30" ver="3"/>
		<designed target="RowOrder" value="0" ver="3"/>
		<designed target="SelectionBehavior" value="0" ver="3"/>
		<designed target="SelectionMode" value="3" ver="3"/>
		<designed target="SelectionOverlayEnabled" value="true" ver="3"/>
		<designed target="LatestRowTracking" value="false" ver="3"/>
		<init target="TableModel" ver="5">
			<object access-modifier="private" uuid="858eb249-a78a-4117-9d54-f9faf3d62018" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
				<designed target="Frozen" value="false" ver="3"/>
				<designed target="MaxRowCount" value="2147483647" ver="3"/>
			</object>
		</init>
		<object access-modifier="private" name="TestColumn" display-name="TestColumn" uuid="021322d3-bada-4755-a93d-50bc97932eb8" base-type="TableColumn" base-type-id="109c05c5-8dcf-4a8f-aedd-5bb547cca2d4" ver="3">
			<designed target="Title" value="" ver="3"/>
			<designed target="Description" value="" ver="3"/>
			<designed target="Id" value="" ver="3"/>
			<designed target="BackgroundColor" value="4281545523" ver="3"/>
			<designed target="ForegroundColor" value="4293388263" ver="3"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="3"/>
			<designed target="TextAlignment" value="129" ver="3"/>
			<designed target="TitleBackgroundColor" value="4281545523" ver="3"/>
			<designed target="TitleForegroundColor" value="4293388263" ver="3"/>
			<designed target="TitleFont" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="3"/>
			<designed target="TitleTextAlignment" value="132" ver="3"/>
			<designed target="Width" value="100" ver="3"/>
			<designed target="WidthResizeMode" value="0" ver="3"/>
			<designed target="Emptiable" value="true" ver="3"/>
			<designed target="Hidden" value="false" ver="3"/>
			<designed target="NumberFormat" value="%g" ver="3"/>
			<designed target="TimeFormat" value="dd.MM.yyyy hh:mm:ss.zzz" ver="3"/>
			<designed target="JsonFilter" value="" ver="3"/>
			<designed target="SortingEnabled" value="false" ver="3"/>
			<designed target="SortOrder" value="0" ver="3"/>
			<designed target="SortPriority" value="0" ver="3"/>
			<designed target="WordWrap" value="false" ver="3"/>
			<designed target="ColumnOwnId" value="" ver="4"/>
			<designed target="SortMode" value="0" ver="4"/>
		</object>
		<designed target="HorizontalScrollMode" value="0" ver="4"/>
		<designed target="VerticalScrollMode" value="0" ver="4"/>
		<designed target="HorizontalScrollBarPolicy" value="0" ver="4"/>
		<designed target="VerticalScrollBarPolicy" value="0" ver="4"/>
		<designed target="DelayedSortingEnabled" value="false" ver="4"/>
		<do access-modifier="private" name="CheckJSON" display-name="CheckJSON" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[try
{
	// Попытка установить json-фильтр
	TestTable.TestColumn.JsonFilter = jsonStr;
	return "";
}
catch (err)
{
	return err.toString();
}]]>
			</body>
			<param access-modifier="private" name="jsonStr" display-name="" uuid="0bf62d3c-063a-42ae-b6d5-1adf9d09afb3" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<designed target="BackgroundColor" value="4294967295" ver="4"/>
		<designed target="FrameColor" value="4278190080" ver="4"/>
		<designed target="GridColor" value="4292401368" ver="4"/>
		<designed target="RowHeightResizeMode" value="3" ver="5"/>
	</object>
</object>

